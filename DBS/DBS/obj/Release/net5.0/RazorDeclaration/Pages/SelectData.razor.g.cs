// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace DBS.Pages
{
    #line hidden
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\013590\source\repos\DBS\DBS\DBS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\013590\source\repos\DBS\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\013590\source\repos\DBS\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\013590\source\repos\DBS\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\013590\source\repos\DBS\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\013590\source\repos\DBS\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\013590\source\repos\DBS\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\013590\source\repos\DBS\DBS\DBS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\013590\source\repos\DBS\DBS\DBS\_Imports.razor"
using DBS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\013590\source\repos\DBS\DBS\DBS\_Imports.razor"
using DBS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\013590\source\repos\DBS\DBS\DBS\Pages\SelectData.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\013590\source\repos\DBS\DBS\DBS\Pages\SelectData.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\013590\source\repos\DBS\DBS\DBS\Pages\SelectData.razor"
using System.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\013590\source\repos\DBS\DBS\DBS\Pages\SelectData.razor"
using DBS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\013590\source\repos\DBS\DBS\DBS\Pages\SelectData.razor"
using DBS.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\013590\source\repos\DBS\DBS\DBS\Pages\SelectData.razor"
using DBS.Services;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/selectdata")]
    public partial class SelectData : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 258 "C:\Users\013590\source\repos\DBS\DBS\DBS\Pages\SelectData.razor"
       
	private string myAccount,bankName,bankCode,accountDate, accountBank, accountBankNo, accountNo, accountType, accountIn, accountOut, accountTotal, accountOtherNo, remark;

	public DataSet dataset = new DataSet();

	//確保有連接資料庫成功
	string resultMessage = "No connection attempt made yet.";
	SqlConnection connection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
	public void CheckDatabaseConnection()
	{
		if (connection.State == System.Data.ConnectionState.Closed)
		{
			connection.Open();
			resultMessage = "Connected to the database successfully!";
		}
		else if (connection.State == System.Data.ConnectionState.Open)
		{
			resultMessage = "Connection is already open.";
		}
	}
	string SQLString = "SELECT * FROM Platform..User_Password WHERE 1=1";
	string resultuserpassword = "no connectin userpassword";

	//確定有連到正確的資料表
	public void CheckSQLConnection()
	{
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			try
			{
				// 檢查是否已連接
				if (connection.State == ConnectionState.Closed)
				{
					connection.Open();
					resultuserpassword = "Connected to userpassword!";
					// 創建 SqlCommand 對象
					using (SqlCommand command = new SqlCommand(SQLString, connection))
					{
						// 使用 ExecuteReader 执行 SQL 查询
						using (SqlDataReader reader = command.ExecuteReader())
						{
							// 判斷是否有行
							if (reader.HasRows)
							{
								resultuserpassword = " Data found in the User_Password table.";
							}
							else
							{
								resultuserpassword = " No data found in the User_Password table.";
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				resultuserpassword = ex.Message;
			}
		}
	}
	DateTime accountInsert;
	string money;
	public void MoneyChange(ChangeEventArgs e)
	{
		money = e.Value.ToString();
	}
	public void InChange(ChangeEventArgs e)
	{
		accountIn = e.Value.ToString();
	}
	public void OutChange(ChangeEventArgs e)
	{
		accountOut = e.Value.ToString();
	}
	string bank;
	public void BankChange(ChangeEventArgs e)
	{
		bank = e.Value.ToString();
		bankName = e.Value.ToString().Substring(3);
		bankCode = e.Value.ToString().Substring(0, 3);
	}
	string bank2, bankName2, bankCode2;
	public void BankChangeOther(ChangeEventArgs e)
	{
		bank2 = e.Value.ToString();
		bankName2 = e.Value.ToString().Substring(3);
		bankCode2 = e.Value.ToString().Substring(0, 3);
	}
	string account;
	public void AccountChange(ChangeEventArgs e)
	{
		account = e.Value.ToString();
	}
	DateTime beginDate;
	public void BeginDateChange(ChangeEventArgs e)
	{
		beginDate = Convert.ToDateTime(e.Value);
	}
	DateTime endDate;
	public void EndDateChange(ChangeEventArgs e)
	{
		endDate = Convert.ToDateTime(e.Value);
	}
	DateTime editDate;
	public void EditDateChange(ChangeEventArgs e)
	{
		editDate = Convert.ToDateTime(e.Value);
	}

	private string sharedVariable = "Initial Value";

	private void HandleInput(ChangeEventArgs e)
	{
		// 此方法處理文本框輸入
		sharedVariable = e.Value.ToString();
	}
	//保存
	public void OnClickSave2(int index)
	{
		isEdit = false;
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataset1 = new DataSet();
		m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == editaccount)//我的帳號
												.ToArray();
		if (string.IsNullOrEmpty(money))
		{
			AlertService.Error("請選擇付款方式");
			return;
		}
		if (string.IsNullOrEmpty(accountIn) && string.IsNullOrEmpty(accountOut))
		{
			AlertService.Error("請輸入收入或者支出");
			return;
		}
		if (string.IsNullOrEmpty(accountOtherNo))
		{
			AlertService.Error("請輸入對方帳號");
			return;
		}

		if (m_NewAccountS.Length == 1) //若該帳號只有一條
		{
			//HandleArrayWithOneItem();
			//HandleArrayWithOneItemSelectOne(index);//更新當前這條
		}
		else //若該帳號大於2條
		{
			kkk += sharedVariable;
			//HandleArrayWithMoreThanOneItemSelectOne(index);//更新當前這條
			//HandleArrayWithMoreThanOneItemSelectAll(index);
			kkk += "account"+accountIn;
		}
	}
	public void HandleArrayWithOneItemSelectOne(int index)
	{
		string SQLString = "UPDATE dbo.NewAccountInfo SET [accountType]=@accountType, [accountIn] = @accountIn, [accountOut]=@accountOut, [accountTotal] = @toto ,[accountOtherNo]=@accountOtherNo WHERE [accountNo] =@accountNo AND [accountBankNo] =@bank AND [accountDate]= @accountdate ";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == editaccount)//我的帳號
										.GroupBy(item => item.baccountNo)
										.Select(group => group.OrderBy(item => item.baccountDate))
										.SelectMany(sortedGroup => sortedGroup)
										.ToArray();
		decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut > 0 ? latestIn - latestOut : 0;
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
			sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? DBNull.Value);//收入
			sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? DBNull.Value);//支出
			sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
			sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
			sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
			sqlcommand.Parameters.AddWithValue("@accountNo", editaccount);//我的帳號
			sqlcommand.Parameters.AddWithValue("@bank", editbank);//銀行
			sqlcommand.Parameters.AddWithValue("@accountDate", datestring);//交易日期
			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)
			{
				AlertService.Success($"成功修改{rowsAffected}條");
				isEdit = false;
				if (editStates.ContainsKey(index))
				{
					editStates[index] = !editStates[index];
				}
			}
			else
			{
				cc_up = " 修改失敗";
				AlertService.Error("修改失敗");
			}
		}

	}
	public void HandleArrayWithMoreThanOneItemSelectOne(int index)//>2修改當前
	{
		string SQLString = "UPDATE dbo.NewAccountInfo SET [accountType]=@accountType, [accountIn] = @accountIn, [accountOut]=@accountOut, [accountTotal] = @toto ,[accountOtherNo]=@accountOtherNo WHERE [accountNo] =@accountNo AND [accountBankNo] =@bank AND [accountDate]= @accountdate ";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == editaccount)//我的帳號
								.GroupBy(item => item.baccountNo)
								.Select(group => group.OrderBy(item => item.baccountDate))
								.SelectMany(sortedGroup => sortedGroup)
								.ToArray();

		var latestRecord = m_NewAccountS[0];// 最舊
		var secondRecord = m_NewAccountS[1];//第二舊
		decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut > 0 ? latestIn - latestOut : 0;
		decimal toto1 = 0;

		if (latestRecord.baccountDate.ToString("yyyy-MM-dd") == datestring)//新資料成為最舊
		{
			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? DBNull.Value);//收入
				sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? DBNull.Value);//支出
				sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
				sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
				sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
				sqlcommand.Parameters.AddWithValue("@accountNo", editaccount);//我的帳號
				sqlcommand.Parameters.AddWithValue("@bank", editbank);//銀行
				sqlcommand.Parameters.AddWithValue("@accountDate", datestring);//交易日期
				int rowsAffected = sqlcommand.ExecuteNonQuery();
				if (rowsAffected > 0)
				{
					cc_up = $"成功修改{rowsAffected}條";
					AlertService.Success($"成功修改{rowsAffected}條");
					myAccount = "";//我的帳號
					accountOut = "";
					accountIn = "";
					accountOtherNo = "";
					if (editStates.ContainsKey(index))
					{
						editStates[index] = !editStates[index];
					}
				}
				else
				{
					cc_up = " 修改失敗";
					AlertService.Error("修改失敗");
				}
				SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
				sqlTransaction.Commit();
			}
		}
		else //除了最舊都是在這(最新或者不新不舊)
				//(m_NewAccountS.Last().baccountDate.ToString("yyyy-MM-dd") == datestring)//新資料依然最新
		{
			latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
			latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
			for (int i = 0; i < m_NewAccountS.Length; i++)
			{
				if (m_NewAccountS[i].baccountDate.ToString("yyyy-MM-dd") == datestring)
				{
					toto1 = m_NewAccountS[i - 1].baccountTotal + latestIn - latestOut;
					kkk = m_NewAccountS[i - 1].baccountDate.ToString();
				}
			}
			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? DBNull.Value);//收入
				sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? DBNull.Value);//支出
				sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
				sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
				sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
				sqlcommand.Parameters.AddWithValue("@accountNo", editaccount);//我的帳號
				sqlcommand.Parameters.AddWithValue("@bank", editbank);//銀行
				sqlcommand.Parameters.AddWithValue("@accountDate", datestring);//交易日期
				int rowsAffected = sqlcommand.ExecuteNonQuery();
				if (rowsAffected > 0)
				{
					AlertService.Success($"成功修改{rowsAffected}條");
					myAccount = "";//我的帳號
					accountOut = "";
					accountIn = "";
					accountOtherNo = "";
					if (editStates.ContainsKey(index))
					{
						editStates[index] = !editStates[index];
					}
				}
				else
				{

					AlertService.Error("修改失敗");
				}
				SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
				sqlTransaction.Commit();
			}
		}
	}
	public void HandleArrayWithMoreThanOneItemSelectAll(int index)
	{}
	public void OnClickSave(int index)
	{
		isEdit = false;
		string SQLString = "UPDATE dbo.NewAccountInfo SET [accountIn] = @accountIn , [accountOut] =@accountOut , [accountOtherNo] =@accountOtherNo , [accountType]= @accountType , [remark]=@remark WHERE [accountNo] =@accountNo AND [accountBankNo] =@bank AND [accountDate]= @editDate ";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataset1 = new DataSet();
		// 获取点击行的数据
		var clickedAccount = m_NewAccountS[index];
		if (editDate == DateTime.MinValue)
		{
			AlertService.Error("請選擇交易日期");
			return; // 在這裡返回，結束函數執行
		}
		if (string.IsNullOrEmpty(bank))
		{
			AlertService.Error("請選擇銀行");
			return;
		}
		if (string.IsNullOrEmpty(account))
		{
			AlertService.Error("請選擇帳號");
			return;
		}
		if (string.IsNullOrEmpty(money))
		{
			AlertService.Error("請選擇付款方式");
			return;
		}
		if (string.IsNullOrEmpty(accountIn) && string.IsNullOrEmpty(accountOut))
		{
			AlertService.Error("請輸入收入或者支出");
			return;
		}
		if (string.IsNullOrEmpty(accountOtherNo))
		{
			AlertService.Error("請輸入對方帳號");
			return;
		}
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
			sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? DBNull.Value);//收入
			sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? DBNull.Value);//支出
			sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
			sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
			sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
			sqlcommand.Parameters.AddWithValue("@bank", bankCode);//銀行
			sqlcommand.Parameters.AddWithValue("@editDate", editDate);//交易日期
			sqlcommand.Parameters.AddWithValue("@remark", (object)remark?? DBNull.Value);//備註

			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)
			{
				bb_up = $"成功更新{rowsAffected}條";
				AlertService.Success($"成功更新{rowsAffected}條");
				isEdit = false;
			}
			else
			{
				bb_up = " 更新失敗";
				AlertService.Error("更新失敗");

			}
			if (editStates.ContainsKey(index))
			{
				editStates[index] = !editStates[index];
			}
		}

	}
	// 取消编辑
	public void OnClickCancel(int index)
	{
		isEdit = false;
		if (editStates.ContainsKey(index))
		{
			editStates[index] = !editStates[index];
		}
		bank = "";
		money = "";
		accountOtherNo = "";

	}
	public void OnClicCancel2(MouseEventArgs e)
	{
		isAdd = false;
		isEdit = false;
	}
	//修改，變成可修改
	DateTime datee;
	string datestring = "";
	string editbankfull = "";
	string editbank = "";
	string editaccount = "";

	bool isEdit = false;
	Dictionary<int, bool> editStates = new Dictionary<int, bool>();
	public void OnClickEdit(int index)
	{
		isEdit = true;
		if (editStates.ContainsKey(index))
		{
			editStates[index] = !editStates[index];
		}
		else
		{
			editStates.Add(index, true);
		}
		NewAccount rowData = m_NewAccountS[index];
		datee = rowData.baccountDate.Date;
		datestring = datee.ToString("yyyy-MM-dd");
		editbankfull = rowData.baccountBankNo + rowData.baccountBank;
		editbank = rowData.baccountBankNo;
		editaccount = rowData.baccountNo;

	}
	string dd = "";
	public void OnClickDel3(int index)
	{
		if (index >= 0 && index < m_NewAccountS.Length)
		{
			// 1. 在資料庫中刪除資料
			string SQLString = "DELETE FROM dbo.NewAccountInfo WHERE [accountDate] = @accountDate AND [accountBankNo] = @bank AND [accountNo] =@accountNo AND [accountInsert]=@accountInsert ";
			SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
			dataset1 = new DataSet();

			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountDate", m_NewAccountS[index].baccountDate);
				sqlcommand.Parameters.AddWithValue("@bank", m_NewAccountS[index].baccountBankNo);
				sqlcommand.Parameters.AddWithValue("@accountNo", m_NewAccountS[index].baccountNo);
				sqlcommand.Parameters.AddWithValue("@accountInsert", m_NewAccountS[index].baccountInsert);
				try
				{
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Info($"成功刪除{rowsAffected}條");
					}
					else
					{
						AlertService.Warn($"刪除失敗 ");

					}

				}
				catch (Exception ex)
				{
					kkk = ex.Message;
				}
				finally
				{
					sqlconnection.Close();
				}
			}

			// 2. 在本地資料結構中刪除資料
			List<NewAccount> newDataList = m_NewAccountS.ToList();
			//要在newDataList.RemoveAt(index)存取accountno2,bankno2,accountinsert2
			//因為這是要存取被刪除資料的帳號、銀行、加入時間
			string accountno2 = m_NewAccountS[index].baccountNo;
			string bankno2 = m_NewAccountS[index].baccountBankNo;
			DateTime accountinsert2 = m_NewAccountS[index].baccountInsert;
			//網頁上刪除該資料
			newDataList.RemoveAt(index);
			//m_NewAccountS變成新的(已刪除掉那筆資料ㄌ)
			m_NewAccountS = newDataList.ToArray();
			//3.更新資料庫的總額
			UpdateDelTotal(index, accountno2, bankno2, accountinsert2);
		}

	}
	//刪掉資料後，所有同樣帳戶、銀行的資料重新算總額
	public void UpdateDelTotal(int index, string accountno2, string bankno2, DateTime accountinsert2)
	{
		string SQLString = "UPDATE dbo.NewAccountInfo SET  [accountTotal]=@accountTotal WHERE [accountNo] =@accountNo AND [accountBankNo] =@accountBankNo AND [accountDate]= @accountDate AND [accountInsert] =@accountInsert";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		dataset1 = new DataSet();
		m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == accountno2)
												.Where(item => item.baccountBankNo == bankno2)
												.OrderBy(item => item.baccountDate)//依照日期排序，不然會亂掉!
												.ToArray();
		decimal toto0 = 0;
		for (int k = 0; k < m_NewAccountS.Length; k++)
		{
			//目前的list中包含已刪除的資料，因此設指令，若加入時間相同則跳過
			//加入時間accountInsert是唯一值
			if (m_NewAccountS[k].baccountInsert == accountinsert2)
			{
				// 跳過當前跌代
				continue;
			}
			kkk += $"第{k.ToString()}個日期{m_NewAccountS[k].baccountDate}帳戶{m_NewAccountS[k].baccountNo}收入{m_NewAccountS[k].baccountIn}支出{m_NewAccountS[k].baccountOut}原本總額{m_NewAccountS[k].baccountTotal}";
			toto0 += m_NewAccountS[k].baccountIn - m_NewAccountS[k].baccountOut;
			kkk += $"新總額{toto0}";
			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountTotal", toto0);
				sqlcommand.Parameters.AddWithValue("@accountNo", m_NewAccountS[k].baccountNo);
				sqlcommand.Parameters.AddWithValue("@accountDate", m_NewAccountS[k].baccountDate);
				sqlcommand.Parameters.AddWithValue("@accountBankNo", m_NewAccountS[k].baccountBankNo);
				sqlcommand.Parameters.AddWithValue("@accountInsert", m_NewAccountS[k].baccountInsert);
				try
				{
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Info($"成功修改{rowsAffected}條");
					}
					else
					{
						AlertService.Warn($"修改失敗 ");
					}
				}
				catch (Exception ex)
				{
					kkk = ex.Message;
				}
				finally
				{
					sqlconnection.Close();
				}
			}
		}

	}
	string bb_up = "";
	string ee = "";
	string cc_up = "";
	public DataSet dataset1 = new DataSet();
	bool isAdd = false;

	public void OnClickAdd(MouseEventArgs e)
	{
		isAdd = true;
		isEdit = true;
	}
	string datee2 = "";
	DateTime datee3;

	public void OnClickAdd3(MouseEventArgs e)
	{
		if (editDate == DateTime.MinValue)
		{
			AlertService.Error("請選擇交易日期");
			return; // 在這裡返回，結束函數執行
		}
		if (string.IsNullOrEmpty(bank))
		{
			AlertService.Error("請選擇銀行");
			return;
		}
		if (string.IsNullOrEmpty(accountOtherNo))
		{
			AlertService.Error("請選擇帳號");
			return;
		}
		if (string.IsNullOrEmpty(money))
		{
			AlertService.Error("請選擇付款方式");
			return;
		}
		if (string.IsNullOrEmpty(accountIn) && string.IsNullOrEmpty(accountOut))
		{
			AlertService.Error("請輸入收入或者支出");
			return;
		}
		if (string.IsNullOrEmpty(accountOtherNo))
		{
			AlertService.Error("請輸入對方帳號");
			return;
		}
		datee3 = DateTime.Now;
		datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//加入日期
		m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == @myAccount)//我的帳號
												.GroupBy(item => item.baccountNo)
												.Select(group => group.OrderBy(item => item.baccountDate))
												.SelectMany(sortedGroup => sortedGroup)
												.ToArray();
		if (m_NewAccountS.Length == 0)//若該帳號沒有使用過直接新增
		{
			HandleEmptyArray();
			UpdateHandleEmptyArray();
		}
		else if (m_NewAccountS.Length == 1) //若該帳號只有一條
		{
			HandleArrayWithOneItem();
			//HandleArrayWithOneItemUpdate();
			UpdateHandleEmptyArray();
		}
		else //若該帳號大於2條
		{

			HandleArrayWithMoreThanOneItem();
			//HandleArrayWithMoreThanOneItemUpdate();
			UpdateHandleEmptyArray();
		}
	}

	private NewAccount[] m_NewAccountRecordS;
	public void HandleEmptyArray()//若該帳號沒有使用過直接新增
	{
		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[remark], [accountInsert]) VALUES (@editDate,@bankName,@bankCode,@accountNo,@accountType,@accountIn,@accountOut,@toto,@accountOtherNo,@remark ,@datee2)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut ;
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
			sqlcommand.Parameters.AddWithValue("@editDate", editDate);//交易日期
			sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
			sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
			sqlcommand.Parameters.AddWithValue("@accountNo", myAccount);//我的帳號
			sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
			sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? 0);//收入
			sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? 0);//支出
			sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
			sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
			sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
			sqlcommand.Parameters.AddWithValue("@datee2", datee2);//加入時間，之後排序以這個為主
			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)
			{
				cc_up = $"成功新增{rowsAffected}條";
				AlertService.Success($"成功新增{rowsAffected}條");
				myAccount = "";//我的帳號
				accountOut = "";
				accountIn = "";
				accountOtherNo = "";

			}
			else
			{
				cc_up = " 更新失敗";
				AlertService.Error("更新失敗");
			}
			SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
			sqlTransaction.Commit();
		}


	}
	public void UpdateHandleEmptyArray()//更新頁面//0
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<NewAccount> newList = m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetDataFromDatabase();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newList.ToArray();
	}
	public List<NewAccount> GetDataFromDatabase()//只選擇加入時間最新的那個(等於新資料)
	{
		List<NewAccount> newDataList = new List<NewAccount>();
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string SQLString = "SELECT TOP 1 * FROM dbo.NewAccountInfo ORDER BY accountInsert DESC ";

		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{

			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				connection.Open();

				using (SqlDataReader reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						NewAccount newData = new NewAccount
							{
								// 這裡的屬性賦值根據您的資料表結構進行調整
								baccountDate = reader.GetDateTime(reader.GetOrdinal("accountDate")),
								baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
								baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
								baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
								baccountType = reader.GetString(reader.GetOrdinal("accountType")),
								baccountIn = reader.IsDBNull(reader.GetOrdinal("accountIn")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountIn")),
								baccountOut = reader.IsDBNull(reader.GetOrdinal("accountOut")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountOut")),
								baccountTotal = reader.IsDBNull(reader.GetOrdinal("accountTotal")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountTotal")),
								baccountOtherNo = reader.GetString(reader.GetOrdinal("accountOtherNo")),
								bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
								baccountInsert = reader.GetDateTime(reader.GetOrdinal("accountInsert"))
								// 其他屬性...
							};
						newDataList.Add(newData);
					}
				}
			}
			return newDataList;
		}

	}

	public void HandleArrayWithOneItem()//若該帳號只有一條新增
	{
		var latestRecord = m_NewAccountS[0];
		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[remark], [accountInsert]) VALUES (@accountDate,@bankName,@bankCode,@accountNo,@accountType,@accountIn,@accountOut,@toto,@accountOtherNo,@remark ,@datee2)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		if (latestRecord.baccountDate > editDate)//最舊
		{
			decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
			decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
			decimal toto = latestIn - latestOut ;
			string accountinsert = datee.ToString("yyyy-MM-dd HH:mm:ss");
			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
				sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
				sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
				sqlcommand.Parameters.AddWithValue("@accountNo", myAccount);//我的帳號
				sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
				sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? 0);//收入
				sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? 0);//支出
				sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
				sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
				sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
				sqlcommand.Parameters.AddWithValue("@datee2", datee2);//加入時間，之後排序以這個為主
				int rowsAffected = sqlcommand.ExecuteNonQuery();
				if (rowsAffected > 0)
				{
					cc_up = $"成功新增{rowsAffected}條";
					AlertService.Success($"成功新增{rowsAffected}條");
					myAccount = "";//我的帳號
					accountOut = "";
					accountIn = "";
					accountOtherNo = "";
				}
				else
				{
					cc_up = " 新增失敗";
					AlertService.Error("新增失敗");
				}
				SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
				sqlTransaction.Commit();
				HandleArrayWithOneItemUpdate(latestIn, latestOut);
			}
		}
		else//新資料為最新
		{
			decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
			decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
			decimal secondTotal = (m_NewAccountS[0].baccountIn-m_NewAccountS[0].baccountOut);
			decimal toto = secondTotal + latestIn - latestOut;
			//var previousTotal = latestIn - latestOut > 0 ? latestIn - latestOut : 0;
			//kkk = toto.ToString();
			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
				sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
				sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
				sqlcommand.Parameters.AddWithValue("@accountNo", myAccount);//我的帳號
				sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
				sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? 0);//收入
				sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? 0);//支出
				sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
				sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
				sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
				sqlcommand.Parameters.AddWithValue("@datee2", datee2);//加入時間，之後排序以這個為主
				int rowsAffected = sqlcommand.ExecuteNonQuery();
				if (rowsAffected > 0)
				{
					cc_up = $"成功新增{rowsAffected}條";
					AlertService.Success($"成功新增{rowsAffected}條");

					myAccount = "";//我的帳號
					accountOut = "";
					accountIn = "";
					accountOtherNo = "";
				}
				else
				{
					cc_up = " 新增失敗";
					AlertService.Error("新增失敗");
				}
				SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
				sqlTransaction.Commit();


			}

		}

	}
	string kkk = "";
	public void HandleArrayWithOneItemUpdate(decimal latestIn, decimal latestOut)//若該帳號只有一條更新
	{

		var latestRecord = m_NewAccountS[0];
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		//decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		//decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut;

		if (latestRecord.baccountDate > editDate)//最舊
		{
			string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE   [accountBankNo] =@bank AND [accountInsert]= @accountInsert ";
			m_NewAccountRecordS = m_NewAccountS.Where(item => item.baccountDate > editDate).ToArray();
			foreach (var oldRecord in m_NewAccountRecordS)
			{
				decimal secondIn = oldRecord.baccountIn ;
				decimal secondOut = oldRecord.baccountOut ;
				decimal toto1 = (latestIn-latestOut + secondIn - secondOut) ;
				//string datee4 = oldRecord.baccountDate.ToString("yyyy-MM-dd")	;
				//kkk = datee4.ToString()+"--"+bank+"---"+myAccount+"---"+toto1.ToString();
				//kkk顯示出來ㄉ結果沒有錯
				//kkk = toto.ToString()+"--" +secondIn.ToString()+"--"+ secondOut.ToString();
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString2, sqlconnection);
					sqlcommand.Parameters.Clear();
					sqlcommand.Parameters.AddWithValue("@accountInsert",oldRecord.baccountInsert);//交易日期
					sqlcommand.Parameters.AddWithValue("@bank", bankCode);//銀行
																				//sqlcommand.Parameters.AddWithValue("@accountNo", myAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@toto", latestIn - latestOut + secondIn - secondOut);//餘額
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						cc_up = $"成功更新{rowsAffected}條";
						AlertService.Success($"成功更新{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
					}
					else
					{
						cc_up = " 更新失敗";
						AlertService.Error("更新失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
				}
			}
		}

	}
	public void HandleArrayWithMoreThanOneItem()//若該帳號大於2條新增
	{
		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[remark], [accountInsert]) VALUES (@accountDate,@bankName,@bankCode,@accountNo,@accountType,@accountIn,@accountOut,@toto,@accountOtherNo,@remark ,@datee2)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		var latestRecord = m_NewAccountS[0];// 最舊
		var secondRecord = m_NewAccountS[1];//第二舊
		decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut;
		decimal toto1 = 0;
		if (latestRecord.baccountDate > editDate)//新資料成為最舊
		{

			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
				sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
				sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
				sqlcommand.Parameters.AddWithValue("@accountNo", myAccount);//我的帳號
				sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
				sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? 0);//收入
				sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? 0);//支出
				sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
				sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
				sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
				sqlcommand.Parameters.AddWithValue("@datee2", datee2);//加入時間，之後排序以這個為主
				int rowsAffected = sqlcommand.ExecuteNonQuery();
				if (rowsAffected > 0)
				{
					cc_up = $"成功新增{rowsAffected}條";
					AlertService.Success($"成功新增{rowsAffected}條");
					myAccount = "";//我的帳號
					accountOut = "";
					accountIn = "";
					accountOtherNo = "";
				}
				else
				{
					cc_up = " 新增失敗";
					AlertService.Error("新增失敗");
				}
				SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
				sqlTransaction.Commit();
				HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
			}
		}
		else if (m_NewAccountS.Last().baccountDate < editDate)//新資料依然最新
		{
			latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
			latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
			toto1 = m_NewAccountS.Last().baccountIn-m_NewAccountS.Last().baccountOut + latestIn - latestOut;
			kkk = toto1.ToString();
			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
				sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
				sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
				sqlcommand.Parameters.AddWithValue("@accountNo", myAccount);//我的帳號
				sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
				sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? 0);//收入
				sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? 0);//支出
				sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
				sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
				sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
				sqlcommand.Parameters.AddWithValue("@datee2", datee2);//加入時間，之後排序以這個為主
				int rowsAffected = sqlcommand.ExecuteNonQuery();
				if (rowsAffected > 0)
				{
					cc_up = $"成功新增{rowsAffected}條";
					AlertService.Success($"成功新增{rowsAffected}條");
					myAccount = "";//我的帳號
					accountOut = "";
					accountIn = "";
					accountOtherNo = "";
				}
				else
				{
					cc_up = " 新增失敗";
					AlertService.Error("新增失敗");
				}
				SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
				sqlTransaction.Commit();
			}

		}
		else//新資料不舊不新，最麻煩了 QQ
		{
			for (int i = 0; i < m_NewAccountS.Length; i++)
			{
				if (m_NewAccountS[i].baccountDate > editDate)
				{
					latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
					latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
					toto = m_NewAccountS[i-1].baccountIn-m_NewAccountS[i-1].baccountOut + latestIn - latestOut;
					kkk += toto.ToString() + "----"+i.ToString()+"--"+m_NewAccountS[i].baccountDate;
					if (sqlconnection.State == System.Data.ConnectionState.Closed)
					{
						sqlconnection.Open();
						SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
						sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
						sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
						sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
						sqlcommand.Parameters.AddWithValue("@accountNo", myAccount);//我的帳號
						sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
						sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? 0);//收入
						sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? 0);//支出
						sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
						sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
						sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
						sqlcommand.Parameters.AddWithValue("@datee2", datee2);//加入時間，之後排序以這個為主
						int rowsAffected = sqlcommand.ExecuteNonQuery();
						if (rowsAffected > 0)
						{
							cc_up = $"成功新增{rowsAffected}條";
							AlertService.Success($"成功新增{rowsAffected}條");
							myAccount = "";//我的帳號
							accountOut = "";
							accountIn = "";
							accountOtherNo = "";
						}
						else
						{
							cc_up = " 新增失敗";
							AlertService.Error("新增失敗");
						}
						SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
						sqlTransaction.Commit();
						HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
						break;
					}
				}

			}
		}
	}
	public void HandleArrayWithMoreThanOneItemUpdate(decimal latestIn, decimal latestOut)//若該帳號大於2條更新
	{
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		//string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE [accountNo] =@accountNo AND [accountBankNo] =@bank AND [accountDate]= @accountDate ";
		var oldRecord = m_NewAccountS[0];
		var secondRecourd = m_NewAccountS[1];
		latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut ;
		//最舊
		decimal toto0 = 0;//最舊
		m_NewAccountRecordS = m_NewAccountS.Where(item => item.baccountDate > editDate).ToArray();
		using (SqlConnection sqlConnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022"))
		{
			if (oldRecord.baccountDate > editDate)//最舊
			{
				for (int i = 0; i < m_NewAccountRecordS.Length; i++)
				{
					accountInsert = m_NewAccountRecordS[i].baccountInsert;

					if (i == 0)
					{
						decimal oldIn = m_NewAccountRecordS[0].baccountIn;
						decimal oldOut = m_NewAccountRecordS[0].baccountOut;
						toto0 = toto + oldIn - oldOut;
						UpdateAccountTotal(sqlConnection, m_NewAccountRecordS[i].baccountDate, bank, myAccount, toto0, accountInsert);
						kkk = "0";
					}
					else
					{
						toto0 += m_NewAccountRecordS[i].baccountIn - m_NewAccountRecordS[i].baccountOut;
						UpdateAccountTotal(sqlConnection, m_NewAccountRecordS[i].baccountDate, bank, myAccount, toto0, accountInsert);
						kkk += "other";
					}
				}
			}
			else if (m_NewAccountS.Last().baccountDate < editDate)//新資料依然最新
			{ }
			else
			{
				for (int i = 0; i < m_NewAccountS.Length; i++)
				{
					//kkk += i.ToString()+"--"+m_NewAccountS[i].baccountDate;
					if (m_NewAccountS[i].baccountDate > editDate)
					{
						decimal toto1 = m_NewAccountS[i - 1].baccountTotal + latestIn - latestOut;//新資料不舊不新，最麻煩了 QQ

						for (int j = i; j < m_NewAccountS.Length; j++)
						{
							toto1 += m_NewAccountS[j].baccountIn - m_NewAccountS[j].baccountOut;
							accountInsert = m_NewAccountS[j].baccountInsert;
							UpdateAccountTotal(sqlConnection, m_NewAccountS[j].baccountDate, bank, myAccount, toto1, accountInsert);
							kkk += "第" + j.ToString() + "次--" + m_NewAccountS[j].baccountDate.ToString() + toto1.ToString();
							break;
						}


					}
				}
			}
		}
	}
	public void UpdateAccountTotal(SqlConnection sqlConnection, DateTime accountDate, string bank, string accountNo, decimal toto, DateTime accountInsert)
	{
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();

		string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE [accountNo] =@accountNo AND [accountBankNo] =@bank AND [accountDate]= @accountDate  AND [accountInsert]=@accountInsert";
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString2, sqlconnection);
			sqlcommand.Parameters.Clear();
			sqlcommand.Parameters.AddWithValue("@accountDate", accountDate);//交易日期
			sqlcommand.Parameters["@accountDate"].SqlDbType = SqlDbType.DateTime;
			sqlcommand.Parameters.AddWithValue("@bank", bankCode);//銀行
			sqlcommand.Parameters.AddWithValue("@accountNo", myAccount);//我的帳號
			sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
			sqlcommand.Parameters.AddWithValue("@accountInsert", accountInsert);//加入時間，用於辨別
			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)
			{
				cc_up = $"成功更新{rowsAffected}條";
				AlertService.Success($"成功更新{rowsAffected}條");
				myAccount = "";//我的帳號
				accountOut = "";
				accountIn = "";
				accountOtherNo = "";
			}
			else
			{
				cc_up = " 更新失敗";
				AlertService.Error("更新失敗");
			}
			SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
			sqlTransaction.Commit();
		}

	}
	public void OnClickAdd2(MouseEventArgs e)
	{
		datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[remark], [accountInsert]) VALUES (@editDate,@bankName,@bankCode,@accountNo,@accountType,@accountIn,@accountOut,@accountTotal,@accountOtherNo,@remark ,@datee2)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		if (editDate == DateTime.MinValue)
		{
			AlertService.Error("請選擇交易日期");
			return; // 在這裡返回，結束函數執行
		}
		if (string.IsNullOrEmpty(bank))
		{
			AlertService.Error("請選擇銀行");
			return;
		}
		if (string.IsNullOrEmpty(accountOtherNo))
		{
			AlertService.Error("請選擇帳號");
			return;
		}
		if (string.IsNullOrEmpty(money))
		{
			AlertService.Error("請選擇付款方式");
			return;
		}
		if (string.IsNullOrEmpty(accountIn) && string.IsNullOrEmpty(accountOut))
		{
			AlertService.Error("請輸入收入或者支出");
			return;
		}
		if (string.IsNullOrEmpty(accountOtherNo))
		{
			AlertService.Error("請輸入對方帳號");
			return;
		}
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
			sqlcommand.Parameters.AddWithValue("@editDate", editDate);//交易日期
			sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
			sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
			sqlcommand.Parameters.AddWithValue("@accountNo", myAccount);//我的帳號
			sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
			sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? 0);//收入
			sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? 0);//支出
			sqlcommand.Parameters.AddWithValue("@accountTotal", accountTotal);//餘額
			sqlcommand.Parameters.AddWithValue("@accountOtherNo", bankCode2 + accountOtherNo);//對方帳號
			sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
			sqlcommand.Parameters.AddWithValue("@datee2", datee2);//加入時間，之後排序以這個為主
			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)
			{
				cc_up = $"成功新增{rowsAffected}條";
				AlertService.Success($"成功新增{rowsAffected}條");
				myAccount = "";//我的帳號
				accountOut = "";
				accountIn = "";
				accountOtherNo = "";

			}
			else
			{
				cc_up = " 更新失敗";
				AlertService.Error("更新失敗");

			}
		}

		}

	string aa = "";
	private NewAccount[] m_NewAccountS;
	public void OnClickSelect(MouseEventArgs e)
	{
		bool bError = false;
		if (string.IsNullOrWhiteSpace(bank))
		{
			bError = true;
			AlertService.Error("請選擇銀行");
		}
		if (beginDate.ToString() == "0001/1/1 上午 12:00:00")
		{
			bError = true;
			AlertService.Error("請輸入開始日期");
		}
		if (endDate.ToString() == "0001/1/1 上午 12:00:00")
		{
			bError = true;
			AlertService.Error("請輸入結束日期");
		}

		if (bError)
		{
			m_NewAccountS = null;
			return;
		}

		m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountBankNo == bankCode && (string.IsNullOrEmpty(account) || item.baccountNo == account) && item.baccountDate >= beginDate && item.baccountDate <= endDate)
												.GroupBy(item => new { item.baccountBank, item.baccountNo })
												.SelectMany(group => group.OrderBy(item => item.baccountDate))
												.ToArray();
		AlertService.Success($"總共查詢到{m_NewAccountS.Count()}筆資料");
		if(m_NewAccountS==null)
		{
			AlertService.Warn("尚無資料");
		}
	}


	public void OnClickSelect_All(MouseEventArgs e)
	{
		try
		{
			m_NewAccountS = ServerData.m_NewAccountS.GroupBy(item => new { item.baccountBank, item.baccountNo })
													.SelectMany(group => group.OrderBy(item => item.baccountDate))
													.ToArray();

		}
		catch (Exception msg)
		{
			resultuserpassword = msg.Message;
		}
		AlertService.Success($"總共查詢到{m_NewAccountS.Count()}筆資料");
		if (m_NewAccountS == null)
		{
			AlertService.Warn("尚無資料");
		}
		}


	

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAlertService AlertService { get; set; }
    }
}
#pragma warning restore 1591
