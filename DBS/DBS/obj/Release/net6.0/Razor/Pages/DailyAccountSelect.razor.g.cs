#pragma checksum "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor" "{8829d00f-11b8-4213-878b-770e8597ac16}" "bc5c1e6fc1ca93ebeee474fca3a16d323d23584b660c4b508488a5b4a82e9795"
// <auto-generated/>
#pragma warning disable 1591
namespace DBS.Pages
{
    #line hidden
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using DBS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using DBS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
using System.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
using DBS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
using DBS.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
using DBS.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
using X.PagedList;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/DailyAccountSelect/{subBank2}/{subAccount}")]
    public partial class DailyAccountSelect : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<head b-oek14bx5h9><link href=\"styles/site.css\" rel=\"stylesheet\" b-oek14bx5h9></head>\r\n");
            __builder.OpenComponent<global::Microsoft.AspNetCore.Components.Authorization.AuthorizeView>(1);
            __builder.AddAttribute(2, "Authorized", (global::Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>)((context) => (__builder2) => {
                __builder2.OpenElement(3, "h3");
                __builder2.AddAttribute(4, "b-oek14bx5h9");
#nullable restore
#line (20,8)-(20,50) 25 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
__builder2.AddContent(5, subBank2.Substring(0, subBank2.Length - 3));

#line default
#line hidden
#nullable disable
                __builder2.AddContent(6, " ");
#nullable restore
#line (20,52)-(20,62) 25 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
__builder2.AddContent(7, subAccount);

#line default
#line hidden
#nullable disable
                __builder2.AddMarkupContent(8, " 查詢資料");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(9, "\r\n\t\t\t");
                __builder2.OpenElement(10, "table");
                __builder2.AddAttribute(11, "class", "table");
                __builder2.AddAttribute(12, "style", "text-align:right; margin-top:20px;");
                __builder2.AddAttribute(13, "b-oek14bx5h9");
                __builder2.OpenElement(14, "thead");
                __builder2.AddAttribute(15, "b-oek14bx5h9");
#nullable restore
#line 23 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
     if (!isAdd)
				{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(16, "tr");
                __builder2.AddAttribute(17, "class", "form-field");
                __builder2.AddAttribute(18, "b-oek14bx5h9");
                __builder2.AddMarkupContent(19, "<td b-oek14bx5h9></td>\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(20, "<td b-oek14bx5h9>開始日期</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(21, "td");
                __builder2.AddAttribute(22, "b-oek14bx5h9");
                __builder2.OpenElement(23, "input");
                __builder2.AddAttribute(24, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(25, "type", "date");
                __builder2.AddAttribute(26, "value", 
#nullable restore
#line 28 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                                                       editDateMin

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(27, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 28 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                                                                              BeginDateChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(28, "b-oek14bx5h9");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(29, "\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(30, "<td b-oek14bx5h9>結束日期</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(31, "td");
                __builder2.AddAttribute(32, "b-oek14bx5h9");
                __builder2.OpenElement(33, "input");
                __builder2.AddAttribute(34, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(35, "type", "date");
                __builder2.AddAttribute(36, "value", 
#nullable restore
#line 30 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                                                       editDateMax

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(37, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 30 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                                                                              EndDateChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(38, "b-oek14bx5h9");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(39, "\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(40, "td");
                __builder2.AddAttribute(41, "b-oek14bx5h9");
                __builder2.OpenElement(42, "button");
                __builder2.AddAttribute(43, "id", "Select_btn");
                __builder2.AddAttribute(44, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 31 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                            OnClickSelect

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(45, "class", "btn_select");
                __builder2.AddAttribute(46, "b-oek14bx5h9");
                __builder2.AddMarkupContent(47, "查詢");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(48, "\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(49, "td");
                __builder2.AddAttribute(50, "b-oek14bx5h9");
                __builder2.OpenElement(51, "button");
                __builder2.AddAttribute(52, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 32 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                            OnClickAdd2

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(53, "class", "btn_add");
                __builder2.AddAttribute(54, "b-oek14bx5h9");
                __builder2.AddMarkupContent(55, "新增");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
#nullable restore
#line 34 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
				}
				else
				{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(56, "tr");
                __builder2.AddAttribute(57, "class", "form-field");
                __builder2.AddAttribute(58, "b-oek14bx5h9");
                __builder2.OpenElement(59, "td");
                __builder2.AddAttribute(60, "b-oek14bx5h9");
                __builder2.OpenElement(61, "button");
                __builder2.AddAttribute(62, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 38 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                            OnClickCancel

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(63, "class", "btn_cancel");
                __builder2.AddAttribute(64, "b-oek14bx5h9");
                __builder2.AddMarkupContent(65, "取消新增");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(66, "\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(67, "td");
                __builder2.AddAttribute(68, "b-oek14bx5h9");
                __builder2.OpenElement(69, "button");
                __builder2.AddAttribute(70, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 39 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                            OnClickSave

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(71, "class", "btn_save");
                __builder2.AddAttribute(72, "b-oek14bx5h9");
                __builder2.AddMarkupContent(73, "儲存");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(74, "\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(75, "tr");
                __builder2.AddAttribute(76, "class", "form-field");
                __builder2.AddAttribute(77, "b-oek14bx5h9");
                __builder2.AddMarkupContent(78, "<td style=\"height: 30px; width :100px;\" b-oek14bx5h9>交易日期</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(79, "td");
                __builder2.AddAttribute(80, "b-oek14bx5h9");
                __builder2.OpenElement(81, "input");
                __builder2.AddAttribute(82, "style", "height: 30px; width :175px;");
                __builder2.AddAttribute(83, "type", "date");
                __builder2.AddAttribute(84, "value", 
#nullable restore
#line 43 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                                                       todatee

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(85, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 43 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                                                                          EditDateChange 

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(86, "b-oek14bx5h9");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(87, "\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(88, "<td b-oek14bx5h9>銀行</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(89, "td");
                __builder2.AddAttribute(90, "b-oek14bx5h9");
                __builder2.OpenElement(91, "input");
                __builder2.AddAttribute(92, "readonly");
                __builder2.AddAttribute(93, "value", 
#nullable restore
#line 45 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                 subBank2.Substring(0, subBank2.Length - 3)

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(94, "b-oek14bx5h9");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(95, "\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(96, "<td b-oek14bx5h9>我的帳號</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(97, "td");
                __builder2.AddAttribute(98, "b-oek14bx5h9");
                __builder2.OpenElement(99, "input");
                __builder2.AddAttribute(100, "readonly");
                __builder2.AddAttribute(101, "value", 
#nullable restore
#line 47 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                  subAccount

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(102, "b-oek14bx5h9");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(103, "\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(104, "<td b-oek14bx5h9>付款方式</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(105, "td");
                __builder2.AddAttribute(106, "b-oek14bx5h9");
                __builder2.OpenElement(107, "select");
                __builder2.AddAttribute(108, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(109, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 50 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                                             MoneyChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(110, "b-oek14bx5h9");
                __builder2.OpenElement(111, "option");
                __builder2.AddAttribute(112, "value");
                __builder2.AddAttribute(113, "disabled");
                __builder2.AddAttribute(114, "selected");
                __builder2.AddAttribute(115, "b-oek14bx5h9");
                __builder2.AddMarkupContent(116, "請選擇方式");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(117, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(118, "option");
                __builder2.AddAttribute(119, "b-oek14bx5h9");
                __builder2.AddMarkupContent(120, "現金");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(121, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(122, "option");
                __builder2.AddAttribute(123, "b-oek14bx5h9");
                __builder2.AddMarkupContent(124, "支票");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(125, "\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(126, "tr");
                __builder2.AddAttribute(127, "class", "form-field");
                __builder2.AddAttribute(128, "b-oek14bx5h9");
                __builder2.AddMarkupContent(129, "<td b-oek14bx5h9>收入</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(130, "td");
                __builder2.AddAttribute(131, "b-oek14bx5h9");
                __builder2.OpenElement(132, "input");
                __builder2.AddAttribute(133, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(134, "id", "accountIn");
                __builder2.AddAttribute(135, "type", "text");
                __builder2.AddAttribute(136, "asp-for", "accountIn");
                __builder2.AddAttribute(137, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 59 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                                                                                          accountIn

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(138, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => accountIn = __value, accountIn));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.AddAttribute(139, "b-oek14bx5h9");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(140, "\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(141, "<td b-oek14bx5h9>支出</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(142, "td");
                __builder2.AddAttribute(143, "b-oek14bx5h9");
                __builder2.OpenElement(144, "input");
                __builder2.AddAttribute(145, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(146, "id", "accountOut");
                __builder2.AddAttribute(147, "type", "text");
                __builder2.AddAttribute(148, "asp-for", "accountOut");
                __builder2.AddAttribute(149, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 61 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                                                                                            accountOut

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(150, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => accountOut = __value, accountOut));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.AddAttribute(151, "b-oek14bx5h9");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(152, "\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(153, "<td b-oek14bx5h9>對方帳號</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(154, "td");
                __builder2.AddAttribute(155, "b-oek14bx5h9");
                __builder2.OpenElement(156, "input");
                __builder2.AddAttribute(157, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(158, "id", "accountOtherNo");
                __builder2.AddAttribute(159, "type", "text");
                __builder2.AddAttribute(160, "asp-for", "accountOtherNo");
                __builder2.AddAttribute(161, "placeholder", "對方帳號");
                __builder2.AddAttribute(162, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 63 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                                                                                                    accountOtherNo

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(163, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => accountOtherNo = __value, accountOtherNo));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.AddAttribute(164, "b-oek14bx5h9");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(165, "\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(166, "<td b-oek14bx5h9>備註</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(167, "td");
                __builder2.AddAttribute(168, "b-oek14bx5h9");
                __builder2.OpenElement(169, "input");
                __builder2.AddAttribute(170, "style", "height:30px; width:175px;");
                __builder2.AddAttribute(171, "id", "remark");
                __builder2.AddAttribute(172, "type", "text");
                __builder2.AddAttribute(173, "asp-for", "remark");
                __builder2.AddAttribute(174, "placeholder", "備註");
                __builder2.AddAttribute(175, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 65 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                                                                                   remark

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(176, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => remark = __value, remark));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.AddAttribute(177, "b-oek14bx5h9");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
#nullable restore
#line 67 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
				}

#line default
#line hidden
#nullable disable
                __builder2.AddMarkupContent(178, @"<tr class=""field-tr"" b-oek14bx5h9><th style=""text-align:center"" b-oek14bx5h9>交易日期</th>
				<th b-oek14bx5h9>方式</th>
				<th style=""text-align:right;"" b-oek14bx5h9>收入</th>
				<th style=""text-align:right;"" b-oek14bx5h9>支出</th>
				<th b-oek14bx5h9>結存餘額</th>
				<th b-oek14bx5h9>對方行帳號</th>
				<th colspan=""2"" b-oek14bx5h9>備註</th></tr>");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(179, "\r\n\t\t");
                __builder2.OpenElement(180, "tbody");
                __builder2.AddAttribute(181, "b-oek14bx5h9");
#nullable restore
#line 79 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
     if (m_NewAccountS != null)
				{
					

#line default
#line hidden
#nullable disable
#nullable restore
#line 81 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
      foreach (var account in PagedList)
					{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(182, "tr");
                __builder2.AddAttribute(183, "onmouseover", "this.style.backgroundColor=\'rgba(184,193,236,0.6)\';this.style.color=\'#350E51\';");
                __builder2.AddAttribute(184, "onmouseout", "this.style.backgroundColor=\'#FFFFFE\';");
                __builder2.AddAttribute(185, "b-oek14bx5h9");
                __builder2.OpenElement(186, "td");
                __builder2.AddAttribute(187, "style", "text-align:center");
                __builder2.AddAttribute(188, "b-oek14bx5h9");
#nullable restore
#line (84,39)-(84,79) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
__builder2.AddContent(189, account.baccountDate.ToShortDateString());

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(190, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(191, "td");
                __builder2.AddAttribute(192, "b-oek14bx5h9");
#nullable restore
#line (85,13)-(85,33) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
__builder2.AddContent(193, account.baccountType);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(194, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(195, "td");
                __builder2.AddAttribute(196, "style", "text-align:right;");
                __builder2.AddAttribute(197, "b-oek14bx5h9");
#nullable restore
#line (86,39)-(86,57) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
__builder2.AddContent(198, account.baccountIn);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(199, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(200, "td");
                __builder2.AddAttribute(201, "style", "text-align:right;");
                __builder2.AddAttribute(202, "b-oek14bx5h9");
#nullable restore
#line (87,39)-(87,58) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
__builder2.AddContent(203, account.baccountOut);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(204, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(205, "td");
                __builder2.AddAttribute(206, "b-oek14bx5h9");
#nullable restore
#line (88,13)-(88,34) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
__builder2.AddContent(207, account.baccountTotal);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(208, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(209, "td");
                __builder2.AddAttribute(210, "b-oek14bx5h9");
#nullable restore
#line (89,13)-(89,36) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
__builder2.AddContent(211, account.baccountOtherNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(212, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(213, "td");
                __builder2.AddAttribute(214, "colspan", "2");
                __builder2.AddAttribute(215, "b-oek14bx5h9");
#nullable restore
#line (90,23)-(90,38) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
__builder2.AddContent(216, account.bremark);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.CloseElement();
#nullable restore
#line 92 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
					}

#line default
#line hidden
#nullable disable
#nullable restore
#line 92 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
      
				}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(217, "\r\n\t\t");
                __builder2.OpenElement(218, "tfoot");
                __builder2.AddAttribute(219, "b-oek14bx5h9");
                __builder2.OpenElement(220, "tr");
                __builder2.AddAttribute(221, "b-oek14bx5h9");
                __builder2.OpenElement(222, "td");
                __builder2.AddAttribute(223, "colspan", "7");
                __builder2.AddAttribute(224, "b-oek14bx5h9");
                __builder2.OpenElement(225, "div");
                __builder2.AddAttribute(226, "class", "pager");
                __builder2.AddAttribute(227, "b-oek14bx5h9");
#nullable restore
#line 99 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
       if (PagedList.PageCount > 1)
						{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(228, "button");
                __builder2.AddAttribute(229, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 101 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                         (() => LoadPage(1))

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(230, "class", "first_selected");
                __builder2.AddAttribute(231, "b-oek14bx5h9");
                __builder2.AddMarkupContent(232, "<i class=\"fas fa-angle-double-left\" b-oek14bx5h9></i>&nbsp第一頁");
                __builder2.CloseElement();
#nullable restore
#line 102 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
        if (PagedList.PageNumber == 1)
							{	

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(233, "button");
                __builder2.AddAttribute(234, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 104 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                          (() => LoadPage(1))

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(235, "class", "previous_selected");
                __builder2.AddAttribute(236, "b-oek14bx5h9");
                __builder2.AddMarkupContent(237, "<i class=\"fas fa-angle-left\" b-oek14bx5h9></i>&nbsp上一頁");
                __builder2.CloseElement();
#nullable restore
#line 105 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
							}
							else
							{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(238, "button");
                __builder2.AddAttribute(239, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 108 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                          (() => LoadPage(PagedList.PageNumber - 1))

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(240, "class", "previous_selected");
                __builder2.AddAttribute(241, "b-oek14bx5h9");
                __builder2.AddMarkupContent(242, "<i class=\"fas fa-angle-left\" b-oek14bx5h9></i>&nbsp上一頁");
                __builder2.CloseElement();
#nullable restore
#line 109 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
							}

#line default
#line hidden
#nullable disable
#nullable restore
#line 109 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
        
						}

#line default
#line hidden
#nullable disable
#nullable restore
#line 111 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
       foreach (var pageNumber in Enumerable.Range(1, PagedList.PageCount))
						{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(243, "button");
                __builder2.AddAttribute(244, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 113 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                         (() => LoadPage(pageNumber))

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(245, "class", 
#nullable restore
#line 113 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                                                                pageNumber == PagedList.PageNumber ? "selected" : "non_selected"

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(246, "b-oek14bx5h9");
#nullable restore
#line (113,133)-(113,143) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
__builder2.AddContent(247, pageNumber);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 114 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
						}

#line default
#line hidden
#nullable disable
#nullable restore
#line 115 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
       if (PagedList.PageCount > 1)
						{
							

#line default
#line hidden
#nullable disable
#nullable restore
#line 117 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
        if (PagedList.PageNumber == PagedList.PageCount)
							{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(248, "button");
                __builder2.AddAttribute(249, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 119 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                           (() => LoadPage(PagedList.PageCount))

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(250, "class", "next_selected");
                __builder2.AddAttribute(251, "b-oek14bx5h9");
                __builder2.AddMarkupContent(252, "下一頁&nbsp<i class=\"fas fa-angle-double-right\" b-oek14bx5h9></i>");
                __builder2.CloseElement();
#nullable restore
#line 120 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
							}
							else
							{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(253, "button");
                __builder2.AddAttribute(254, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 123 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                           (() => LoadPage(PagedList.PageNumber +1))

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(255, "class", "next_selected");
                __builder2.AddAttribute(256, "b-oek14bx5h9");
                __builder2.AddMarkupContent(257, "下一頁&nbsp<i class=\"fas fa-angle-double-right\" b-oek14bx5h9></i>");
                __builder2.CloseElement();
#nullable restore
#line 124 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
							}

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(258, "button");
                __builder2.AddAttribute(259, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 125 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
                          (() => LoadPage(PagedList.PageCount))

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(260, "class", "last_selected");
                __builder2.AddAttribute(261, "b-oek14bx5h9");
                __builder2.AddMarkupContent(262, "最末頁&nbsp<i class=\"fas fa-angle-double-right\" b-oek14bx5h9></i>");
                __builder2.CloseElement();
#nullable restore
#line 126 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
						}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
            }
            ));
            __builder.CloseComponent();
        }
        #pragma warning restore 1998
#nullable restore
#line 135 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\DailyAccountSelect.razor"
       



	private NewAccount[] m_NewAccountS { get; set; }
	private AccountRepair[] m_AccountRepairS { get; set; }
	private IPagedList<NewAccount> PagedList { get; set; }
	private const int PageSize = 12;
	[Parameter]
	public string subAccount { get; set; }
	[Parameter]
	public string subBank2 { get; set; }

	string kkk = "";
	String editDateMin, editDateMax;
	DateTime  editDateMin_dt, editDateMax_dt;
	int currentMonth;

	DateTime accountInsert;
	string money;
	public void MoneyChange(ChangeEventArgs e)
	{
		money = e.Value.ToString();
	}

	string bank, bankName, bankCode;
	public void BankChange(ChangeEventArgs e)
	{
		bank = e.Value.ToString();
		bankName = e.Value.ToString().Substring(3);
		bankCode = e.Value.ToString().Substring(0, 3);
	}
	string bank2, bankName2, bankCode2;
	public void BankChangeOther(ChangeEventArgs e)
	{
		bank2 = e.Value.ToString();
		bankName2 = e.Value.ToString().Substring(3);
		bankCode2 = e.Value.ToString().Substring(0, 3);
	}
	string account;
	string previousAccount;// 新增變數用來存儲上一次的 account
	public void AccountChange(ChangeEventArgs e)
	{
		account = e.Value?.ToString();
	}
	DateTime beginDate;
	public void BeginDateChange(ChangeEventArgs e)
	{
		beginDate = Convert.ToDateTime(e.Value);
	}
	DateTime endDate;
	public void EndDateChange(ChangeEventArgs e)
	{
		endDate = Convert.ToDateTime(e.Value);
	}
	DateTime editDate;
	public void EditDateChange(ChangeEventArgs e)
	{
		editDate = Convert.ToDateTime(e.Value);
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		// 执行需要在参数变化时进行的逻辑
		OnClickSelect();

		LoadPage(1);
		// 初始化 editDate 為今天的日期
		editDate = DateTime.Today;
		// 獲取今天的月份
		currentMonth = editDate.Month;
		switch (currentMonth.ToString())
		{
			case "1":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "2":
				string yearString = editDate.ToString("yyyy");
				int year = int.Parse(yearString);
				if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
				{
					editDateMin = editDate.ToString("yyyy-MM") + "-01";
					editDateMax = editDate.ToString("yyyy-MM") + "-29";
					editDateMin_dt = DateTime.Parse(editDateMin);
					editDateMax_dt = DateTime.Parse(editDateMax);
				}
				else
				{
					editDateMin = editDate.ToString("yyyy-MM") + "-01";
					editDateMax = editDate.ToString("yyyy-MM") + "-28";
					editDateMin_dt = DateTime.Parse(editDateMin);
					editDateMax_dt = DateTime.Parse(editDateMax);
				}
				break;
			case "3":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "4":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-30";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "5":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "6":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-30";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "7":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				break;
			case "8":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "9":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-30";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "10":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "11":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-30";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "12":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
		}

	}

	private void LoadPage(int pageNumber)
	{
		PagedList = m_NewAccountS.ToPagedList(pageNumber, PageSize);
	}

	private void HandlePageChange(int newPageNumber)
	{
		LoadPage(newPageNumber);
	}

	public void OnClickSelect()
	{
		bool bError = false;
		if (bError)
		{
			m_NewAccountS = null;
			return;
		}
		try
		{
			// 判斷資料庫是否有變動
			if (DataVersionService.DataVersion != 1)
			{
				m_NewAccountS = Array.Empty<NewAccount>();
				UpdateNewDataPart();
			}
			else
			{
				if (m_NewAccountS == null)
				{
					m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountBank == subBank2.Substring(0, subBank2.Length - 3) && item.baccountNo == subAccount && ((beginDate == default(DateTime) ? item.baccountDate >= editDateMin_dt : item.baccountDate >= beginDate)) && ((endDate == default(DateTime) ? item.baccountDate <= editDateMax_dt : item.baccountDate <= endDate)))
					.GroupBy(item => item.baccountNo) // 按帳號分組
					.Select(group => group.OrderBy(item => item.baccountBank)
										.ThenBy(item => item.baccountNo)
										.ThenBy(item => item.baccountDate)
										.ThenBy(item => item.baccountInsert))
					.SelectMany(sortedGroup => sortedGroup).ToArray();
					LoadPage(1);

				}
				else
				{
					//m_NewAccountS = Array.Empty<NewAccount>();
					m_NewAccountS = ServerData.m_NewAccountS.ToArray();
					m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountBank == subBank2.Substring(0, subBank2.Length - 3) && item.baccountNo == subAccount && ((beginDate == default(DateTime) ? item.baccountDate >= editDateMin_dt : item.baccountDate >= beginDate)) && ((endDate == default(DateTime) ? item.baccountDate <= editDateMax_dt : item.baccountDate <= endDate)))
					.GroupBy(item => item.baccountNo) // 按帳號分組
					.Select(group => group.OrderBy(item => item.baccountBank)
											.ThenBy(item => item.baccountNo)
											.ThenBy(item => item.baccountDate)
											.ThenBy(item => item.baccountInsert))
					.SelectMany(sortedGroup => sortedGroup).ToArray();
					LoadPage(1);
				}
			}
		}
		catch (Exception msg)
		{
			kkk = msg.Message;
		}
		AlertService.Success($"總共查詢到{m_NewAccountS.Count()}筆資料");
		if (m_NewAccountS == null)
		{
			AlertService.Warn("尚無資料");
		}
	}
	public void UpdateNewDataPart()
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<NewAccount> newList = m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetNewData();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newList.Where(item => item.baccountBank == subBank2.Substring(0, subBank2.Length - 3) && item.baccountNo == subAccount && ((beginDate == default(DateTime) ? item.baccountDate >= editDateMin_dt : item.baccountDate >= beginDate)) && ((endDate == default(DateTime) ? item.baccountDate <= editDateMax_dt : item.baccountDate <= endDate)))
		.GroupBy(item => item.baccountNo) // 按帳號分組
		.Select(group => group.OrderBy(item => item.baccountBank)
							.ThenBy(item => item.baccountNo)
							.ThenBy(item => item.baccountDate)
							.ThenBy(item => item.baccountInsert))
		.SelectMany(sortedGroup => sortedGroup).ToArray();
		LoadPage(1);


	}

	public NewAccount[] UpdateNewDataALL2()
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<NewAccount> newList = ServerData.m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetNewData();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newDataList.ToArray();
		return m_NewAccountS;
	}

	public DataSet dataset = new DataSet();
	public List<NewAccount> GetNewData()//再次抓取資料
	{
		List<NewAccount> newDataList = new List<NewAccount>();
		//SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		string SQLString = "SELECT ROW_NUMBER() OVER (PARTITION　BY accountBank, accountNo ORDER BY  accountDate ASC )  , * FROM NewAccountInfo; ";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				connection.Open();
				using (SqlDataReader reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						NewAccount newData = new NewAccount
							{
								// 這裡的屬性賦值根據您的資料表結構進行調整
								baccountDate = reader.GetDateTime(reader.GetOrdinal("accountDate")),
								baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
								baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
								baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
								baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
								baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
								baccountType = reader.GetString(reader.GetOrdinal("accountType")),
								baccountIn = reader.IsDBNull(reader.GetOrdinal("accountIn")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountIn")),
								baccountOut = reader.IsDBNull(reader.GetOrdinal("accountOut")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountOut")),
								baccountTotal = reader.IsDBNull(reader.GetOrdinal("accountTotal")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountTotal")),
								baccountOtherNo = reader.GetString(reader.GetOrdinal("accountOtherNo")),
								baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
								bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
								baccountInsert = reader.GetDateTime(reader.GetOrdinal("accountInsert")),
								baccountUpdate = reader.IsDBNull(reader.GetOrdinal("accountUpdate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountUpdate")),
								// 其他屬性...
							};
						newDataList.Add(newData);
					}
				}
			}
			return newDataList;
		}
	}

	public AccountRepair[] UpdateAccountRepairALL()
	//專門給選擇銀行後跳出對應帳戶用的更新資料(有時候可能會先使用銀行維護去新增資料，這時候就要用他嚕)
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<AccountRepair> newList = ServerData.m_AccountRepairS.ToList();
		// 新資料列表
		List<AccountRepair> newDataList = GetAccountRepair();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_AccountRepairS = newList.ToArray();
		return m_AccountRepairS;
	}

	public List<AccountRepair> GetAccountRepair()//再次抓取資料
	{
		List<AccountRepair> newDataList = new List<AccountRepair>();
		//SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		string SQLString = "SELECT * FROM NewAccountRepair ";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				try
				{
					connection.Open();

					using (SqlDataReader reader = command.ExecuteReader())
					{
						while (reader.Read())
						{
							AccountRepair newData = new AccountRepair
								{
									// 這裡的屬性賦值根據您的資料表結構進行調整
									baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
									baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
									baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
									baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
									baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
									baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
									baccountInitialMoney = reader.IsDBNull(reader.GetOrdinal("accountInitialMoney")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountInitialMoney")),
									bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
									baccountInsert = reader.IsDBNull(reader.GetOrdinal("accountInsert")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountInsert")),
									baccountUpdate = reader.IsDBNull(reader.GetOrdinal("accountUpdate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountUpdate")),

									// 其他屬性...
								};
							newDataList.Add(newData);
						}
					}
				}
				catch (Exception ex)
				{
					kkk += ex.Message;
				}
			}
		}
		return newDataList;
	}

	string todatee = DateTime.Today.ToString("yyyy-MM-dd");
	private bool isAdd=false;
	public void OnClickAdd2(MouseEventArgs e)
	{
		isAdd = !isAdd;
	}

	public void OnClickCancel(MouseEventArgs e)
	{
		isAdd = !isAdd;

	}

	string datee2, myAccount, accountDate, accountBank, accountBankNo, accountNo, accountType, accountIn, accountOut, accountTotal, accountOtherNo, remark;
	DateTime datee;
	private NewAccount[] m_NewAccountRecordS;
	public void OnClickSave(MouseEventArgs e)
	{
		if (string.IsNullOrEmpty(money))
		{
			AlertService.Error("請選擇付款方式");
			return;
		}
		if (string.IsNullOrEmpty(accountIn) && string.IsNullOrEmpty(accountOut))
		{
			AlertService.Error("請輸入收入或者支出");
			return;
		}
		if (string.IsNullOrEmpty(accountOtherNo))
		{
			AlertService.Error("請輸入對方帳號");
			return;
		}
		if (DataVersionService.DataVersion != 1)//若版本有更新，例如新增、修改、刪除....
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == subAccount) // 根據帳號篩選
						.GroupBy(item => item.baccountNo) // 按帳號分組
						.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
						.SelectMany(sortedGroup => sortedGroup)
						.ToArray();
			if (updatedData.Length == 0)//若該帳號沒有使用過直接新增
			{
				HandleEmptyArray();

			}
			else if (updatedData.Length == 1) //若該帳號只有一條
			{
				HandleArrayWithOneItem();
			}
			else //若該帳號大於2條
			{
				HandleArrayWithMoreThanOneItem();//若帳號有兩條以上
			}
		}
		else
		{
			m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == subAccount) // 根據帳號篩選
						.GroupBy(item => item.baccountNo) // 按帳號分組
						.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
						.SelectMany(sortedGroup => sortedGroup)
						.ToArray();
			if (m_NewAccountS.Length == 0)//若該帳號沒有使用過直接新增
			{
				HandleEmptyArray();

			}
			else if (m_NewAccountS.Length == 1) //若該帳號只有一條
			{
				HandleArrayWithOneItem();
			}
			else //若該帳號大於2條
			{
				HandleArrayWithMoreThanOneItem();//若帳號有兩條以上
			}
		}
	}
	public void HandleEmptyArray()//若該帳號沒有使用過直接新增
	{
		datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//加入日期

		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountBranch],[accountBranchNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[accountAddress],[remark], [accountInsert],[accountUpdate]) VALUES (@editDate,@bankName,@bankCode,@accountBranch,@accountBranchNo,@accountNo,@accountType,@accountIn,@accountOut,@toto,@accountOtherNo,@accountAddress,@remark ,@accountInsert,@accountUpdate)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountNo == subAccount && item.baccountBank == subBank2.Substring(0, subBank2.Length - 3)).ToArray();
		kkk += "hello";
		var repairbranch = m_AccountRepairS[0];
		string r_b = repairbranch.baccountBranch;
		string r_b_n = repairbranch.baccountBranchNo;
		string r_b_a = repairbranch.baccountAddress;
		decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut;
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
			sqlcommand.Parameters.AddWithValue("@editDate", editDate);//交易日期
			sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
			sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
			sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);
			sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//銀行代碼
			sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
			sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
			sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? 0);//收入
			sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? 0);//支出
			sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
			sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
			sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);
			sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
			sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
			sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)
			{
				AlertService.Success($"成功新增{rowsAffected}條");
				myAccount = "";//我的帳號
				accountOut = "";
				accountIn = "";
				accountOtherNo = "";
				DataVersionService.IncrementDataVersion();
				isAdd = !isAdd;
			}
			else
			{
				AlertService.Error("更新失敗");
			}
			SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
			sqlTransaction.Commit();
		}
		UpdateHandleEmptyArray(DateTime.Parse(datee2));
	}

	public void HandleArrayWithOneItem()//若該帳號只有一條新增
	{
		datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//加入日期

		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountBranch],[accountBranchNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[accountAddress],[remark], [accountInsert],[accountUpdate]) VALUES (@accountDate,@bankName,@bankCode,@accountBranch,@accountBranchNo,@accountNo,@accountType,@accountIn,@accountOut,@toto,@accountOtherNo,@accountAddress,@remark ,@accountInsert,@accountUpdate)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == subAccount) // 根據帳號篩選
			.GroupBy(item => item.baccountNo) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
			m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountNo == subAccount && item.baccountBank == subBank2.Substring(0, subBank2.Length - 3)).ToArray();
			var repairbranch = m_AccountRepairS[0];
			string r_b = repairbranch.baccountBranch;
			string r_b_n = repairbranch.baccountBranchNo;
			string r_b_a = repairbranch.baccountAddress;
			var latestRecord = updatedData[0];
			if (latestRecord.baccountDate == editDate)//如果日期一樣
			{
				DateTime a = latestRecord.baccountDate;
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal secondTotal = (updatedData[0].baccountIn - updatedData[0].baccountOut);
				decimal toto = secondTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
						isAdd = !isAdd;

					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (latestRecord.baccountDate > editDate)//最舊
			{
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal toto = latestIn - latestOut;
				string accountinsert = datee.ToString("yyyy-MM-dd HH:mm:ss");
				DateTime a = latestRecord.baccountDate;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼	
					sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
						isAdd = !isAdd;

					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					HandleArrayWithOneItemUpdate(latestIn, latestOut);
					UpdateHandleEmptyArray(DateTime.Parse(datee2));
				}
			}
			else//新資料為最新
			{
				DateTime a = latestRecord.baccountDate;
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal secondTotal = (updatedData[0].baccountIn - updatedData[0].baccountOut);
				decimal toto = secondTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
						isAdd = !isAdd;

					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
		}
		else
		{
			m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == subAccount) // 根據帳號篩選
			.GroupBy(item => item.baccountNo) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
			var latestRecord = m_NewAccountS[0];
			m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountNo == subAccount && item.baccountBank == subBank2.Substring(0, subBank2.Length - 3)).ToArray();
			var repairbranch = m_AccountRepairS[0];
			string r_b = repairbranch.baccountBranch;
			string r_b_n = repairbranch.baccountBranchNo;
			string r_b_a = repairbranch.baccountAddress;
			if (latestRecord.baccountDate == editDate)//如果日期一樣
			{
				DateTime a = latestRecord.baccountDate;
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal secondTotal = (m_NewAccountS[0].baccountIn - m_NewAccountS[0].baccountOut);
				decimal toto = secondTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼	
					sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址		
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
						isAdd = !isAdd;

					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (latestRecord.baccountDate > editDate)//最舊
			{
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal toto = latestIn - latestOut;
				string accountinsert = datee.ToString("yyyy-MM-dd HH:mm:ss");
				DateTime a = latestRecord.baccountDate;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
						isAdd = !isAdd;

					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					HandleArrayWithOneItemUpdate(latestIn, latestOut);
					UpdateHandleEmptyArray(DateTime.Parse(datee2));
				}
			}
			else//新資料為最新
			{
				DateTime a = latestRecord.baccountDate;
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal secondTotal = (m_NewAccountS[0].baccountIn - m_NewAccountS[0].baccountOut);
				decimal toto = secondTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring(subBank2.Length - 3));//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
						isAdd = !isAdd;

					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
		}
	}

	public void HandleArrayWithOneItemUpdate(decimal latestIn, decimal latestOut)//若該帳號只有一條ㄉ更新
	{
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		decimal toto = latestIn - latestOut;
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == subAccount) // 根據帳號篩選
			.GroupBy(item => item.baccountNo) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
			var latestRecord2 = updatedData[0];
			if (latestRecord2.baccountDate == editDate)//最舊
			{
				string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE   [accountBankNo] =@bank AND [accountInsert]= @accountInsert ";
				m_NewAccountRecordS = updatedData.Where(item => item.baccountDate > editDate).ToArray();
				foreach (var oldRecord in m_NewAccountRecordS)
				{
					decimal secondIn = oldRecord.baccountIn;
					decimal secondOut = oldRecord.baccountOut;
					decimal toto1 = (latestIn - latestOut + secondIn - secondOut);
					if (sqlconnection.State == System.Data.ConnectionState.Closed)
					{
						sqlconnection.Open();
						SqlCommand sqlcommand = new SqlCommand(SQLString2, sqlconnection);
						sqlcommand.Parameters.Clear();
						sqlcommand.Parameters.AddWithValue("@accountInsert", oldRecord.baccountInsert);//交易日期
						sqlcommand.Parameters.AddWithValue("@bank", subBank2.Substring( subBank2.Length - 3));//銀行
						sqlcommand.Parameters.AddWithValue("@toto", latestIn - latestOut + secondIn - secondOut);//餘額
						int rowsAffected = sqlcommand.ExecuteNonQuery();
						if (rowsAffected > 0)
						{
							AlertService.Success($"成功更新{rowsAffected}條");
							myAccount = "";//我的帳號
							accountOut = "";
							accountIn = "";
							accountOtherNo = "";

						}
						else
						{
							AlertService.Error("更新失敗");
						}
						SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
						sqlTransaction.Commit();
					}
				}
			}
		}
		else
		{
			m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == subAccount) // 根據帳號篩選
			.GroupBy(item => item.baccountNo) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
							.ThenBy(item => item.baccountNo)
							.ThenBy(item => item.baccountDate)
							.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
			var latestRecord = m_NewAccountS[0];
			if (latestRecord.baccountDate > editDate)//最舊
			{
				string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE   [accountBankNo] =@bank AND [accountInsert]= @accountInsert ";
				m_NewAccountRecordS = m_NewAccountS.Where(item => item.baccountDate > editDate).ToArray();
				foreach (var oldRecord in m_NewAccountRecordS)
				{
					decimal secondIn = oldRecord.baccountIn;
					decimal secondOut = oldRecord.baccountOut;
					decimal toto1 = (latestIn - latestOut + secondIn - secondOut);
					if (sqlconnection.State == System.Data.ConnectionState.Closed)
					{
						sqlconnection.Open();
						SqlCommand sqlcommand = new SqlCommand(SQLString2, sqlconnection);
						sqlcommand.Parameters.Clear();
						sqlcommand.Parameters.AddWithValue("@accountInsert", oldRecord.baccountInsert);//交易日期
						sqlcommand.Parameters.AddWithValue("@bank", subBank2.Substring( subBank2.Length - 3));//銀行
						sqlcommand.Parameters.AddWithValue("@toto", latestIn - latestOut + secondIn - secondOut);//餘額
						int rowsAffected = sqlcommand.ExecuteNonQuery();
						if (rowsAffected > 0)
						{
							AlertService.Success($"成功更新{rowsAffected}條");
							myAccount = "";//我的帳號
							accountOut = "";
							accountIn = "";
							accountOtherNo = "";
						}
						else
						{
							AlertService.Error("更新失敗");
						}
						SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
						sqlTransaction.Commit();
					}
				}
			}
		}
	}

	public void HandleArrayWithMoreThanOneItem()//若該帳號大於2條新增
	{
		datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//加入日期
		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountBranch],[accountBranchNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[accountAddress],[remark], [accountInsert],[accountUpdate]) VALUES (@accountDate,@bankName,@bankCode,@accountBranch,@accountBranchNo,@accountNo,@accountType,@accountIn,@accountOut,@toto,@accountOtherNo,@accountAddress,@remark ,@accountInsert,@accountUpdate)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		var latestRecord = m_NewAccountS[0];// 最舊
		var secondRecord = m_NewAccountS[1];//第二舊
		decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut;
		decimal toto1 = 0;
		m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountNo == subAccount && item.baccountBank == subBank2.Substring(0, subBank2.Length - 3)).ToArray();
		var repairbranch = m_AccountRepairS[0];
		string r_b = repairbranch.baccountBranch;
		string r_b_n = repairbranch.baccountBranchNo;
		string r_b_a = repairbranch.baccountAddress;
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData
			.Where(item => item.baccountNo == subAccount) // 根據帳號篩選
			.GroupBy(item => item.baccountNo) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
			if (updatedData[0].baccountDate == editDate)//如果第一筆舊資料和新資料日期一樣
			{
				for (int i = 0; i < updatedData.Length; i++)
				{
					if (updatedData[i].baccountDate > editDate)
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto = updatedData[i - 1].baccountTotal + latestIn - latestOut;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼							
							sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址							
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
								isAdd = !isAdd;

							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
							break;
						}
					}
					else//maybe所有日期都是同一個，那麼新資料會被當成最新資料 就好了 
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto1 = updatedData.Last().baccountTotal + latestIn - latestOut;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
							sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
								isAdd = !isAdd;

							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
						}
					}
				}
			}
			else if (updatedData.Last().baccountDate == editDate)//如果舊資料的最後一筆和新添加的資料日期一樣
			{
				latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				toto1 = updatedData.Last().baccountTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址					
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
						isAdd = !isAdd;

					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (updatedData[0].baccountDate > editDate)//新資料成為最舊
			{
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
						isAdd = !isAdd;

					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (updatedData.Last().baccountDate < editDate)//新資料依然最新
			{
				latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				toto1 = updatedData.Last().baccountTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
						isAdd = !isAdd;

					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else//新資料不舊不新，最麻煩了 QQ
			{
				for (int i = 0; i < updatedData.Length; i++)
				{
					if (updatedData[i].baccountDate > editDate)
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto = updatedData[i - 1].baccountTotal + latestIn - latestOut;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼							
							sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址							
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
								isAdd = !isAdd;

							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
							break;
						}
					}
				}
			}
		}
		else
		{
			m_NewAccountS = ServerData.m_NewAccountS
			.Where(item=> item.baccountNo == subAccount) // 根据账户筛选数据
			.GroupBy(item => subAccount) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
						.ThenBy(item => item.baccountNo)
						.ThenBy(item => item.baccountDate)
						.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
			if (latestRecord.baccountDate == editDate)//如果第一筆舊資料和新資料日期一樣
			{
				for (int i = 0; i < m_NewAccountS.Length; i++)
				{
					if (m_NewAccountS[i].baccountDate > editDate)
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto = m_NewAccountS[i - 1].baccountTotal + latestIn - latestOut;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼							
							sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址							
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
								isAdd = !isAdd;

							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
							break;
						}
					}
					else
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);

						toto1 = m_NewAccountS.Last().baccountTotal + latestIn - latestOut;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
							sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址					
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
								isAdd = !isAdd;

							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
						}

					}
				}
			}
			else if (m_NewAccountS.Last().baccountDate == editDate)//如果舊資料的最後一筆和新添加的資料日期一樣
			{
				latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				toto1 = m_NewAccountS.Last().baccountTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
						isAdd = !isAdd;

					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (latestRecord.baccountDate > editDate)//新資料成為最舊
			{
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
						isAdd = !isAdd;

					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (m_NewAccountS.Last().baccountDate < editDate)//新資料依然最新
			{
				latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				toto1 = m_NewAccountS.Last().baccountTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址					
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
						isAdd = !isAdd;

					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else//新資料不舊不新，最麻煩了 QQ
			{
				for (int i = 0; i < m_NewAccountS.Length; i++)
				{
					if (m_NewAccountS[i].baccountDate > editDate)
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto = m_NewAccountS[i - 1].baccountTotal + latestIn - latestOut;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", subBank2.Substring(0, subBank2.Length - 3));//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", subBank2.Substring( subBank2.Length - 3));//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼							
							sqlcommand.Parameters.AddWithValue("@accountNo", subAccount);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址							
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
								isAdd = !isAdd;

							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
							break;
						}
					}
				}
			}
		}
	}

	public void HandleArrayWithMoreThanOneItemUpdate(decimal latestIn, decimal latestOut)//若該帳號大於2條更新
	{
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		var oldRecord = m_NewAccountS[0];
		var secondRecourd = m_NewAccountS[1];
		decimal toto = latestIn - latestOut;
		decimal toto0 = 0;//最舊
		decimal toto1 = 0;

		using (SqlConnection sqlConnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022"))
		{
			if (DataVersionService.DataVersion != 1)
			{
				NewAccount[] updatedData = UpdateNewDataALL2();
				updatedData = updatedData.Where(item => item.baccountNo == subAccount )// 根據帳號篩選
			.GroupBy(item => item.baccountNo) // 按帳號分組
				.Select(group => group.OrderBy(item => item.baccountBank)
										.ThenBy(item => item.baccountNo)
										.ThenBy(item => item.baccountDate)
										.ThenBy(item => item.baccountInsert))
				.SelectMany(sortedGroup => sortedGroup).ToArray();







				if (updatedData[0].baccountDate == editDate)//如果最舊的資料和新資料日期一樣
				{
					for (int i = 0; i < updatedData.Length; i++)
					{
						if (updatedData[i].baccountDate != editDate)
						{
							toto1 = updatedData[i - 1].baccountTotal;//新資料不舊不新，最麻煩了 QQ
							for (int j = i; j < updatedData.Length; j++)
							{
								toto1 += updatedData[j].baccountIn - updatedData[j].baccountOut;
								bank = updatedData[j].baccountBankNo;
								accountInsert = updatedData[j].baccountInsert;
								accountDate = updatedData[j].baccountDate.ToString("yyyy-MM-dd");
								UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
							}
							break;
						}
					}
				}
				else if (updatedData.Last().baccountDate == editDate)//如果新資料和最後一筆資料日期一樣
				{ }
				else if (updatedData[0].baccountDate > editDate)//最舊
				{
					for (int i = 0; i < updatedData.Length; i++)
					{
						accountInsert = updatedData[i].baccountInsert;
						accountDate = updatedData[i].baccountDate.ToString("yyyy-MM-dd");
						bank = m_NewAccountS[i].baccountBankNo;
						if (i == 0)
						{
							decimal oldIn = updatedData[0].baccountIn;
							decimal oldOut = updatedData[0].baccountOut;
							toto0 = toto + oldIn - oldOut;
							UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
						}
						else
						{
							toto0 += updatedData[i].baccountIn - updatedData[i].baccountOut;
							UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
						}
					}

				}
				else if (updatedData.Last().baccountDate < editDate)//新資料依然最新
				{ }
				else//不新不舊
				{
					for (int i = 0; i < updatedData.Length; i++)
					{
						if (updatedData[i].baccountDate > editDate)
						{
							toto1 = updatedData[i - 1].baccountTotal ;//新資料不舊不新，最麻煩了 QQ

							for (int j = i; j < updatedData.Length; j++)
							{
								toto1 += updatedData[j].baccountIn - updatedData[j].baccountOut;
								bank = updatedData[j].baccountBankNo;
								accountInsert = updatedData[j].baccountInsert;
								accountDate = updatedData[j].baccountDate.ToString("yyyy-MM-dd");
								UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);

							}
							break;
						}
					}
				}
			}
			else
			{
				m_NewAccountS = ServerData.m_NewAccountS
.Where(item => item.baccountNo == subAccount) // 根据账户筛选数据
.GroupBy(item => subAccount) // 按帳號分組
.Select(group => group.OrderBy(item => item.baccountBank)
	.ThenBy(item => item.baccountNo)
	.ThenBy(item => item.baccountDate)
	.ThenBy(item => item.baccountInsert))
.SelectMany(sortedGroup => sortedGroup).ToArray();


				m_NewAccountRecordS = m_NewAccountS.Where(item => item.baccountDate >= editDate).GroupBy(item => subAccount) // 按帳號分組
				.Select(group => group.OrderBy(item => item.baccountBank)
										.ThenBy(item => subAccount)
										.ThenBy(item => item.baccountDate)
										.ThenBy(item => item.baccountInsert))
				.SelectMany(sortedGroup => sortedGroup).ToArray();

				if (oldRecord.baccountDate == editDate)//如果最舊的資料和新資料日期一樣
				{
					for (int i = 0; i < m_NewAccountRecordS.Length; i++)
					{
						if (m_NewAccountRecordS[i].baccountDate == editDate)
						{
							toto1 = m_NewAccountRecordS[i].baccountTotal + latestIn - latestOut;//新資料不舊不新，最麻煩了 QQ
							for (int j = i + 1; j < m_NewAccountRecordS.Length; j++)
							{
								toto1 += m_NewAccountRecordS[j].baccountIn - m_NewAccountRecordS[j].baccountOut;
								bank = m_NewAccountRecordS[j].baccountBankNo;
								accountInsert = m_NewAccountRecordS[j].baccountInsert;
								accountDate = m_NewAccountRecordS[j].baccountDate.ToString("yyyy-MM-dd");
								UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
							}
						}
					}
				}
				else if (m_NewAccountS.Last().baccountDate == editDate)//如果新資料和最後一筆資料日期一樣
				{ }
				else if (oldRecord.baccountDate > editDate)//最舊
				{
					for (int i = 0; i < m_NewAccountRecordS.Length; i++)
					{
						accountInsert = m_NewAccountRecordS[i].baccountInsert;
						accountDate = m_NewAccountS[i].baccountDate.ToString("yyyy-MM-dd");
						bank = m_NewAccountS[i].baccountBankNo;
						if (i == 0)
						{
							decimal oldIn = m_NewAccountRecordS[0].baccountIn;
							decimal oldOut = m_NewAccountRecordS[0].baccountOut;
							toto0 = toto + oldIn - oldOut;
							UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
						}
						else
						{
							toto0 += m_NewAccountRecordS[i].baccountIn - m_NewAccountRecordS[i].baccountOut;
							UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
						}
					}
				}
				else if (m_NewAccountS.Last().baccountDate < editDate)//新資料依然最新
				{ }
				else//不新不舊
				{
					for (int i = 0; i < m_NewAccountS.Length; i++)
					{
						if (m_NewAccountS[i].baccountDate > editDate || m_NewAccountS[i].baccountDate == editDate)
						{
							toto1 = m_NewAccountS[i - 1].baccountTotal + latestIn - latestOut;//新資料不舊不新，最麻煩了 QQ
							for (int j = i; j < m_NewAccountS.Length; j++)
							{
								toto1 += m_NewAccountS[j].baccountIn - m_NewAccountS[j].baccountOut;
								bank = m_NewAccountS[j].baccountBankNo;
								accountInsert = m_NewAccountS[j].baccountInsert;
								accountDate = m_NewAccountS[j].baccountDate.ToString("yyyy-MM-dd");
								UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
								break;
							}
						}
					}
				}
			}
		}
	}

	public void UpdateAccountTotal(SqlConnection sqlConnection, string accountDate, string bankCode, string accountNo, decimal toto, DateTime accountInsert)
	{
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE  [accountBankNo] =@bank AND [accountDate]= @accountDate  AND [accountInsert]=@accountInsert";
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString2, sqlconnection);
			sqlcommand.Parameters.Clear();
			sqlcommand.Parameters.AddWithValue("@accountDate", accountDate);//交易日期
			sqlcommand.Parameters.AddWithValue("@bank", bankCode);//銀行
			sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
			sqlcommand.Parameters.AddWithValue("@accountInsert", accountInsert);//加入時間，用於辨別
			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)

			{
				AlertService.Success($"成功更新{rowsAffected}條");
				myAccount = "";//我的帳號
				accountOut = "";
				accountIn = "";
				accountOtherNo = "";
			}
			else
			{
				AlertService.Error("更新失敗");
			}
			SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
			sqlTransaction.Commit();
		}
	}

	public void UpdateHandleEmptyArray(DateTime date)//更新頁面/HandleEmptyArray
	{
		m_NewAccountS = Array.Empty<NewAccount>();
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<NewAccount> newList = m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetDataFromDatabase();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newList.Where(item => item.baccountInsert.ToString("yyyy/MM/dd HH:mm:ss") == date.ToString("yyyy/MM/dd HH:mm:ss"))
										.ToArray();
		kkk += "hello";
	}
	public List<NewAccount> GetDataFromDatabase()
	{
		List<NewAccount> newDataList = new List<NewAccount>();
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string SQLString = "SELECT ROW_NUMBER() OVER(PARTITION BY accountBank, accountNo ORDER BY  accountDate ASC)  , *FROM NewAccountInfo; ";
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				connection.Open();
				using (SqlDataReader reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						NewAccount newData = new NewAccount
							{
								// 這裡的屬性賦值根據您的資料表結構進行調整
								baccountDate = reader.GetDateTime(reader.GetOrdinal("accountDate")),
								baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
								baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
								baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
								baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
								baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
								baccountType = reader.GetString(reader.GetOrdinal("accountType")),
								baccountIn = reader.IsDBNull(reader.GetOrdinal("accountIn")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountIn")),
								baccountOut = reader.IsDBNull(reader.GetOrdinal("accountOut")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountOut")),
								baccountTotal = reader.IsDBNull(reader.GetOrdinal("accountTotal")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountTotal")),
								baccountOtherNo = reader.GetString(reader.GetOrdinal("accountOtherNo")),
								baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
								bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
								baccountInsert = reader.GetDateTime(reader.GetOrdinal("accountInsert")),
								baccountUpdate = reader.GetDateTime(reader.GetOrdinal("accountUpdate"))
								// 其他屬性...
							};
						newDataList.Add(newData);
					}
				}
			}
			return newDataList;
		}
	}



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DataVersionService DataVersionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAlertService AlertService { get; set; }
    }
}
#pragma warning restore 1591
