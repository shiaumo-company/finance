
@page "/DailyBankSelect/{subBank}"
@using System;
@using System.Data;
@using System.Data.SqlClient;
@using DBS.Data;
@using DBS.Pages;
@using DBS.Services
@using X.PagedList
@using Microsoft.AspNetCore.Components.Web;
@inject IAlertService AlertService
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject DataVersionService DataVersionService

<head>
	<link href="styles/site.css" rel="stylesheet" />
</head>
<AuthorizeView>
	<Authorized>
		<h3>@subBank.Substring(3) 查詢資料</h3>

		<table class="table" style="text-align:right; margin-top:20px;" >
		<thead >
			<tr class="form-field" >
				<td></td>				
				<td></td>
				<td>開始日期</td>
				<td><input style="height: 30px;width :175px;" type="date" value=@editDateMin @onchange="BeginDateChange"></td>
				<td>結束日期</td>
				<td><input style="height: 30px;width :175px;" type="date" value=@editDateMax @onchange="EndDateChange"></td>
				<td><button id="Select_btn" @onclick="OnClickSelect" class="btn_select">查詢</button></td>
				<td></td>				
				<td></td>

			</tr>
			<tr>
				<th style="text-align:center">交易日期</th>
				<th >銀行分行</th>
				<th>銀行帳號</th>
				<th>方式</th>
				<th style="text-align:right;">收入</th>
				<th style="text-align:right;">支出</th>
				<th>結存餘額</th>
				<th>對方帳號</th>
				<th>備註</th>
			</tr>
		</thead>
		<tbody>
				@if (m_NewAccountS != null)
				{
					@foreach (var account in PagedList)
					{

						<tr onmouseover="this.style.backgroundColor='rgba(184,193,236,0.6)';this.style.color='#350E51';" onmouseout="this.style.backgroundColor='#FFFFFE';"> 

							<td style="text-align:center">@account.baccountDate.ToShortDateString()</td>
							<td >
							@foreach (var repair in ServerData.m_AccountRepairS.Where(r => r.baccountNo == account.baccountNo))
							{
									@repair.baccountBranchNo
									@repair.baccountBranch.ToString().Substring(@subBank.ToString().Substring(3).Length)
							}
							</td>
							<td >@account.baccountNo</td>
							<td>@account.baccountType</td>
							<td style="text-align:right;">@account.baccountIn</td>
							<td style="text-align:right;">@account.baccountOut</td>
							<td>@account.baccountTotal</td>
							<td>@account.baccountOtherNo</td>
							<td>@account.bremark</td>
						</tr>
					}
				}
		</tbody>
			<tfoot>
				<tr>
					<td colspan=9>
						<div class="pager">
							@if (PagedList.PageCount > 1)
							{
									<button @onclick="(() => LoadPage(1))" class="first_selected"><i class="fas fa-angle-double-left"></i>&nbsp第一頁</button>
								@if (PagedList.PageNumber == 1)
								{	
											<button @onclick="(() => LoadPage(1))" class="previous_selected"><i class="fas fa-angle-left"></i>&nbsp上一頁</button>
								}
								else
								{
											<button @onclick="(() => LoadPage(PagedList.PageNumber - 1))" class="previous_selected"><i class="fas fa-angle-left"></i>&nbsp上一頁</button>
								}
							}
							@if (PagedList.PageCount <= 9)
							{
								@foreach (var pageNumber in Enumerable.Range(1, PagedList.PageCount))
								{
												<button @onclick="(() => LoadPage(pageNumber))" class="@(pageNumber == PagedList.PageNumber ? "selected" : "non_selected")">@pageNumber</button>
								}
							}
							else
							{
								var startPage = Math.Max(1, PagedList.PageNumber - 4);
								var endPage = Math.Min(PagedList.PageNumber + 4, PagedList.PageCount);

								@foreach (var pageNumber in Enumerable.Range(startPage, endPage - startPage + 1))
								{
											<button @onclick="(() => LoadPage(pageNumber))" class="@(pageNumber == PagedList.PageNumber ? "selected" : "non_selected")">@pageNumber</button>
								}
							}
							@if (PagedList.PageCount > 1)
							{
								@if (PagedList.PageNumber == PagedList.PageCount)
								{
												<button  @onclick="(() => LoadPage(PagedList.PageCount))" class="next_selected">下一頁&nbsp<i class="fas fa-angle-double-right"></i></button>
								}
								else
								{
											<button  @onclick="(() => LoadPage(PagedList.PageNumber +1))" class="next_selected">下一頁&nbsp<i class="fas fa-angle-double-right"></i></button>
								}
									<button  @onclick="(() => LoadPage(PagedList.PageCount))" class="last_selected">最末頁&nbsp<i class="fas fa-angle-double-right"></i></button>
							}
						</div>
					</td>
				</tr>
			</tfoot>
		</table>
	</Authorized>
</AuthorizeView>

@code {
	private NewAccount[] m_NewAccountS { get; set; }
	private AccountRepair[] m_AccountRepairS { get; set; }
	private IPagedList<NewAccount> PagedList { get; set; }
	private const int PageSize =13;
	[Parameter]
	public string subBank { get; set; }

	string kkk = "";
	String editDateMin, editDateMax;
	DateTime editDateMin_dt, editDateMax_dt;
	int currentMonth;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		LoadPage(1);
		// 初始化 editDate 為今天的日期
		editDate = DateTime.Today;
		// 獲取今天的月份
		currentMonth = editDate.Month;
		switch (currentMonth.ToString())
		{
			case "1":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "2":
				string yearString = editDate.ToString("yyyy");
				int year = int.Parse(yearString);
				if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
				{
					editDateMin = editDate.ToString("yyyy-MM") + "-01";
					editDateMax = editDate.ToString("yyyy-MM") + "-29";
					editDateMin_dt = DateTime.Parse(editDateMin);
					editDateMax_dt = DateTime.Parse(editDateMax);
				}
				else
				{
					editDateMin = editDate.ToString("yyyy-MM") + "-01";
					editDateMax = editDate.ToString("yyyy-MM") + "-28";
					editDateMin_dt = DateTime.Parse(editDateMin);
					editDateMax_dt = DateTime.Parse(editDateMax);
				}
				break;
			case "3":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "4":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-30";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "5":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "6":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-30";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "7":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				break;
			case "8":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "9":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-30";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "10":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "11":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-30";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;
			case "12":
				editDateMin = editDate.ToString("yyyy-MM") + "-01";
				editDateMax = editDate.ToString("yyyy-MM") + "-31";
				editDateMin_dt = DateTime.Parse(editDateMin);
				editDateMax_dt = DateTime.Parse(editDateMax);
				break;

		}

	}

	private void LoadPage(int pageNumber)
	{
		PagedList = m_NewAccountS.ToPagedList(pageNumber, PageSize);
	}

	private void HandlePageChange(int newPageNumber)
	{
		LoadPage(newPageNumber);
	}


	DateTime accountInsert;
	string money;
	public void MoneyChange(ChangeEventArgs e)
	{
		money = e.Value.ToString();
	}

	string bank, bankName, bankCode;
	public void BankChange(ChangeEventArgs e)
	{
		bank = e.Value.ToString();
		bankName = e.Value.ToString().Substring(3);
		bankCode = e.Value.ToString().Substring(0, 3);
	}
	string bank2, bankName2, bankCode2;
	public void BankChangeOther(ChangeEventArgs e)
	{
		bank2 = e.Value.ToString();
		bankName2 = e.Value.ToString().Substring(3);
		bankCode2 = e.Value.ToString().Substring(0, 3);
	}
	string account;
	string previousAccount;// 新增變數用來存儲上一次的 account
	public void AccountChange(ChangeEventArgs e)
	{
		account = e.Value?.ToString();
	}
	DateTime beginDate;
	public void BeginDateChange(ChangeEventArgs e)
	{
		beginDate = Convert.ToDateTime(e.Value);
	}
	DateTime endDate;
	public void EndDateChange(ChangeEventArgs e)
	{
		endDate = Convert.ToDateTime(e.Value);
	}
	DateTime editDate;
	public void EditDateChange(ChangeEventArgs e)
	{
		editDate = Convert.ToDateTime(e.Value);
	}


	public void OnClickSelect(MouseEventArgs e)
	{
		bool bError = false;

		//if (beginDate.ToString() == "0001/1/1 上午 12:00:00")
		//{
		//	bError = true;
		//	AlertService.Error("請輸入開始日期");
		//}
		//if (endDate.ToString() == "0001/1/1 上午 12:00:00")
		//{
		//	bError = true;
		//	AlertService.Error("請輸入結束日期");
		//}
		if (bError)
		{
			m_NewAccountS = null;
			return;
		}
		try
		{
			// 判斷資料庫是否有變動
			if (DataVersionService.DataVersion != 1)
			{
				m_NewAccountS = Array.Empty<NewAccount>();
				UpdateNewDataPart();
			}
			else
			{
				if (m_NewAccountS == null)
				{
					m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountBankNo == subBank.Substring(0, 3) && ((beginDate == default(DateTime) ? item.baccountDate >= editDateMin_dt : item.baccountDate >= beginDate)) && ((endDate == default(DateTime) ? item.baccountDate <= editDateMax_dt : item.baccountDate <= endDate)))
					.GroupBy(item => item.baccountNo) // 按帳號分組
					.Select(group => group.OrderBy(item => item.baccountBank)
										.ThenBy(item => item.baccountNo)
										.ThenBy(item => item.baccountDate)
										.ThenBy(item => item.baccountInsert))
					.SelectMany(sortedGroup => sortedGroup).ToArray();
					LoadPage(1);

				}
				else
				{
					//m_NewAccountS = Array.Empty<NewAccount>();
					m_NewAccountS = ServerData.m_NewAccountS.ToArray();
					m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountBankNo == subBank.Substring(0, 3) && ((beginDate == default(DateTime) ? item.baccountDate >= editDateMin_dt : item.baccountDate >= beginDate)) && ((endDate == default(DateTime) ? item.baccountDate <= editDateMax_dt : item.baccountDate <= endDate)))
					.GroupBy(item => item.baccountNo) // 按帳號分組
					.Select(group => group.OrderBy(item => item.baccountBank)
											.ThenBy(item => item.baccountNo)
											.ThenBy(item => item.baccountDate)
											.ThenBy(item => item.baccountInsert))
					.SelectMany(sortedGroup => sortedGroup).ToArray();
					LoadPage(1);

				}
			}
		}
		catch (Exception msg)
		{
			kkk = msg.Message;
		}
		AlertService.Success($"總共查詢到{m_NewAccountS.Count()}筆資料");
		if (m_NewAccountS == null)
		{
			AlertService.Warn("尚無資料");
		}
	}
	public void UpdateNewDataPart()
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<NewAccount> newList = m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetNewData();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newList.Where(item => item.baccountBankNo == subBank.Substring(0, 3) && ((beginDate == default(DateTime) ? item.baccountDate >= editDateMin_dt : item.baccountDate >= beginDate)) && ((endDate == default(DateTime) ? item.baccountDate <= editDateMax_dt : item.baccountDate <= endDate)))
		.GroupBy(item => item.baccountNo) // 按帳號分組
		.Select(group => group.OrderBy(item => item.baccountBank)
							.ThenBy(item => item.baccountNo)
							.ThenBy(item => item.baccountDate)
							.ThenBy(item => item.baccountInsert))
		.SelectMany(sortedGroup => sortedGroup).ToArray();
		LoadPage(1);


	}

	public NewAccount[] UpdateNewDataALL2()
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<NewAccount> newList = ServerData.m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetNewData();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newDataList.ToArray();
		return m_NewAccountS;
	}

	public DataSet dataset = new DataSet();
	public List<NewAccount> GetNewData()//再次抓取資料
	{
		List<NewAccount> newDataList = new List<NewAccount>();
		//SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		string SQLString = "SELECT ROW_NUMBER() OVER (PARTITION　BY accountBank, accountNo ORDER BY  accountDate ASC )  , * FROM NewAccountInfo; ";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				connection.Open();
				using (SqlDataReader reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						NewAccount newData = new NewAccount
							{
								// 這裡的屬性賦值根據您的資料表結構進行調整
								baccountDate = reader.GetDateTime(reader.GetOrdinal("accountDate")),
								baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
								baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
								baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
								baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
								baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
								baccountType = reader.GetString(reader.GetOrdinal("accountType")),
								baccountIn = reader.IsDBNull(reader.GetOrdinal("accountIn")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountIn")),
								baccountOut = reader.IsDBNull(reader.GetOrdinal("accountOut")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountOut")),
								baccountTotal = reader.IsDBNull(reader.GetOrdinal("accountTotal")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountTotal")),
								baccountOtherNo = reader.GetString(reader.GetOrdinal("accountOtherNo")),
								baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
								bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
								baccountInsert = reader.GetDateTime(reader.GetOrdinal("accountInsert")),
								baccountUpdate = reader.IsDBNull(reader.GetOrdinal("accountUpdate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountUpdate")),
								// 其他屬性...
							};
						newDataList.Add(newData);
					}
				}
			}
			return newDataList;
		}
	}

	public AccountRepair[] UpdateAccountRepairALL()
	//專門給選擇銀行後跳出對應帳戶用的更新資料(有時候可能會先使用銀行維護去新增資料，這時候就要用他嚕)
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<AccountRepair> newList = ServerData.m_AccountRepairS.ToList();
		// 新資料列表
		List<AccountRepair> newDataList = GetAccountRepair();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_AccountRepairS = newList.ToArray();
		return m_AccountRepairS;
	}

	public List<AccountRepair> GetAccountRepair()//再次抓取資料
	{
		List<AccountRepair> newDataList = new List<AccountRepair>();
		//SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		string SQLString = "SELECT * FROM NewAccountRepair ";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				try
				{
					connection.Open();

					using (SqlDataReader reader = command.ExecuteReader())
					{
						while (reader.Read())
						{
							AccountRepair newData = new AccountRepair
								{
									// 這裡的屬性賦值根據您的資料表結構進行調整
									baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
									baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
									baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
									baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
									baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
									baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
									baccountInitialMoney = reader.IsDBNull(reader.GetOrdinal("accountInitialMoney")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountInitialMoney")),
									bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
									baccountInsert = reader.IsDBNull(reader.GetOrdinal("accountInsert")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountInsert")),
									baccountUpdate = reader.IsDBNull(reader.GetOrdinal("accountUpdate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountUpdate")),

									// 其他屬性...
								};
							newDataList.Add(newData);
						}
					}
				}
				catch (Exception ex)
				{
					kkk += ex.Message;
				}
			}
		}
		return newDataList;
	}


}


