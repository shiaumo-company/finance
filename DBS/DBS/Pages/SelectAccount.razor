@page "/SelectAccount"
@using System;
@using System.Data;
@using System.Data.SqlClient;
@using DBS.Data;
@using DBS.Pages;
@using DBS.Services;
@using X.PagedList
@using Microsoft.AspNetCore.Components.Web;
@inject IAlertService AlertService
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject DataVersionService DataVersionService

<head>
	<link href="styles/site.css" rel="stylesheet" />
	<link rel="stylesheet" href="https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/font-awesome/4.7.0/css/font-awesome.min.css">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/open-iconic/1.1.1/font/css/open-iconic-bootstrap.min.css" integrity="sha512-XNkCjx/a0lED2ktq3KaBz1v62cxVvLU9y+gZLnhyl4+btRhe+uxLw6J/9M+k2JvZFsX5v9FxVjH4D2u5JUdw==">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-p34f1UUtsS3wqzfto5wAAmdvj+osOnFyQFpp4Ua3gs/ZVWx6oOypYoCJhGGScy+8" crossorigin="anonymous"></script>
</head>
<AuthorizeView>
	<Authorized>
		<table class="table" style="text-align:right">
		<thead>
			<ul class="nav nav-tabs">
				@foreach (var banks in BankData.GetBankList())
				{
					@if (DataVersionService.DataVersion != 1)//如果有變更則要重新去資料庫抓資料，即時更新
					{
						AccountRepair[] updatedData = UpdateAccountRepairALL();
						var distinctRepairs = updatedData.Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3))
						.GroupBy(item => item.baccountNo)
						.Select(group => group.First()).ToArray();
						if (distinctRepairs.Any())
						{
							<li class="nav-item">
								<button @onclick="(() => {ShowSection(int.Parse(banks.BankCode.Substring(0,3)));OnClickSelect(banks.BankCode);})" class="nav-link @GetTabClass(int.Parse(banks.BankCode.Substring(0,3)))">@banks.BankCode.Substring(3)</button>
							</li>
						}
					}
					else
					{
						var distinctRepairs = ServerData.m_AccountRepairS.Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3))
						.GroupBy(item => item.baccountNo)
						.Select(group => group.First()).ToArray();
						if (distinctRepairs.Any())
						{
							<li class="nav-item">
								<button @onclick="(() => {ShowSection(int.Parse(banks.BankCode.Substring(0,3)));OnClickSelect(banks.BankCode);})" class="nav-link @GetTabClass(int.Parse(banks.BankCode.Substring(0,3)))">   @banks.BankCode.Substring(3)</button>
							</li>
						}
					}
				}
			</ul>
		</thead>
		</table>
		<table class="table" style="text-align:right">
			<thead>
				<tr>
					<th>加入日期</th>
					<th style="width:400px">銀行代碼</th>
					<th>帳號</th>
					<th style="width:400px">地址</th>
					<th style="width:200px">備註</th>
				</tr>
			</thead>
			<tbody>
				@if (m_AccountRepairS != null)
				{					
					@foreach (var account in PagedList)
					{
					<tr onmouseover="this.style.backgroundColor='rgba(184,193,236,0.6)';this.style.color='#350E51';" onmouseout="this.style.backgroundColor='#FFFFFE';">
						<td style="text-align:center">@account.baccountInsert.ToShortDateString()</td>
						<td style="width:400px">@account.baccountBankNo @account.baccountBank<br />
						<span style="width:400px">@account.baccountBranchNo @account.baccountBranch</span>
						<br />
						</td>
						<td>@account.baccountNo</td>
						<td style="width:400px">@account.baccountAddress</td>
						<td  style="width:200px">@account.bremark</td>
					</tr>
					}
				}
			</tbody>
			<tfoot>
				<tr>
					<td colspan=5>
						<div class="pager">
							@if (PagedList.PageCount > 1)
							{
									<button @onclick="(() => LoadPage(1))" class="first_selected"><i class="fas fa-angle-double-left"></i>&nbsp第一頁</button>
								@if (PagedList.PageNumber == 1)
								{	
											<button @onclick="(() => LoadPage(1))" class="previous_selected"><i class="fas fa-angle-left"></i>&nbsp上一頁</button>
								}
								else
								{
											<button @onclick="(() => LoadPage(PagedList.PageNumber - 1))" class="previous_selected"><i class="fas fa-angle-left"></i>&nbsp上一頁</button>
								}
							}
							@if (PagedList.PageCount <= 9)
							{
								@foreach (var pageNumber in Enumerable.Range(1, PagedList.PageCount))
								{
												<button @onclick="(() => LoadPage(pageNumber))" class="@(pageNumber == PagedList.PageNumber ? "selected" : "non_selected")">@pageNumber</button>
								}
							}
							else
							{
								var startPage = Math.Max(1, PagedList.PageNumber - 4);
								var endPage = Math.Min(PagedList.PageNumber + 4, PagedList.PageCount);

								@foreach (var pageNumber in Enumerable.Range(startPage, endPage - startPage + 1))
								{
											<button @onclick="(() => LoadPage(pageNumber))" class="@(pageNumber == PagedList.PageNumber ? "selected" : "non_selected")">@pageNumber</button>
								}
							}
							@if (PagedList.PageCount > 1)
							{
								@if (PagedList.PageNumber == PagedList.PageCount)
								{
												<button  @onclick="(() => LoadPage(PagedList.PageCount))" class="next_selected">下一頁&nbsp<i class="fas fa-angle-double-right"></i></button>
								}
								else
								{
											<button  @onclick="(() => LoadPage(PagedList.PageNumber +1))" class="next_selected">下一頁&nbsp<i class="fas fa-angle-double-right"></i></button>
								}
									<button  @onclick="(() => LoadPage(PagedList.PageCount))" class="last_selected">最末頁&nbsp<i class="fas fa-angle-double-right"></i></button>
							}
						</div>
					</td>
				</tr>
			</tfoot>
		</table>
	</Authorized>
</AuthorizeView>
@code 
{
	public IPagedList<AccountRepair> PagedList { get; set; }
	public const int PageSize = 9;//設定每一頁只會有時行
	protected override void OnInitialized()
	{
		base.OnInitialized();
		OnClickSelect_All(); // 在頁面初始化時自動調用 onclickselect_all 方法
								// Simulate fetching data from a data source
		LoadPage(1);
	}

	public void LoadPage(int pageNumber)
	{
		PagedList = m_AccountRepairS.ToPagedList(pageNumber, PageSize);
	}

	public void HandlePageChange(int newPageNumber)
	{
		LoadPage(newPageNumber);
	}


	public void OnClickSelect_All()
	{
		try
		{
			// 判斷資料庫是否有變動
			if (DataVersionService.DataVersion != 1)
			{
				m_AccountRepairS = Array.Empty<AccountRepair>();
				AccountRepair[] updatedData = UpdateAccountRepairALL();
				m_AccountRepairS = updatedData.GroupBy(item => item.baccountBank) // 按帳號分組
				.Select(group => group.OrderBy(item => item.baccountBank)
				.ThenBy(item => item.baccountBranch)
				.ThenBy(item => item.baccountNo))
				.SelectMany(sortedGroup => sortedGroup).ToArray();
				LoadPage(1);
			}
			else
			{
				
				//UpdateNewData();
				m_AccountRepairS = Array.Empty<AccountRepair>();
				m_AccountRepairS = ServerData.m_AccountRepairS.GroupBy(item => item.baccountBank) // 按帳號分組
				.Select(group => group.OrderBy(item => item.baccountBank)
				.ThenBy(item => item.baccountBranch)
				.ThenBy(item => item.baccountNo))
				.SelectMany(sortedGroup => sortedGroup).ToArray();
				LoadPage(1);
			}
		}
		catch (Exception msg)
		{
			kkk = msg.Message;
		}
		AlertService.Success($"總共查詢到{m_AccountRepairS.Count()}筆資料");
		if (m_AccountRepairS == null)
		{
			AlertService.Warn("尚無資料");
		}
	}

	private int currentSection = 1;
	private void ShowSection(int section)//tab標籤使用的
	{
		currentSection = section;
	}

	private string GetTabClass(int section)
	{
		return section == currentSection ? "active" : "";
	}

	string kkk = "";
	private NewAccount[] m_NewAccountS;
	private AccountRepair[] m_AccountRepairS { get; set; }
	public void OnClickSelect(string bankcode)
	{
		try
		{
			// 判斷資料庫是否有變動
			if (DataVersionService.DataVersion != 1)
			{
				m_AccountRepairS = Array.Empty<AccountRepair>();
				AccountRepair[] updatedData = UpdateAccountRepairALL();
				m_AccountRepairS = updatedData.Where(item => item.baccountBank == bankcode.Substring(3)).ToArray();
				LoadPage(1);
			}
			else
			{
				//UpdateNewData();
				if (m_AccountRepairS == null)
				{
					m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountBank == bankcode.Substring(3)).ToArray();
					LoadPage(1);
				}
				else
				{
					m_AccountRepairS = Array.Empty<AccountRepair>();
					m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountBank == bankcode.Substring(3)).ToArray();
					LoadPage(1);
				}
			}
		}
		catch (Exception msg)
		{
			kkk = msg.Message;
		}
		AlertService.Success($"總共查詢到{m_AccountRepairS.Count()}筆資料");
		if (m_AccountRepairS == null)
		{
			AlertService.Warn("尚無資料");
		}
	}

	public AccountRepair[] UpdateAccountRepairALL()
	//專門給選擇銀行後跳出對應帳戶用的更新資料(有時候可能會先使用銀行維護去新增資料，這時候就要用他嚕)
	{
		// 新資料列表
		List<AccountRepair> newDataList = GetAccountRepair();
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_AccountRepairS = newDataList.ToArray();
		return m_AccountRepairS;

	}
	
	public DataSet dataset = new DataSet();
	public List<AccountRepair> GetAccountRepair()//再次抓取資料
	{
		List<AccountRepair> newDataList = new List<AccountRepair>();
		//SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		string SQLString = "SELECT * FROM NewAccountRepair ";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				try
				{
					connection.Open();

					using (SqlDataReader reader = command.ExecuteReader())
					{
						while (reader.Read())
						{
							AccountRepair newData = new AccountRepair
								{
									// 這裡的屬性賦值根據您的資料表結構進行調整
									baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
									baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
									baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
									baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
									baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
									baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
									baccountInitialMoney = reader.IsDBNull(reader.GetOrdinal("accountInitialMoney")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountInitialMoney")),
									bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
									baccountInsert = reader.IsDBNull(reader.GetOrdinal("accountInsert")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountInsert")),
									baccountUpdate = reader.IsDBNull(reader.GetOrdinal("accountUpdate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountUpdate")),

									// 其他屬性...
								};
							newDataList.Add(newData);
						}
					}
				}
				catch (Exception ex)
				{
					kkk += ex.Message;
				}
			}
		}
		return newDataList;
	}

}


