#pragma checksum "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor" "{8829d00f-11b8-4213-878b-770e8597ac16}" "16d9a46742060c0152bd5fbfee1793e941679b2241b2e3f6b9c03101f95d0f57"
// <auto-generated/>
#pragma warning disable 1591
namespace DBS.Pages
{
    #line hidden
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using DBS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using DBS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
using System.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
using DBS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
using DBS.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
using DBS.Services;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/InsertData")]
    public partial class InsertData : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<h3>InsertData</h3>\r\n\r\n");
            __builder.OpenElement(1, "head");
            __builder.AddMarkupContent(2, @"<link href=""styles/site.css"" rel=""stylesheet"">
	<link rel=""stylesheet"" href=""https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/font-awesome/4.7.0/css/font-awesome.min.css"">
	<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/open-iconic/1.1.1/font/css/open-iconic-bootstrap.min.css"" integrity=""sha512-XNkCjx/a0lED2ktq3KaBz1v62cxVvLU9y+gZLnhyl4+btRhe+uxLw6J/9M+k2JvZFsX5v9FxVjH4D2u5JUdw=="">
	<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
	");
            __builder.OpenElement(3, "script");
            __builder.AddAttribute(4, "src", "https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js");
            __builder.AddAttribute(5, "integrity", "sha384-p34f1UUtsS3wqzfto5wAAmdvj+osOnFyQFpp4Ua3gs/ZVWx6oOypYoCJhGGScy+8");
            __builder.AddAttribute(6, "crossorigin", "anonymous");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(7, "\r\n");
            __builder.OpenComponent<global::Microsoft.AspNetCore.Components.Authorization.AuthorizeView>(8);
            __builder.AddAttribute(9, "Authorized", (global::Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>)((context) => (__builder2) => {
                __builder2.OpenElement(10, "table");
                __builder2.AddAttribute(11, "class", "table");
                __builder2.AddAttribute(12, "style", "text-align:right; margin-top:20px;");
                __builder2.OpenElement(13, "thead");
                __builder2.OpenElement(14, "tr");
                __builder2.AddMarkupContent(15, "<td style=\"height: 30px; width :100px;\">交易日期</td>\r\n\t\t\t\t\t");
                __builder2.OpenElement(16, "td");
                __builder2.OpenElement(17, "input");
                __builder2.AddAttribute(18, "style", "height: 30px; width :175px;");
                __builder2.AddAttribute(19, "type", "date");
                __builder2.AddAttribute(20, "value", 
#nullable restore
#line 28 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                                                                   todatee

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(21, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 28 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                                                                                      EditDateChange 

#line default
#line hidden
#nullable disable
                ));
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(22, "\r\n\t\t\t\t");
                __builder2.OpenElement(23, "tr");
                __builder2.AddMarkupContent(24, "<td>銀行</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(25, "select");
                __builder2.AddAttribute(26, "style", "height: 30px; width :175px;");
                __builder2.AddAttribute(27, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 33 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                                                             BankChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.OpenElement(28, "option");
                __builder2.AddAttribute(29, "value");
                __builder2.AddAttribute(30, "disabled");
                __builder2.AddAttribute(31, "selected");
                __builder2.AddMarkupContent(32, "請選擇銀行");
                __builder2.CloseElement();
#nullable restore
#line 35 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
       foreach (var banks in BankData.GetBankList())
						{
							

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
        if (DataVersionService.DataVersion != 1)//如果有變更則要重新去資料庫抓資料，即時更新
							{
								AccountRepair[] updatedData = UpdateAccountRepairALL();
								var distinctRepairs = updatedData.Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3))
								.GroupBy(item => item.baccountNo)
								.Select(group => group.First()).ToArray();
								if (distinctRepairs.Any())
								{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(33, "option");
                __builder2.AddAttribute(34, "value", 
#nullable restore
#line 45 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                        banks.BankCode

#line default
#line hidden
#nullable disable
                );
#nullable restore
#line (45,42)-(45,56) 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(35, banks.BankName);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 46 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
								}
							}
							else
							{
								var distinctRepairs = ServerData.m_AccountRepairS.Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3))
								.GroupBy(item => item.baccountNo)
								.Select(group => group.First()).ToArray();
								if (distinctRepairs.Any())
								{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(36, "option");
                __builder2.AddAttribute(37, "value", 
#nullable restore
#line 55 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                        banks.BankCode

#line default
#line hidden
#nullable disable
                );
#nullable restore
#line (55,42)-(55,56) 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(38, banks.BankName);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 56 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
								}
							}

#line default
#line hidden
#nullable disable
#nullable restore
#line 57 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
        
						}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(39, "\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(40, "<td>我的帳號</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(41, "select");
                __builder2.AddAttribute(42, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(43, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 61 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                                                            AccountChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.OpenElement(44, "option");
                __builder2.AddAttribute(45, "value");
                __builder2.AddAttribute(46, "selected");
                __builder2.AddMarkupContent(47, "請選擇帳號");
                __builder2.CloseElement();
#nullable restore
#line 63 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
       if (DataVersionService.DataVersion != 1)
						{
							AccountRepair[] updatedData = UpdateAccountRepairALL();
							

#line default
#line hidden
#nullable disable
#nullable restore
#line 66 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
        foreach (var account in updatedData.Where(item => item.baccountBankNo == @bankCode)
							.GroupBy(item => new { item.baccountNo })
							.Select(group => group.First()).ToArray())
							{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(48, "option");
                __builder2.AddAttribute(49, "value", 
#nullable restore
#line 70 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                        account.baccountNo

#line default
#line hidden
#nullable disable
                );
#nullable restore
#line (70,47)-(70,65) 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(50, account.baccountNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 71 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
							}

#line default
#line hidden
#nullable disable
#nullable restore
#line 71 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
        
						}
						else
						{
							if (m_AccountRepairS == null)
							{
								m_AccountRepairS = ServerData.m_AccountRepairS.ToArray();
								

#line default
#line hidden
#nullable disable
#nullable restore
#line 78 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
         foreach (var account in m_AccountRepairS.Where(item => item.baccountBankNo == @bankCode)
								.GroupBy(item => new { item.baccountNo })
								.Select(group => group.First()).ToArray())
								{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(51, "option");
                __builder2.AddAttribute(52, "value", 
#nullable restore
#line 82 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                         account.baccountNo

#line default
#line hidden
#nullable disable
                );
#nullable restore
#line (82,48)-(82,66) 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(53, account.baccountNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 83 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
								}

#line default
#line hidden
#nullable disable
#nullable restore
#line 83 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
         
							}
							else
							{
								m_AccountRepairS = Array.Empty<AccountRepair>();
								m_AccountRepairS = ServerData.m_AccountRepairS.ToArray();
								

#line default
#line hidden
#nullable disable
#nullable restore
#line 89 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
         foreach (var account in m_AccountRepairS.Where(item => item.baccountBankNo == @bankCode)
								.GroupBy(item => new { item.baccountNo })
								.Select(group => group.First()).ToArray())
								{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(54, "option");
                __builder2.AddAttribute(55, "value", 
#nullable restore
#line 93 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                         account.baccountNo

#line default
#line hidden
#nullable disable
                );
#nullable restore
#line (93,48)-(93,66) 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(56, account.baccountNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 94 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
								}

#line default
#line hidden
#nullable disable
#nullable restore
#line 94 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
         
							}
						}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(57, "\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(58, "<td>付款方式</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(59, "td");
                __builder2.OpenElement(60, "select");
                __builder2.AddAttribute(61, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(62, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 100 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                                                             MoneyChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.OpenElement(63, "option");
                __builder2.AddAttribute(64, "value");
                __builder2.AddAttribute(65, "disabled");
                __builder2.AddAttribute(66, "selected");
                __builder2.AddMarkupContent(67, "請選擇方式");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(68, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(69, "option");
                __builder2.AddMarkupContent(70, "現金");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(71, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(72, "option");
                __builder2.AddMarkupContent(73, "支票");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(74, "\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(75, "<td>備註</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(76, "td");
                __builder2.OpenElement(77, "input");
                __builder2.AddAttribute(78, "style", "height:30px; width:175px;");
                __builder2.AddAttribute(79, "id", "remark");
                __builder2.AddAttribute(80, "type", "text");
                __builder2.AddAttribute(81, "asp-for", "remark");
                __builder2.AddAttribute(82, "placeholder", "備註");
                __builder2.AddAttribute(83, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 108 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                                                                                                remark

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(84, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => remark = __value, remark));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(85, "\r\n\t\t\t\t\t");
                __builder2.OpenElement(86, "tr");
                __builder2.AddMarkupContent(87, "<td>收入</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(88, "td");
                __builder2.OpenElement(89, "input");
                __builder2.AddAttribute(90, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(91, "id", "accountIn");
                __builder2.AddAttribute(92, "type", "text");
                __builder2.AddAttribute(93, "asp-for", "accountIn");
                __builder2.AddAttribute(94, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 114 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                                                                                                       accountIn

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(95, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => accountIn = __value, accountIn));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(96, "\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(97, "<td>支出</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(98, "td");
                __builder2.OpenElement(99, "input");
                __builder2.AddAttribute(100, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(101, "id", "accountOut");
                __builder2.AddAttribute(102, "type", "text");
                __builder2.AddAttribute(103, "asp-for", "accountOut");
                __builder2.AddAttribute(104, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 118 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                                                                                                         accountOut

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(105, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => accountOut = __value, accountOut));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(106, "\r\n\t\t\t\t\t\t");
                __builder2.AddMarkupContent(107, "<td>對方帳號</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(108, "td");
                __builder2.OpenElement(109, "input");
                __builder2.AddAttribute(110, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(111, "id", "accountOtherNo");
                __builder2.AddAttribute(112, "type", "text");
                __builder2.AddAttribute(113, "asp-for", "accountOtherNo");
                __builder2.AddAttribute(114, "placeholder", "對方帳號");
                __builder2.AddAttribute(115, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 122 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                                                                                                                 accountOtherNo

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(116, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => accountOtherNo = __value, accountOtherNo));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(117, "\r\n\t\t\t");
                __builder2.OpenElement(118, "tbody");
                __builder2.OpenElement(119, "button");
                __builder2.AddAttribute(120, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 127 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
                      OnClickAdd

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddMarkupContent(121, "新增");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(122, "\r\n\t\t ");
                __builder2.OpenElement(123, "table");
                __builder2.AddAttribute(124, "class", "table");
                __builder2.AddAttribute(125, "style", "text-align:right; margin-top:20px;");
                __builder2.AddMarkupContent(126, "<thead><tr><th style=\"text-align:center\">交易日期</th>\r\n\t\t\t\t\t<th>帳號代碼</th>\r\n\t\t\t\t\t<th>我的帳號</th>\r\n\t\t\t\t\t<th>方式</th>\r\n\t\t\t\t\t<th>收入</th>\r\n\t\t\t\t\t<th>支出</th>\r\n\t\t\t\t\t<th>結存餘額</th>\r\n\t\t\t\t\t<th>對方行帳號</th>\r\n\t\t\t\t\t<th>備註</th></tr></thead>\r\n\t\t\t");
                __builder2.OpenElement(127, "tbody");
#nullable restore
#line 145 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
     if (m_NewAccountS != null)
				{
					

#line default
#line hidden
#nullable disable
#nullable restore
#line 147 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
      foreach (var (account, i) in m_NewAccountS.Select((account, i) => (account, i)))
					{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(128, "td");
                __builder2.AddAttribute(129, "style", "text-align:center");
#nullable restore
#line (149,38)-(149,78) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(130, account.baccountDate.ToShortDateString());

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(131, "\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(132, "td");
#nullable restore
#line (150,12)-(150,34) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(133, account.baccountBankNo);

#line default
#line hidden
#nullable disable
                __builder2.AddContent(134, " ");
#nullable restore
#line (150,36)-(150,56) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(135, account.baccountBank);

#line default
#line hidden
#nullable disable
                __builder2.AddMarkupContent(136, "<br>");
#nullable restore
#line 151 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
        foreach (var repair in ServerData.m_AccountRepairS.Where(r => r.baccountNo == account.baccountNo))
							{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(137, "span");
#nullable restore
#line (153,16)-(153,39) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(138, repair.baccountBranchNo);

#line default
#line hidden
#nullable disable
                __builder2.AddContent(139, " ");
#nullable restore
#line (153,41)-(153,62) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(140, repair.baccountBranch);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(141, "\r\n\t\t\t\t\t\t\t\t<br>");
#nullable restore
#line 155 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
							}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(142, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(143, "td");
#nullable restore
#line (157,13)-(157,31) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(144, account.baccountNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(145, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(146, "td");
#nullable restore
#line (158,13)-(158,33) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(147, account.baccountType);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(148, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(149, "td");
#nullable restore
#line (159,13)-(159,31) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(150, account.baccountIn);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(151, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(152, "td");
#nullable restore
#line (160,13)-(160,32) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(153, account.baccountOut);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(154, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(155, "td");
#nullable restore
#line (161,13)-(161,34) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(156, account.baccountTotal);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(157, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(158, "td");
#nullable restore
#line (162,13)-(162,36) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(159, account.baccountOtherNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(160, "\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(161, "td");
#nullable restore
#line (163,13)-(163,28) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
__builder2.AddContent(162, account.bremark);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 164 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
					}

#line default
#line hidden
#nullable disable
#nullable restore
#line 164 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
      
				}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.CloseElement();
            }
            ));
            __builder.CloseComponent();
        }
        #pragma warning restore 1998
#nullable restore
#line 170 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\InsertData.razor"
       

	DateTime datee, accountInsert;
	string datee2, myAccount, accountDate, accountBank, accountBankNo, accountNo, accountType, accountIn, accountOut, accountTotal, accountOtherNo, remark;
	private NewAccount[] m_NewAccountS;
	private AccountRepair[] m_AccountRepairS;
	string todatee = DateTime.Today.ToString("yyyy-MM-dd");

	DateTime editDate;
	public void EditDateChange(ChangeEventArgs e)
	{
		editDate = Convert.ToDateTime(e.Value);
	}

	string money;
	public void MoneyChange(ChangeEventArgs e)
	{
		money = e.Value.ToString();
	}
	string bank, bankName, bankCode;
	public void BankChange(ChangeEventArgs e)
	{
		bank = e.Value.ToString();
		bankName = e.Value.ToString().Substring(3);
		bankCode = e.Value.ToString().Substring(0, 3);
	}
	string bank2, bankName2, bankCode2;
	public void BankChangeOther(ChangeEventArgs e)
	{
		bank2 = e.Value.ToString();
		bankName2 = e.Value.ToString().Substring(3);
		bankCode2 = e.Value.ToString().Substring(0, 3);
	}
	string account;
	public void AccountChange(ChangeEventArgs e)
	{
		account = e.Value?.ToString();
	}
	DateTime beginDate;
	public void BeginDateChange(ChangeEventArgs e)
	{
		beginDate = Convert.ToDateTime(e.Value);
	}
	DateTime endDate;
	public void EndDateChange(ChangeEventArgs e)
	{
		endDate = Convert.ToDateTime(e.Value);
	}


	private NewAccount[] m_NewAccountRecordS;
	public AccountRepair[] UpdateAccountRepairALL()
	//專門給選擇銀行後跳出對應帳戶用的更新資料(有時候可能會先使用銀行維護去新增資料，這時候就要用他嚕)
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<AccountRepair> newList = ServerData.m_AccountRepairS.ToList();
		// 新資料列表
		List<AccountRepair> newDataList = GetAccountRepair();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_AccountRepairS = newList.ToArray();
		return m_AccountRepairS;
	}

	string kkk = "";
	public DataSet dataset = new DataSet();
	public List<AccountRepair> GetAccountRepair()//再次抓取資料
	{
		List<AccountRepair> newDataList = new List<AccountRepair>();
		//SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		string SQLString = "SELECT * FROM NewAccountRepair ";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				try
				{
					connection.Open();

					using (SqlDataReader reader = command.ExecuteReader())
					{
						while (reader.Read())
						{
							AccountRepair newData = new AccountRepair
								{
									// 這裡的屬性賦值根據您的資料表結構進行調整
									baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
									baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
									baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
									baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
									baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
									baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
									baccountInitialMoney = reader.IsDBNull(reader.GetOrdinal("accountInitialMoney")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountInitialMoney")),
									bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
									baccountInsert = reader.IsDBNull(reader.GetOrdinal("accountInsert")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountInsert")),
									baccountUpdate = reader.IsDBNull(reader.GetOrdinal("accountUpdate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountUpdate")),

									// 其他屬性...
								};
							newDataList.Add(newData);
						}
					}
				}
				catch (Exception ex)
				{
					kkk += ex.Message;
				}
			}
		}
		return newDataList;
	}

	public void OnClickAdd(MouseEventArgs e)
	{
		if (editDate == DateTime.MinValue)
		{
			AlertService.Error("請選擇交易日期");
			return; // 在這裡返回，結束函數執行
		}
		if (string.IsNullOrEmpty(bank))
		{
			AlertService.Error("請選擇銀行");
			return;
		}
		if (string.IsNullOrEmpty(account))
		{
			AlertService.Error("請選擇帳號");
			return;
		}
		if (string.IsNullOrEmpty(money))
		{
			AlertService.Error("請選擇付款方式");
			return;
		}
		if (string.IsNullOrEmpty(accountIn) && string.IsNullOrEmpty(accountOut))
		{
			AlertService.Error("請輸入收入或者支出");
			return;
		}
		if (string.IsNullOrEmpty(accountOtherNo))
		{
			AlertService.Error("請輸入對方帳號");
			return;
		}
		if (DataVersionService.DataVersion != 1)//若版本有更新，例如新增、修改、刪除....
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == account) // 根據帳號篩選
						.GroupBy(item => item.baccountNo) // 按帳號分組
						.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
						.SelectMany(sortedGroup => sortedGroup)
						.ToArray();
			if (updatedData.Length == 0)//若該帳號沒有使用過直接新增
			{
				HandleEmptyArray();

			}
			else if (updatedData.Length == 1) //若該帳號只有一條
			{
				HandleArrayWithOneItem();
			}
			else //若該帳號大於2條
			{
				HandleArrayWithMoreThanOneItem();//若帳號有兩條以上
			}
		}
		else
		{
			m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == account) // 根據帳號篩選
						.GroupBy(item => item.baccountNo) // 按帳號分組
						.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
						.SelectMany(sortedGroup => sortedGroup)
						.ToArray();
			if (m_NewAccountS.Length == 0)//若該帳號沒有使用過直接新增
			{
				HandleEmptyArray();

			}
			else if (m_NewAccountS.Length == 1) //若該帳號只有一條
			{
				HandleArrayWithOneItem();
			}
			else //若該帳號大於2條
			{
				HandleArrayWithMoreThanOneItem();//若帳號有兩條以上
			}
		}
	}
	public void HandleEmptyArray()//若該帳號沒有使用過直接新增
	{
		datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//加入日期

		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountBranch],[accountBranchNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[accountAddress],[remark], [accountInsert],[accountUpdate]) VALUES (@editDate,@bankName,@bankCode,@accountBranch,@accountBranchNo,@accountNo,@accountType,@accountIn,@accountOut,@toto,@accountOtherNo,@accountAddress,@remark ,@accountInsert,@accountUpdate)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountNo == account && item.baccountBankNo == bankCode).ToArray();
		var repairbranch = m_AccountRepairS[0];
		string r_b = repairbranch.baccountBranch;
		string r_b_n = repairbranch.baccountBranchNo;
		string r_b_a = repairbranch.baccountAddress;
		decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut;
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
			sqlcommand.Parameters.AddWithValue("@editDate", editDate);//交易日期
			sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
			sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
			sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);
			sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//銀行代碼
			sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
			sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
			sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? 0);//收入
			sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? 0);//支出
			sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
			sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
			sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);
			sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
			sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
			sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)
			{
				AlertService.Success($"成功新增{rowsAffected}條");
				myAccount = "";//我的帳號
				accountOut = "";
				accountIn = "";
				accountOtherNo = "";
				DataVersionService.IncrementDataVersion();
			}
			else
			{
				AlertService.Error("更新失敗");
			}
			SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
			sqlTransaction.Commit();
		}
		UpdateHandleEmptyArray(DateTime.Parse(datee2));
	}

	public void HandleArrayWithOneItem()//若該帳號只有一條新增
	{
		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountBranch],[accountBranchNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[accountAddress],[remark], [accountInsert],[accountUpdate]) VALUES (@accountDate,@bankName,@bankCode,@accountBranch,@accountBranchNo,@accountNo,@accountType,@accountIn,@accountOut,@toto,@accountOtherNo,@accountAddress,@remark ,@accountInsert,@accountUpdate)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == account) // 根據帳號篩選
			.GroupBy(item => item.baccountNo) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
			m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountNo == account && item.baccountBankNo == bankCode).ToArray();
			var repairbranch = m_AccountRepairS[0];
			string r_b = repairbranch.baccountBranch;
			string r_b_n = repairbranch.baccountBranchNo;
			string r_b_a = repairbranch.baccountAddress;
			var latestRecord = updatedData[0];
			if (latestRecord.baccountDate == editDate)//如果日期一樣
			{
				DateTime a = latestRecord.baccountDate;
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal secondTotal = (updatedData[0].baccountIn - updatedData[0].baccountOut);
				decimal toto = secondTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (latestRecord.baccountDate > editDate)//最舊
			{
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal toto = latestIn - latestOut;
				string accountinsert = datee.ToString("yyyy-MM-dd HH:mm:ss");
				DateTime a = latestRecord.baccountDate;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼	
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					HandleArrayWithOneItemUpdate(latestIn, latestOut);
					UpdateHandleEmptyArray(DateTime.Parse(datee2));
				}
			}
			else//新資料為最新
			{
				DateTime a = latestRecord.baccountDate;
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal secondTotal = (updatedData[0].baccountIn - updatedData[0].baccountOut);
				decimal toto = secondTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
		}
		else
		{
			m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == account) // 根據帳號篩選
			.GroupBy(item => item.baccountNo) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
			var latestRecord = m_NewAccountS[0];
			m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountNo == account && item.baccountBankNo == bankCode).ToArray();
			var repairbranch = m_AccountRepairS[0];
			string r_b = repairbranch.baccountBranch;
			string r_b_n = repairbranch.baccountBranchNo;
			string r_b_a = repairbranch.baccountAddress;
			if (latestRecord.baccountDate == editDate)//如果日期一樣
			{
				DateTime a = latestRecord.baccountDate;
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal secondTotal = (m_NewAccountS[0].baccountIn - m_NewAccountS[0].baccountOut);
				decimal toto = secondTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼	
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址		
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (latestRecord.baccountDate > editDate)//最舊
			{
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal toto = latestIn - latestOut;
				string accountinsert = datee.ToString("yyyy-MM-dd HH:mm:ss");
				DateTime a = latestRecord.baccountDate;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					HandleArrayWithOneItemUpdate(latestIn, latestOut);
					UpdateHandleEmptyArray(DateTime.Parse(datee2));
				}
			}
			else//新資料為最新
			{
				DateTime a = latestRecord.baccountDate;
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal secondTotal = (m_NewAccountS[0].baccountIn - m_NewAccountS[0].baccountOut);
				decimal toto = secondTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
		}
	}

	public void HandleArrayWithOneItemUpdate(decimal latestIn, decimal latestOut)//若該帳號只有一條ㄉ更新
	{
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		decimal toto = latestIn - latestOut;
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == account) // 根據帳號篩選
			.GroupBy(item => item.baccountNo) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
			var latestRecord2 = updatedData[0];
			if (latestRecord2.baccountDate == editDate)//最舊
			{
				string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE   [accountBankNo] =@bank AND [accountInsert]= @accountInsert ";
				m_NewAccountRecordS = updatedData.Where(item => item.baccountDate > editDate).ToArray();
				foreach (var oldRecord in m_NewAccountRecordS)
				{
					decimal secondIn = oldRecord.baccountIn;
					decimal secondOut = oldRecord.baccountOut;
					decimal toto1 = (latestIn - latestOut + secondIn - secondOut);
					if (sqlconnection.State == System.Data.ConnectionState.Closed)
					{
						sqlconnection.Open();
						SqlCommand sqlcommand = new SqlCommand(SQLString2, sqlconnection);
						sqlcommand.Parameters.Clear();
						sqlcommand.Parameters.AddWithValue("@accountInsert", oldRecord.baccountInsert);//交易日期
						sqlcommand.Parameters.AddWithValue("@bank", bankCode);//銀行
						sqlcommand.Parameters.AddWithValue("@toto", latestIn - latestOut + secondIn - secondOut);//餘額
						int rowsAffected = sqlcommand.ExecuteNonQuery();
						if (rowsAffected > 0)
						{
							AlertService.Success($"成功更新{rowsAffected}條");
							myAccount = "";//我的帳號
							accountOut = "";
							accountIn = "";
							accountOtherNo = "";
						}
						else
						{
							AlertService.Error("更新失敗");
						}
						SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
						sqlTransaction.Commit();
					}
				}
			}
		}
		else
		{
			m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == account) // 根據帳號篩選
			.GroupBy(item => item.baccountNo) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
							.ThenBy(item => item.baccountNo)
							.ThenBy(item => item.baccountDate)
							.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
			var latestRecord = m_NewAccountS[0];
			if (latestRecord.baccountDate > editDate)//最舊
			{
				string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE   [accountBankNo] =@bank AND [accountInsert]= @accountInsert ";
				m_NewAccountRecordS = m_NewAccountS.Where(item => item.baccountDate > editDate).ToArray();
				foreach (var oldRecord in m_NewAccountRecordS)
				{
					decimal secondIn = oldRecord.baccountIn;
					decimal secondOut = oldRecord.baccountOut;
					decimal toto1 = (latestIn - latestOut + secondIn - secondOut);
					if (sqlconnection.State == System.Data.ConnectionState.Closed)
					{
						sqlconnection.Open();
						SqlCommand sqlcommand = new SqlCommand(SQLString2, sqlconnection);
						sqlcommand.Parameters.Clear();
						sqlcommand.Parameters.AddWithValue("@accountInsert", oldRecord.baccountInsert);//交易日期
						sqlcommand.Parameters.AddWithValue("@bank", bankCode);//銀行
						sqlcommand.Parameters.AddWithValue("@toto", latestIn - latestOut + secondIn - secondOut);//餘額
						int rowsAffected = sqlcommand.ExecuteNonQuery();
						if (rowsAffected > 0)
						{
							AlertService.Success($"成功更新{rowsAffected}條");
							myAccount = "";//我的帳號
							accountOut = "";
							accountIn = "";
							accountOtherNo = "";
						}
						else
						{
							AlertService.Error("更新失敗");
						}
						SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
						sqlTransaction.Commit();
					}
				}
			}
		}
	}

	public void HandleArrayWithMoreThanOneItem()//若該帳號大於2條新增
	{
		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountBranch],[accountBranchNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[accountAddress],[remark], [accountInsert],[accountUpdate]) VALUES (@accountDate,@bankName,@bankCode,@accountBranch,@accountBranchNo,@accountNo,@accountType,@accountIn,@accountOut,@toto,@accountOtherNo,@accountAddress,@remark ,@accountInsert,@accountUpdate)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		var latestRecord = m_NewAccountS[0];// 最舊
		var secondRecord = m_NewAccountS[1];//第二舊
		decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut;
		decimal toto1 = 0;
		m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountNo == account && item.baccountBankNo == bankCode).ToArray();
		var repairbranch = m_AccountRepairS[0];
		string r_b = repairbranch.baccountBranch;
		string r_b_n = repairbranch.baccountBranchNo;
		string r_b_a = repairbranch.baccountAddress;
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData
			.Where(item => item.baccountNo == account) // 根據帳號篩選
			.GroupBy(item => item.baccountNo) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
			if (updatedData[0].baccountDate == editDate)//如果第一筆舊資料和新資料日期一樣
			{
				for (int i = 0; i < updatedData.Length; i++)
				{
					if (updatedData[i].baccountDate > editDate)
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto = updatedData[i - 1].baccountTotal + latestIn - latestOut;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼							
							sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址							
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
							break;
						}
					}
					else//maybe所有日期都是同一個，那麼新資料會被當成最新資料 就好了 
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto1 = updatedData.Last().baccountTotal + latestIn - latestOut;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
							sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
						}
					}
				}
			}
			else if (updatedData.Last().baccountDate == editDate)//如果舊資料的最後一筆和新添加的資料日期一樣
			{
				latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				toto1 = updatedData.Last().baccountTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址					
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (updatedData[0].baccountDate > editDate)//新資料成為最舊
			{
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (updatedData.Last().baccountDate < editDate)//新資料依然最新
			{
				latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				toto1 = updatedData.Last().baccountTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else//新資料不舊不新，最麻煩了 QQ
			{
				for (int i = 0; i < updatedData.Length; i++)
				{
					if (updatedData[i].baccountDate > editDate)
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto = updatedData[i - 1].baccountTotal + latestIn - latestOut;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼							
							sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址							
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
							break;
						}
					}
				}
			}
		}
		else
		{
			m_NewAccountS=ServerData.m_NewAccountS.GroupBy(item => item.baccountNo) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
						.ThenBy(item => item.baccountNo)
						.ThenBy(item => item.baccountDate)
						.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
			if (latestRecord.baccountDate == editDate)//如果第一筆舊資料和新資料日期一樣
			{
				for (int i = 0; i < m_NewAccountS.Length; i++)
				{
					if (m_NewAccountS[i].baccountDate > editDate)
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto = m_NewAccountS[i - 1].baccountTotal + latestIn - latestOut;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼							
							sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址							
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
							break;
						}
					}
					else
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);

						toto1 = m_NewAccountS.Last().baccountTotal + latestIn - latestOut;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
							sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址					
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
						}

					}
				}
			}
			else if (m_NewAccountS.Last().baccountDate == editDate)//如果舊資料的最後一筆和新添加的資料日期一樣
			{
				latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				toto1 = m_NewAccountS.Last().baccountTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (latestRecord.baccountDate > editDate)//新資料成為最舊
			{
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (m_NewAccountS.Last().baccountDate < editDate)//新資料依然最新
			{
				latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				toto1 = m_NewAccountS.Last().baccountTotal + latestIn - latestOut;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo",account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址					
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else//新資料不舊不新，最麻煩了 QQ
			{
				for (int i = 0; i < m_NewAccountS.Length; i++)
				{
					if (m_NewAccountS[i].baccountDate > editDate)
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto = m_NewAccountS[i - 1].baccountTotal + latestIn - latestOut;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼							
							sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址							
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
							break;
						}
					}
				}
			}
		}
	}

	public void HandleArrayWithMoreThanOneItemUpdate(decimal latestIn, decimal latestOut)//若該帳號大於2條更新
	{
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		var oldRecord = m_NewAccountS[0];
		var secondRecourd = m_NewAccountS[1];
		decimal toto = latestIn - latestOut;
		decimal toto0 = 0;//最舊
		decimal toto1 = 0;
		m_NewAccountRecordS = m_NewAccountS.Where(item => item.baccountDate >= editDate).GroupBy(item => item.baccountNo) // 按帳號分組
		.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
		.SelectMany(sortedGroup => sortedGroup).ToArray();
		using (SqlConnection sqlConnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022"))
		{
			if (DataVersionService.DataVersion != 1)
			{
				NewAccount[] updatedData = UpdateNewDataALL2();
				updatedData = updatedData.Where(item => item.baccountNo == account) // 根據帳號篩選
				.GroupBy(item => item.baccountNo) // 按帳號分組
				.Select(group => group.OrderBy(item => item.baccountBank)
										.ThenBy(item => item.baccountNo)
										.ThenBy(item => item.baccountDate)
										.ThenBy(item => item.baccountInsert))
				.SelectMany(sortedGroup => sortedGroup).ToArray();
				if (updatedData[0].baccountDate == editDate)//如果最舊的資料和新資料日期一樣
				{
					for (int i = 0; i < updatedData.Length; i++)
					{
						if (updatedData[i].baccountDate != editDate)
						{
							toto1 = updatedData[i - 1].baccountTotal;//新資料不舊不新，最麻煩了 QQ
							for (int j = i; j < updatedData.Length; j++)
							{
								toto1 += updatedData[j].baccountIn - updatedData[j].baccountOut;
								bank = updatedData[j].baccountBankNo;
								accountInsert = updatedData[j].baccountInsert;
								accountDate = updatedData[j].baccountDate.ToString("yyyy-MM-dd");
								UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
							}
							break;
						}
					}
				}
				else if (updatedData.Last().baccountDate == editDate)//如果新資料和最後一筆資料日期一樣
				{ }
				else if (updatedData[0].baccountDate > editDate)//最舊
				{
					for (int i = 0; i < updatedData.Length; i++)
					{
						accountInsert = updatedData[i].baccountInsert;
						accountDate = updatedData[i].baccountDate.ToString("yyyy-MM-dd");
						bank = m_NewAccountS[i].baccountBankNo;
						if (i == 0)
						{
							decimal oldIn = updatedData[0].baccountIn;
							decimal oldOut = updatedData[0].baccountOut;
							toto0 = toto + oldIn - oldOut;
							UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
						}
						else
						{
							toto0 += updatedData[i].baccountIn - updatedData[i].baccountOut;
							UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
						}
					}

				}
				else if (updatedData.Last().baccountDate < editDate)//新資料依然最新
				{ }
				else//不新不舊
				{
					for (int i = 0; i < updatedData.Length; i++)
					{
						if (updatedData[i].baccountDate > editDate || updatedData[i].baccountDate == editDate)
						{
							toto1 = updatedData[i - 1].baccountTotal + latestIn - latestOut;//新資料不舊不新，最麻煩了 QQ

							for (int j = i; j < updatedData.Length; j++)
							{
								toto1 += updatedData[j].baccountIn - updatedData[j].baccountOut;
								bank = updatedData[j].baccountBankNo;
								accountInsert = updatedData[j].baccountInsert;
								accountDate = updatedData[j].baccountDate.ToString("yyyy-MM-dd");
								UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
								break;
							}
						}
					}
				}
			}
			else
			{

				if (oldRecord.baccountDate == editDate)//如果最舊的資料和新資料日期一樣
				{
					for (int i = 0; i < m_NewAccountRecordS.Length; i++)
					{
						if (m_NewAccountRecordS[i].baccountDate == editDate)
						{
							toto1 = m_NewAccountRecordS[i].baccountTotal + latestIn - latestOut;//新資料不舊不新，最麻煩了 QQ
							for (int j = i + 1; j < m_NewAccountRecordS.Length; j++)
							{
								toto1 += m_NewAccountRecordS[j].baccountIn - m_NewAccountRecordS[j].baccountOut;
								bank = m_NewAccountRecordS[j].baccountBankNo;
								accountInsert = m_NewAccountRecordS[j].baccountInsert;
								accountDate = m_NewAccountRecordS[j].baccountDate.ToString("yyyy-MM-dd");
								UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
							}
						}
					}
				}
				else if (m_NewAccountS.Last().baccountDate == editDate)//如果新資料和最後一筆資料日期一樣
				{ }
				else if (oldRecord.baccountDate > editDate)//最舊
				{
					for (int i = 0; i < m_NewAccountRecordS.Length; i++)
					{
						accountInsert = m_NewAccountRecordS[i].baccountInsert;
						accountDate = m_NewAccountS[i].baccountDate.ToString("yyyy-MM-dd");
						bank = m_NewAccountS[i].baccountBankNo;
						if (i == 0)
						{
							decimal oldIn = m_NewAccountRecordS[0].baccountIn;
							decimal oldOut = m_NewAccountRecordS[0].baccountOut;
							toto0 = toto + oldIn - oldOut;
							UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
						}
						else
						{
							toto0 += m_NewAccountRecordS[i].baccountIn - m_NewAccountRecordS[i].baccountOut;
							UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
						}
					}
				}
				else if (m_NewAccountS.Last().baccountDate < editDate)//新資料依然最新
				{ }
				else//不新不舊
				{
					for (int i = 0; i < m_NewAccountS.Length; i++)
					{
						if (m_NewAccountS[i].baccountDate > editDate || m_NewAccountS[i].baccountDate == editDate)
						{
							toto1 = m_NewAccountS[i - 1].baccountTotal + latestIn - latestOut;//新資料不舊不新，最麻煩了 QQ
							for (int j = i; j < m_NewAccountS.Length; j++)
							{
								toto1 += m_NewAccountS[j].baccountIn - m_NewAccountS[j].baccountOut;
								bank = m_NewAccountS[j].baccountBankNo;
								accountInsert = m_NewAccountS[j].baccountInsert;
								accountDate = m_NewAccountS[j].baccountDate.ToString("yyyy-MM-dd");
								UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
								break;
							}
						}
					}
				}
			}
		}
	}

	public void UpdateAccountTotal(SqlConnection sqlConnection, string accountDate, string bankCode, string accountNo, decimal toto, DateTime accountInsert)
	{
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE  [accountBankNo] =@bank AND [accountDate]= @accountDate  AND [accountInsert]=@accountInsert";
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString2, sqlconnection);
			sqlcommand.Parameters.Clear();
			sqlcommand.Parameters.AddWithValue("@accountDate", accountDate);//交易日期
			sqlcommand.Parameters.AddWithValue("@bank", bankCode);//銀行
			sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
			sqlcommand.Parameters.AddWithValue("@accountInsert", accountInsert);//加入時間，用於辨別
			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)

			{
				AlertService.Success($"成功更新{rowsAffected}條");
				myAccount = "";//我的帳號
				accountOut = "";
				accountIn = "";
				accountOtherNo = "";
			}
			else
			{
				AlertService.Error("更新失敗");
			}
			SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
			sqlTransaction.Commit();
		}
	}

	public void UpdateHandleEmptyArray(DateTime date)//更新頁面/HandleEmptyArray
	{
		m_NewAccountS = Array.Empty<NewAccount>();
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<NewAccount> newList = m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetDataFromDatabase();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newList.Where(item => item.baccountInsert.ToString("yyyy/MM/dd HH:mm:ss") == date.ToString("yyyy/MM/dd HH:mm:ss"))
										.ToArray();
	}
	public List<NewAccount> GetDataFromDatabase()
	{
		List<NewAccount> newDataList = new List<NewAccount>();
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string SQLString = "SELECT ROW_NUMBER() OVER(PARTITION BY accountBank, accountNo ORDER BY  accountDate ASC)  , *FROM NewAccountInfo; ";
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				connection.Open();
				using (SqlDataReader reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						NewAccount newData = new NewAccount
							{
								// 這裡的屬性賦值根據您的資料表結構進行調整
								baccountDate = reader.GetDateTime(reader.GetOrdinal("accountDate")),
								baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
								baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
								baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
								baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
								baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
								baccountType = reader.GetString(reader.GetOrdinal("accountType")),
								baccountIn = reader.IsDBNull(reader.GetOrdinal("accountIn")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountIn")),
								baccountOut = reader.IsDBNull(reader.GetOrdinal("accountOut")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountOut")),
								baccountTotal = reader.IsDBNull(reader.GetOrdinal("accountTotal")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountTotal")),
								baccountOtherNo = reader.GetString(reader.GetOrdinal("accountOtherNo")),
								baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
								bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
								baccountInsert = reader.GetDateTime(reader.GetOrdinal("accountInsert")),
								baccountUpdate = reader.GetDateTime(reader.GetOrdinal("accountUpdate"))
								// 其他屬性...
							};
						newDataList.Add(newData);
					}
				}
			}
			return newDataList;
		}
	}
	public NewAccount[] UpdateNewDataALL2()
	{
		// 新資料列表
		List<NewAccount> newDataList = GetNewData();
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newDataList.ToArray();
		return m_NewAccountS;
	}
	public List<NewAccount> GetNewData()//再次抓取資料
	{
		List<NewAccount> newDataList = new List<NewAccount>();
		//SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		string SQLString = "SELECT ROW_NUMBER() OVER (PARTITION　BY accountBank, accountNo ORDER BY  accountDate ASC )  , * FROM NewAccountInfo; ";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				connection.Open();
				using (SqlDataReader reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						NewAccount newData = new NewAccount
							{
								// 這裡的屬性賦值根據您的資料表結構進行調整
								baccountDate = reader.GetDateTime(reader.GetOrdinal("accountDate")),
								baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
								baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
								baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
								baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
								baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
								baccountType = reader.GetString(reader.GetOrdinal("accountType")),
								baccountIn = reader.IsDBNull(reader.GetOrdinal("accountIn")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountIn")),
								baccountOut = reader.IsDBNull(reader.GetOrdinal("accountOut")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountOut")),
								baccountTotal = reader.IsDBNull(reader.GetOrdinal("accountTotal")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountTotal")),
								baccountOtherNo = reader.GetString(reader.GetOrdinal("accountOtherNo")),
								baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
								bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
								baccountInsert = reader.GetDateTime(reader.GetOrdinal("accountInsert")),
								baccountUpdate = reader.IsDBNull(reader.GetOrdinal("accountUpdate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountUpdate")),
								// 其他屬性...
							};
						newDataList.Add(newData);
					}
				}
			}
			return newDataList;
		}
	}



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DataVersionService DataVersionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAlertService AlertService { get; set; }
    }
}
#pragma warning restore 1591
