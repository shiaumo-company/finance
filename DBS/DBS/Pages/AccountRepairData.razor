<h3>accountrepairdata</h3>
@page "/AccountRepairData"
@using System;
@using System.Data;
@using System.Data.SqlClient;
@using DBS.Data;
@using DBS.Pages;
@using DBS.Services
@inject IAlertService AlertService
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject DataVersionService DataVersionService

<head>
	<link href="styles/site.css" rel="stylesheet" />
</head>
<AuthorizeView>
	<Authorized>
		@if (showTable_select)
		{
						<table class="table" style="text-align:right; margin-top:20px;" >
						<thead >
						<button @onclick="OnClickAdd">新增</button>
					@if (showTable_selectall || showTable_selectpart)
					{
									<td>
										<select style="height: 30px; width: 175px;" @onchange="BankChange">
											<option value="" disabled selected>請選擇銀行</option>

								@foreach (var banks in BankData.GetBankList())
								{
									var updatedData = DataVersionService.DataVersion != 1
										? UpdateAccountRepairALL().Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3))
																		.GroupBy(item => item.baccountNo)
																		.Select(group => group.First())
																		.ToArray()
										: ServerData.m_AccountRepairS.Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3))
																	.GroupBy(item => item.baccountNo)
																	.Select(group => group.First())
																	.ToArray();

									if (updatedData.Any())
									{
																					<option value="@banks.BankCode">@banks.BankName</option>
									}
								}
										</select>
									</td>
					}
					else
					{
									<td>
										<select style="height: 30px; width: 175px;" @onchange="BankChange">
											<option value="" disabled selected>請選擇銀行</option>

								@foreach (var banks in BankData.GetBankList())
								{
									var distinctRepairs = ServerData.m_AccountRepairS.Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3));
									if (distinctRepairs.Any())
									{
																					<option value="@banks.BankCode">@banks.BankName</option>
									}
								}
										</select>
									</td>
					}
							<button @onclick="OnClickSelect">部分搜尋</button>
							<button @onclick="OnClickSelect_All">搜尋全部</button>		
						<tr>
								<th style="text-align:center">操作</th>
								<th>加入日期</th>
								<th>銀行代碼</th>
								<th>帳號</th>
								<th>地址</th>
								<th>備註</th>
							</tr>
						</thead>
						<tbody>
					@if (m_AccountRepairS != null)
					{					
						@foreach (var (account, i) in m_AccountRepairS.Select((account, i) => (account, i)))
						{
							var isEditing = editStates.ContainsKey(i) && editStates[i];
															<tr>
																<td>
																	<button  @onclick="() => OnClickDel(i)">刪除</button>
																</td>
																<td style="text-align:center">@account.baccountInsert.ToShortDateString()</td>
																<td>@account.baccountBankNo @account.baccountBank<br />
																<span>@account.baccountBranchNo @account.baccountBranch</span>
																<br />
																</td>
																<td>@account.baccountNo</td>
																<td>@account.baccountAddress</td>
																<td>@account.bremark</td>
																<td></td>
															</tr>

						}
					}
						</tbody>
						</table>
		}
		else
		{
					<table class="table" style="text-align:right">
					<thead >
						<tr>
						@if (showTable_save)
						{
											<td><button @onclick="OnClickSave">儲存</button></td>
											<td><button @onclick="OnClickCancel">取消</button></td>
						}
						else
						{
										<td><button @onclick="OnClickSave">儲存</button></td>
										<td><button @onclick="OnClickSelect_All">搜尋全部</button></td>
										<td>						
										<select style="height: 30px;width :175px;" @onchange="BankChange">
										<option value="" disabled selected>請選擇銀行</option>
									@foreach (var banks in BankData.GetBankList())
									{
										@if (DataVersionService.DataVersion != 1)//如果有變更則要重新去資料庫抓資料，即時更新
										{
											AccountRepair[] updatedData = UpdateAccountRepairALL();
											updatedData = updatedData.Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3))
															.GroupBy(item => item.baccountNo)
															.Select(group => group.First())
															.ToArray();
											if (updatedData.Any())
											{
																							<option value=@banks.BankCode >@banks.BankName</option>
											}
										}
										else
										{
											var distinctRepairs = ServerData.m_AccountRepairS.Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3))
																		.GroupBy(item => item.baccountNo)
																		.Select(group => group.First())
																		.ToArray();
											if (distinctRepairs.Any())
											{
																							<option value=@banks.BankCode >@banks.BankName</option>
											}
										}
									}
										}
										</select>
										</td>
										<td><button @onclick="OnClickSelect">部分搜尋</button></td>
						}
							</tr>
					</thead>
					</table>
					<table class="table" style="text-align:right">
					<tbody>
						<tr>
							<td style="height:50px; width:175px;">銀行</td>
							<td>
								<select style="height: 30px;width :175px;" @onchange="BankChange">
								<option value="" disabled selected>請選擇銀行</option>
								@foreach (var banks in BankData.GetBankList())
								{
									string methodName = $"GetBranchList_{banks.BankCode.ToString().Substring(0, 3)}";
									var methodInfo = typeof(BankData).GetMethod(methodName);
									if (methodInfo != null && methodInfo.IsStatic)
									{
										var bankList = (List<BranchInfo>)methodInfo.Invoke(null, null);
										int bankCount = bankList.Count; // 直接使用获取的分行列表的 Count 属性
																<option value=@banks.BankCode >@banks.BankName (@bankCount)</option>
									}
								}
								</select>
								<!--區域-->
								<select style="height: 30px;width :175px;" @onchange="CityChange">
								<option value="" disabled selected>請選擇地區</option>
								@foreach (var citys in BankData.GetCityList())
								{
									string methodName = $"GetBranchList_{bankCode}";
									var methodInfo = typeof(BankData).GetMethod(methodName);
									if (methodInfo != null && methodInfo.IsStatic)
									{
										var bankList = (List<BranchInfo>)methodInfo.Invoke(null, null);
										var filterbanklist = bankList.Where(item => item.BranchCity == citys.CityCode);
										int bankCount = filterbanklist.Count();
																<option value=@citys.CityCode style="@GetItemStyle(citys)">@citys.CityName (@bankCount)</option>
									}
								}
								</select>
								<!--分行代碼-->
								<select style="height: 30px;width :175px;" @onchange="BranchChange">
									<option value=""  disabled selected>請選擇分行</option>
								@if (selectedBranchList != null)
								{
									@foreach (var banks in selectedBranchList.Where(item => item.BranchCity == @city))
									{
																		<option value=@banks.BranchCode >@banks.BranchName</option>
									}
								}
									 <option value="additionalValue">請選擇分行</option>
								</select>
								<!--預設是"請選擇分行-->
								<script>
									function resetBranchDropdown() 
									{
										var branchDropdown = document.getElementById('branchDropdown');
										branchDropdown.selectedIndex = 0; // 設置為第一個選項，即"請選擇分行"
									}
								</script>
							</td>
						</tr>
						<tr>
							<td style="height:50px; width:175px;">開戶帳號</td>
							<td>
								<input style="height:50px; width:100px;" readonly value="@bankCode @branchCode" class="right-align" id="InitialCode" asp-for="InitialCode"   />
								<input style="height:50px; width:500px;" id="InitialAccount" type="number" asp-for="InitialAccount" @bind="InitialAccount" placeholder="開戶帳號"/>
							</td>
						</tr>
						<tr>
							<td style="height:50px; width:175px;">銀行地址</td>
							<td>
							<input style="height:50px; width:500px;" id="BankAddress" type="text" asp-for="BankAddress" @bind="BankAddress" placeholder="銀行地址"/>
							</td>
						</tr>
						<tr>
							<td style="height:50px; width:175px;">銀行網頁</td>
								<td style="height:50px; width:175px;">
									<a href="@selectedBankWeb" target="_blank">@bank</a>
								</td>
						</tr>
						<tr>
							<td style="height:50px; width:175px;">備註</td>
							<td>
							<input style="height:50px; width:175px;" id="remark" type="text" asp-for="remark" @bind="remark" placeholder="備註"/>
							</td>
						</tr>
					</tbody>
					</table>
		}
	</Authorized>
</AuthorizeView>

@code {
	bool isEdit = false;
	int editingIndex = -1;
	Dictionary<int, bool> editStates = new Dictionary<int, bool>();

	public class DataSharedVision
	{
		public static int dataVersion { get; set; } = 1;// 初始化一個版本號，可以是時間戳記或其他唯一識別號
	}
	public static int GetDataVersion()
	{
		return DataSharedVision.dataVersion;
	}

	// 在City2Change事件處理程序中調用JavaScript函數
	private async Task City2Change(ChangeEventArgs e)
	{
		// 调用 JavaScript 函数重置分行下拉列表
		await JSRuntime.InvokeVoidAsync("resetBranchDropdown");
	}

	string kkk = "";
	private string GetItemStyle(CityInfo city)
	{
		// 根據特定條件設置樣式
		if (city.IsLargeFont)
		{
			return " font-weight: bold; color: red; ";
		}
		else
		{
			return "font-size: 16px;";
		}
	}
	public List<BranchInfo> selectedBranchList;
	public BankInfo[] selectBankList;
	string selectBank;
	string bank, bankName, bankCode, branch, branchCode, branchCodeFull, branchName, selectedBankWeb;
	public void BankChange(ChangeEventArgs e)
	{
		bank = e.Value?.ToString();
		bankName = e.Value?.ToString().Substring(3);
		bankCode = e.Value?.ToString().Substring(0, 3);
		selectedBankWeb = GetBankWeb(bank);
		branchCode = "";
		switch (bankCode)
		{
			case "004":
				selectedBranchList = BankData.GetBranchList_004();
				break;
			case "005":
				selectedBranchList = BankData.GetBranchList_005();
				break;
			case "006":
				selectedBranchList = BankData.GetBranchList_006();
				break;
			case "007":
				selectedBranchList = BankData.GetBranchList_007();
				break;
			case "008":
				selectedBranchList = BankData.GetBranchList_008();
				break;
			case "009":
				selectedBranchList = BankData.GetBranchList_009();
				break;
			case "011":
				selectedBranchList = BankData.GetBranchList_011();
				break;
			case "012":
				selectedBranchList = BankData.GetBranchList_012();
				break;
			case "013":
				selectedBranchList = BankData.GetBranchList_013();
				break;
			case "015":
				selectedBranchList = BankData.GetBranchList_015();
				break;
			case "016":
				selectedBranchList = BankData.GetBranchList_016();
				break;
			case "017":
				selectedBranchList = BankData.GetBranchList_017();
				break;
			case "018":
				selectedBranchList = BankData.GetBranchList_018();
				break;
			case "021":
				selectedBranchList = BankData.GetBranchList_021();
				break;
			case "040":
				selectedBranchList = BankData.GetBranchList_040();
				break;
			case "048":
				selectedBranchList = BankData.GetBranchList_048();
				break;
			case "050":
				selectedBranchList = BankData.GetBranchList_050();
				break;
			case "052":
				selectedBranchList = BankData.GetBranchList_052();
				break;
			case "053":
				selectedBranchList = BankData.GetBranchList_053();
				break;
			case "054":
				selectedBranchList = BankData.GetBranchList_054();
				break;
			case "081":
				selectedBranchList = BankData.GetBranchList_081();
				break;
			case "101":
				selectedBranchList = BankData.GetBranchList_101();
				break;
			case "102":
				selectedBranchList = BankData.GetBranchList_102();
				break;
			case "103":
				selectedBranchList = BankData.GetBranchList_103();
				break;
			case "108":
				selectedBranchList = BankData.GetBranchList_108();
				break;
			case "147":
				selectedBranchList = BankData.GetBranchList_147();
				break;
			case "803":
				selectedBranchList = BankData.GetBranchList_803();
				break;
			case "805":
				selectedBranchList = BankData.GetBranchList_805();
				break;
			case "806":
				selectedBranchList = BankData.GetBranchList_806();
				break;
			case "807":
				selectedBranchList = BankData.GetBranchList_807();
				break;
			case "808":
				selectedBranchList = BankData.GetBranchList_808();
				break;
			case "809":
				selectedBranchList = BankData.GetBranchList_809();
				break;
			case "810":
				selectedBranchList = BankData.GetBranchList_810();
				break;
			case "812":
				selectedBranchList = BankData.GetBranchList_812();
				break;

			case "816":
				selectedBranchList = BankData.GetBranchList_816();
				break;
			case "822":
				selectedBranchList = BankData.GetBranchList_822();
				break;
		}
	}
	string getBank, lastBankCode, lastBranchCode;
	public void getbank(string bankCode, string branchCode)
	{

		getBank = bankCode + branchCode;
		// Update last values
		lastBankCode = bankCode;
		lastBranchCode = branchCode;
	}
	public static string GetBankWeb(string bank)
	{
		var bankInfo = BankData.GetBankList().Where(item => item.BankCode == @bank)
		.FirstOrDefault();
		return bankInfo?.BankWeb ?? "未找到網頁銀行";
	}
	public void BranchChange(ChangeEventArgs e)
	{
		branch = e.Value.ToString();
		branchName = e.Value.ToString().Substring(7);
		branchCodeFull = e.Value.ToString().Substring(0, 8);
		branchCode = e.Value.ToString().Substring(3, 4);
		// 获取相应的 BranchInfo 对象
		var selectedBranch = selectedBranchList.FirstOrDefault(item => item.BranchCode.ToString().Substring(0, 8) == @branchCodeFull);
		//// 设置 BankAddress
		BankAddress = selectedBranch != null ? selectedBranch.BranchAddress : "未知地址";
	}

	string region;
	public void RegionChange(ChangeEventArgs e)
	{
		region = e.Value.ToString();
	}

	string city;
	public void CityChange(ChangeEventArgs e)
	{
		city = e.Value.ToString();
	}
	string money;

	string BankAddress, remark, InitialMoney, InitialAccount;
	public void MoneyChange(ChangeEventArgs e)
	{
		InitialAccount = e.Value.ToString();
	}


	string datee;
	public AccountRepair[] m_AccountRepairS;//帳戶維護的列表
	public void OnClickSave(MouseEventArgs e)
	{
		datee = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataset1 = new DataSet();
		if (string.IsNullOrEmpty(bankName))
		{
			AlertService.Error("請選擇銀行");
			return;
		}
		if (string.IsNullOrEmpty(city))
		{
			AlertService.Error("請選擇地區");
			return;
		}
		if (string.IsNullOrEmpty(branch))
		{
			AlertService.Error("請選擇分行");
			return;
		}
		if (string.IsNullOrEmpty(InitialAccount))
		{
			AlertService.Error("請填寫銀行帳號");
			return;
		}
		m_AccountRepairS = ServerData.m_AccountRepairS.ToArray();
		for (int i = 0; i < m_AccountRepairS.Length; i++)
		{
			if (m_AccountRepairS[i].baccountNo == InitialAccount)
			{
				AlertService.Error("該帳戶已存在");
				return;
			}
		}

		//Insert Into dbo.NewAccountRepair 
		string SQLString = "INSERT INTO dbo.NewAccountRepair ([accountBank],[accountBankNo],[accountBranch], [accountBranchNo], [accountNo], [accountAddress],[accountInitialMoney],[accountInsert],[accountUpdate]) VALUES (	@bankName,@bankCode,@branchName,@branchCode,@InitialAccount,@BankAddress,@InitialMoney,@accountInsert,@accountUpdate)";
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			//kkk += $"銀行{bankName}銀行代號{bankCode}分行{branchName}分行代號{branchCode}帳號{InitialAccount}地址{BankAddress}";

			//@bankName,@bankCode,@branchName,@branchCode,@InitialAccount,@BankAddress
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
			sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
			sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代馬
			sqlcommand.Parameters.AddWithValue("@branchName", branchName);//分行
			sqlcommand.Parameters.AddWithValue("@branchCode", branchCode);//分行代碼
			sqlcommand.Parameters.AddWithValue("@InitialAccount", InitialAccount);//帳戶
			sqlcommand.Parameters.AddWithValue("@BankAddress", BankAddress);//地址
			sqlcommand.Parameters.AddWithValue("@InitialMoney", (object)InitialMoney ?? 0);//期初金額
			sqlcommand.Parameters.AddWithValue("@accountInsert", datee);//加入時間
			sqlcommand.Parameters.AddWithValue("@accountUpdate", datee);//更新時間
			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)
			{
				AlertService.Success($"成功新增{rowsAffected}條");
				DataVersionService.IncrementDataVersion();
				kkk += DataVersionService.DataVersion.ToString();
				// 清空輸入字段

				InitialAccount = string.Empty;
				BankAddress = string.Empty;
				bankCode = string.Empty;
				branchCode = string.Empty;
				remark = string.Empty;
				showTable_save = false;
				showTable_select = false;
				showTable_selectall = false;
				showTable_selectpart = false;
			}
			else
			{
				AlertService.Error("更新失敗");
			}
			SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
			sqlTransaction.Commit();
		}


	}
	public bool showTable_select = false;
	public bool showTable_save = false;
	public bool showTable_selectall = false;
	public bool showTable_selectpart = false;
	public void OnClickAdd(MouseEventArgs e)
	{
		showTable_save = true;
		showTable_selectall = false;
		showTable_selectpart = false;
		showTable_select = false;
	}

	public void OnClickSelect_All(MouseEventArgs e)
	{
		showTable_select = true;
		showTable_save = false;
		showTable_selectall = true;
		showTable_selectpart = false;
		try
		{
			// 判斷資料庫是否有變動
			if (DataVersionService.DataVersion != 1)
			{
				m_AccountRepairS = Array.Empty<AccountRepair>();
				AccountRepair[] updatedData = UpdateAccountRepairALL();
				m_AccountRepairS = updatedData.ToArray();
			}
			else
			{
				//UpdateNewData();
				if (m_AccountRepairS == null)
				{
					m_AccountRepairS = ServerData.m_AccountRepairS.ToArray();
				}
				else
				{
					m_AccountRepairS = Array.Empty<AccountRepair>();
					m_AccountRepairS = ServerData.m_AccountRepairS.ToArray();
				}
			}
		}
		catch (Exception msg)
		{
			kkk = msg.Message;
		}
		AlertService.Success($"總共查詢到{m_AccountRepairS.Count()}筆資料");
		if (m_AccountRepairS == null)
		{
			AlertService.Warn("尚無資料");
		}

	}

	public DataSet dataset = new DataSet();
	public void UpdateNewDataALL()
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<AccountRepair> newList = m_AccountRepairS.ToList();
		// 新資料列表
		List<AccountRepair> newDataList = GetAccountRepair();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_AccountRepairS = newList.ToArray();
	}

	public List<AccountRepair> GetAccountRepair()//再次抓取資料
	{
		List<AccountRepair> newDataList = new List<AccountRepair>();
		//SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		string SQLString = "SELECT * FROM NewAccountRepair ";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				try
				{
					connection.Open();

					using (SqlDataReader reader = command.ExecuteReader())
					{
						while (reader.Read())
						{
							AccountRepair newData = new AccountRepair
								{
									// 這裡的屬性賦值根據您的資料表結構進行調整
									baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
									baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
									baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
									baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
									baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
									baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
									baccountInitialMoney = reader.IsDBNull(reader.GetOrdinal("accountInitialMoney")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountInitialMoney")),
									bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
									baccountInsert = reader.IsDBNull(reader.GetOrdinal("accountInsert")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountInsert")),
									baccountUpdate = reader.IsDBNull(reader.GetOrdinal("accountUpdate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountUpdate")),

									// 其他屬性...
								};
							newDataList.Add(newData);
						}
					}
				}
				catch (Exception ex)
				{
					kkk += ex.Message;
				}
			}
		}
		return newDataList;
	}

	public DataSet dataset1 = new DataSet();
	public void OnClickDel(int index)
	{
		if (index >= 0 && index < m_AccountRepairS.Length)
		{
			// 1. 在資料庫中刪除資料
			string SQLString = "DELETE FROM dbo.NewAccountRepair WHERE [accountInsert] = @accountInsert AND [accountBankNo] = @bank AND [accountNo] =@accountNo  ";
			SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
			dataset1 = new DataSet();

			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountInsert", m_AccountRepairS[index].baccountInsert);
				sqlcommand.Parameters.AddWithValue("@bank", m_AccountRepairS[index].baccountBankNo);
				sqlcommand.Parameters.AddWithValue("@accountNo", m_AccountRepairS[index].baccountNo);
				try
				{
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Info($"成功刪除{rowsAffected}條");
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Warn($"刪除失敗 ");
					}
				}
				catch (Exception ex)
				{
					kkk = ex.Message;
				}
				finally
				{
					sqlconnection.Close();
				}
			}
			// 2. 在本地資料結構中刪除資料
			List<AccountRepair> newDataList = m_AccountRepairS.ToList();
			//要在newDataList.RemoveAt(index)存取accountno2,bankno2,accountinsert2
			//因為這是要存取被刪除資料的帳號、銀行、加入時間
			string accountno2 = m_AccountRepairS[index].baccountNo;
			string bankno2 = m_AccountRepairS[index].baccountBankNo;
			DateTime accountinsert2 = m_AccountRepairS[index].baccountInsert;
			//網頁上刪除該資料
			newDataList.RemoveAt(index);
			//m_NewAccountS變成新的(已刪除掉那筆資料ㄌ)
			m_AccountRepairS = newDataList.ToArray();
			//3.更新資料庫的總額
		}
	}
	public void OnClickSelect(MouseEventArgs e)
	{
		showTable_select = true;
		showTable_selectall = false;
		showTable_save = false;
		showTable_selectpart = true;
		bool bError = false;
		if (string.IsNullOrWhiteSpace(bank))
		{
			bError = true;
			AlertService.Error("請選擇銀行");
		}

		if (bError)
		{
			m_AccountRepairS = null;
			return;
		}
		try
		{
			// 判斷資料庫是否有變動
			if (DataVersionService.DataVersion != 1)
			{
				m_AccountRepairS = Array.Empty<AccountRepair>();
				AccountRepair[] updatedData = UpdateAccountRepairALL();
				m_AccountRepairS = updatedData.Where(item => item.baccountBankNo == bankCode)
																.GroupBy(item => new { item.baccountBank, item.baccountNo })
																.SelectMany(group => group.OrderBy(item => item.baccountInsert))
																.ToArray();
				//m_AccountRepairS.ToArray();
				kkk += "hello";
				showTable_selectpart = false;

			}
			else
			{
				if (m_AccountRepairS == null)
				{
					m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountBankNo == bankCode)
																.GroupBy(item => new { item.baccountBank, item.baccountNo })
																.SelectMany(group => group.OrderBy(item => item.baccountInsert))
																.ToArray();
					kkk += "nono";
				}
				else
				{
					m_AccountRepairS = Array.Empty<AccountRepair>();
					//m_AccountRepairS = ServerData.m_AccountRepairS.ToArray();
					m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountBankNo == bankCode)
																.GroupBy(item => new { item.baccountBank, item.baccountNo })
																.SelectMany(group => group.OrderBy(item => item.baccountInsert))
																.ToArray();
					kkk += "peace";
				}
			}
		}
		catch (Exception msg)
		{
			kkk = msg.Message;
		}
		AlertService.Success($"總共查詢到{m_AccountRepairS.Count()}筆資料");
		if (m_AccountRepairS == null)
		{
			AlertService.Warn("尚無資料");
		}
	}

	public void UpdateNewDataPart()
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<AccountRepair> newList = m_AccountRepairS.ToList();
		// 新資料列表
		List<AccountRepair> newDataList = GetAccountRepair();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_AccountRepairS = newList.Where(item => item.baccountBankNo == bankCode)
		.GroupBy(item => new { item.baccountBank, item.baccountNo })
		.SelectMany(group => group)
		.ToArray();
	}

	public AccountRepair[] UpdateAccountRepairALL()
	//專門給選擇銀行後跳出對應帳戶用的更新資料(有時候可能會先使用銀行維護去新增資料，這時候就要用他嚕)
	{
		// 新資料列表
		List<AccountRepair> newDataList = GetAccountRepair();
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_AccountRepairS = newDataList.ToArray();
		kkk += "hello";
		return m_AccountRepairS;

	}
	public void OnClickCancel(MouseEventArgs e)
	{
		showTable_save = false;
		showTable_select = false;
		showTable_selectall = false;
		showTable_selectpart = false;
	}
	public void UpdateNewDataPart2()
	{
		List<AccountRepair> newList = m_AccountRepairS != null ? m_AccountRepairS.ToList() : new List<AccountRepair>();
		List<AccountRepair> newDataList = GetAccountRepair();
		newDataList = newDataList.Except(newList).ToList();
		newList.AddRange(newDataList);
		m_AccountRepairS = newList.Where(item => item.baccountBankNo == bankCode)
								.GroupBy(item => new { item.baccountBank, item.baccountNo })
								.SelectMany(group => group)
								.ToArray();
		kkk += "hello";
	}

}




