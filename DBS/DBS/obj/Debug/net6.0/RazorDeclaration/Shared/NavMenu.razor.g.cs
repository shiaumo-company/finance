// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace DBS.Shared
{
    #line hidden
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\_Imports.razor"
using DBS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\_Imports.razor"
using DBS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\Shared\NavMenu.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\Shared\NavMenu.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\Shared\NavMenu.razor"
using System.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\Shared\NavMenu.razor"
using DBS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\Shared\NavMenu.razor"
using DBS.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\Shared\NavMenu.razor"
using DBS.Services;

#line default
#line hidden
#nullable disable
    public partial class NavMenu : LayoutComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 235 "C:\Users\013590\source\repos\DBS\DBS_240313_2\DBS\DBS\Shared\NavMenu.razor"
       
    bool _drawerOpen = true;
    public void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    string kkk = "";

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private bool isSubMenuOpen = false;

    private void ToggleSubMenu()
    {
        isSubMenuOpen = !isSubMenuOpen;
    }

    private bool isToggleRepair = false;
    private void Togglerepair()
    {
        isToggleRepair = !isToggleRepair;
    }

    private bool isToggle = false;
    private bool isInsert = false;
    private bool isSelect = false;
    private void Toggletoggle()
    {
        isToggle = !isToggle;
        isInsert = false;
        isSelect = false;
        if (!isToggle)
        {
            showclick = false; // 收起新增、查詢資料時同時收起查詢資料
            isSelect2 = false; // 收起新增、查詢資料時同時收起查詢資料
        }

    }
    private void ToggleInsert()
    {
        isToggle = true;
        isInsert = !isInsert;
        isSelect = false;

    }
    private bool isSelect2 = false;
    private void ToggleSelect()
    {
        isToggle = true;
        isInsert = false;
        isSelect = !isSelect;
        isSelect2 = !isSelect2;

    }

    private bool showSummaryBank_Daily = false;
    private void ToggleSummaryBank()
    {
        // 切換 bank 的點選狀態
        showSummaryBank_Daily = !showSummaryBank_Daily;//true->跳出銀行
        showSummaryBank = !showSummaryBank;
        if (showclick)
        {
            showclick = !showclick;
        }


        kkk += $"showsummarybank_Daily{showSummaryBank_Daily}showclick{showclick}";

    }
    private bool showSummaryBank = true;
    private bool showSummaryBank_Month = false;

    string yyy = "";
    private bool showclick = false;
    string selectedBankCode = "";
    private bool showSummaryAccount = false;
    private string subBank = "";
    private bool showunique = false;
    private void NavigateToSubBank(string bankCode)
    {
        showSummaryAccount = !showSummaryAccount;
        showunique = !showunique;
        showunique2 = !showunique2;
        isSelect = !isSelect;

        // 使用 Blazor 導航服務導航到指定 URL
        NavigationManager.NavigateTo($"/dailybankselect/{bankCode}");
        selectedBankCode = bankCode;
        kkk += ($"導航到 /dailybanksummary/{bankCode.Substring(0, 3)}");
        kkk += bankCode;

        kkk += "hello";
        showSummaryBank_Daily = !showSummaryBank_Daily;
        showclick = !showclick;
    }

    private string subAccount = "";
    string selectedAccountCode = "";
    private string subBank2 = "";
    private bool showunique2 = false;
    private bool showunique2_month = false;
    private void NavigateToSubAccount(string bankName, string bankCode, string AccountCode)
    {
        // 重置页面状态
        subBank2 = bankName + bankCode;
        showSummaryAccount = !showSummaryAccount;//true->帳戶跑出來
                                                 // 使用 Blazor 導航服務導航到指定 URL
        NavigationManager.NavigateTo($"/dailyaccountselect/{subBank2}/{AccountCode}");
        selectedAccountCode = AccountCode;
        kkk += ($"導航到 /dailyaccountselect/{AccountCode}");
    }



    public DataSet dataset = new DataSet();
    public NewAccount[] m_NewAccountS;//帳戶維護的列表
    public AccountRepair[] m_AccountRepairS;//帳戶維護的列表
    public AccountRepair[] UpdateAccountRepairALL()
    //專門給選擇銀行後跳出對應帳戶用的更新資料(有時候可能會先使用銀行維護去新增資料，這時候就要用他嚕)
    {
        // 將 NewAccount[] 陣列轉換為 List<NewAccount>
        List<AccountRepair> newList = ServerData.m_AccountRepairS.ToList();
        // 新資料列表
        List<AccountRepair> newDataList = GetAccountRepair();
        // 使用 LINQ 的 Except 方法排除已經存在的資料
        newDataList = newDataList.Except(newList).ToList();
        // 使用 AddRange 將新資料列表添加到現有的列表中
        newList.AddRange(newDataList);
        // 將結果轉換回陣列
        // 將新資料列表添加到現有的 m_NewAccountS 中
        m_AccountRepairS = newList.ToArray();
        return m_AccountRepairS;
    }
    public List<AccountRepair> GetAccountRepair()//再次抓取資料
    {
        List<AccountRepair> newDataList = new List<AccountRepair>();
        //SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
        string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
        string SQLString = "SELECT * FROM NewAccountRepair ";
        dataset = new DataSet();
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            using (SqlCommand command = new SqlCommand(SQLString, connection))
            {
                try
                {
                    connection.Open();

                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            AccountRepair newData = new AccountRepair
                                {
                                    // 這裡的屬性賦值根據您的資料表結構進行調整
                                    baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
                                    baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
                                    baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
                                    baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
                                    baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
                                    baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
                                    baccountInitialMoney = reader.IsDBNull(reader.GetOrdinal("accountInitialMoney")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountInitialMoney")),
                                    bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
                                    baccountInsert = reader.IsDBNull(reader.GetOrdinal("accountInsert")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountInsert")),
                                    baccountUpdate = reader.IsDBNull(reader.GetOrdinal("accountUpdate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountUpdate")),

                                    // 其他屬性...
                                };
                            newDataList.Add(newData);
                        }
                    }
                }
                catch (Exception ex)
                {
                    kkk += ex.Message;
                }
            }
        }
        return newDataList;
    }
    public async void Update() => await InvokeAsync(() => { StateHasChanged(); });
    public void LogOut(MouseEventArgs e)
    {
        Update();
    }




#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DataVersionService DataVersionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAlertService AlertService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
