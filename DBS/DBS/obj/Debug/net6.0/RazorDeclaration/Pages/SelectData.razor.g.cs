// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace DBS.Pages
{
    #line hidden
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\013590\gitgit\finance\DBS\DBS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\013590\gitgit\finance\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\013590\gitgit\finance\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\013590\gitgit\finance\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\013590\gitgit\finance\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\013590\gitgit\finance\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\013590\gitgit\finance\DBS\DBS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\013590\gitgit\finance\DBS\DBS\_Imports.razor"
using DBS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\013590\gitgit\finance\DBS\DBS\_Imports.razor"
using DBS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\013590\gitgit\finance\DBS\DBS\Pages\SelectData.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\013590\gitgit\finance\DBS\DBS\Pages\SelectData.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\013590\gitgit\finance\DBS\DBS\Pages\SelectData.razor"
using System.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\013590\gitgit\finance\DBS\DBS\Pages\SelectData.razor"
using DBS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\013590\gitgit\finance\DBS\DBS\Pages\SelectData.razor"
using DBS.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\013590\gitgit\finance\DBS\DBS\Pages\SelectData.razor"
using DBS.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\013590\gitgit\finance\DBS\DBS\Pages\SelectData.razor"
using X.PagedList;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\013590\gitgit\finance\DBS\DBS\Pages\SelectData.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/SelectData")]
    public partial class SelectData : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 117 "C:\Users\013590\gitgit\finance\DBS\DBS\Pages\SelectData.razor"
       
	private NewAccount[] m_NewAccountS { get; set; }
	private AccountRepair[] m_AccountRepairS { get; set; }
	private IPagedList<NewAccount> PagedList { get; set; }
	private const int PageSize = 9;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		OnClickSelect_All(); // 在頁面初始化時自動調用 onclickselect_all 方法
		LoadPage(1);
	}
	private void LoadPage(int pageNumber)
	{
		PagedList = m_NewAccountS.ToPagedList(pageNumber, PageSize);
	}

	private void HandlePageChange(int newPageNumber)
	{
		LoadPage(newPageNumber);
	}

	string kkk = "";
	public void OnClickSelect_All()
	{
		try
		{
			// 判斷資料庫是否有變動
			if (DataVersionService.DataVersion != 1)
			{
				m_NewAccountS = Array.Empty<NewAccount>();
				NewAccount[] updatedData = UpdateNewDataALL2();
				m_NewAccountS = updatedData.GroupBy(item => item.baccountNo) // 按帳號分組
				.Select(group => group.OrderBy(item => item.baccountBank)
							.ThenBy(item => item.baccountNo)
							.ThenBy(item => item.baccountDate)
							.ThenBy(item => item.baccountInsert))
				.SelectMany(sortedGroup => sortedGroup).ToArray();
				LoadPage(1);

			}
			else
			{
				if (m_NewAccountS == null)
				{
					m_NewAccountS = ServerData.m_NewAccountS.GroupBy(item => item.baccountNo) // 按帳號分組
					.Select(group => group.OrderBy(item => item.baccountBank)
											.ThenBy(item => item.baccountNo)
											.ThenBy(item => item.baccountDate)
											.ThenBy(item => item.baccountInsert))
					.SelectMany(sortedGroup => sortedGroup).ToArray();
					LoadPage(1);

				}
				else
				{
					m_NewAccountS = Array.Empty<NewAccount>();
					m_NewAccountS = ServerData.m_NewAccountS.GroupBy(item => item.baccountNo) // 按帳號分組
					.Select(group => group.OrderBy(item => item.baccountBank)
											.ThenBy(item => item.baccountNo)
											.ThenBy(item => item.baccountDate)
											.ThenBy(item => item.baccountInsert))
					.SelectMany(sortedGroup => sortedGroup).ToArray();
					LoadPage(1);

				}
			}
		}
		catch (Exception msg)
		{
			kkk = msg.Message;
		}
		AlertService.Success($"總共查詢到{m_NewAccountS.Count()}筆資料");
		if (m_NewAccountS == null)
		{
			AlertService.Warn("尚無資料");
		}
	}

	public NewAccount[] UpdateNewDataALL2()
	{
		// 新資料列表
		List<NewAccount> newDataList = GetNewData();
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newDataList.ToArray();
		return m_NewAccountS;
	}

	public DataSet dataset = new DataSet();
	public List<NewAccount> GetNewData()//再次抓取資料
	{
		List<NewAccount> newDataList = new List<NewAccount>();
		//SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		string SQLString = "SELECT ROW_NUMBER() OVER (PARTITION　BY accountBank, accountNo ORDER BY  accountDate ASC )  , * FROM NewAccountInfo; ";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				connection.Open();
				using (SqlDataReader reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						NewAccount newData = new NewAccount
							{
								// 這裡的屬性賦值根據您的資料表結構進行調整
								baccountDate = reader.GetDateTime(reader.GetOrdinal("accountDate")),
								baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
								baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
								baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
								baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
								baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
								baccountType = reader.GetString(reader.GetOrdinal("accountType")),
								baccountIn = reader.IsDBNull(reader.GetOrdinal("accountIn")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountIn")),
								baccountOut = reader.IsDBNull(reader.GetOrdinal("accountOut")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountOut")),
								baccountTotal = reader.IsDBNull(reader.GetOrdinal("accountTotal")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountTotal")),
								baccountOtherNo = reader.GetString(reader.GetOrdinal("accountOtherNo")),
								baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
								bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
								baccountInsert = reader.GetDateTime(reader.GetOrdinal("accountInsert")),
								baccountUpdate = reader.IsDBNull(reader.GetOrdinal("accountUpdate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountUpdate")),
								// 其他屬性...
							};
						newDataList.Add(newData);
					}
				}
			}
			return newDataList;
		}
	}

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DataVersionService DataVersionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAlertService AlertService { get; set; }
    }
}
#pragma warning restore 1591
