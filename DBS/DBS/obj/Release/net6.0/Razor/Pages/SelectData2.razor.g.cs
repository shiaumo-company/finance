#pragma checksum "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor" "{8829d00f-11b8-4213-878b-770e8597ac16}" "94a34a25e7dc4e2820cce2952f09fac20e6b3c58d37c9ac87f6c5fd3ce495bd6"
// <auto-generated/>
#pragma warning disable 1591
namespace DBS.Pages
{
    #line hidden
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using DBS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\_Imports.razor"
using DBS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
using System.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
using DBS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
using DBS.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
using DBS.Services;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/selectdata2")]
    public partial class SelectData2 : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<h3 b-e86d5vzpmg>selectdata</h3>\r\n");
            __builder.OpenComponent<global::Microsoft.AspNetCore.Components.Authorization.AuthorizeView>(1);
            __builder.AddAttribute(2, "Authorized", (global::Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>)((context) => (__builder2) => {
                __builder2.AddMarkupContent(3, "<h2 style=\"margin-bottom:15px\" b-e86d5vzpmg>新增、修改、查詢</h2>\r\n\t\t");
                __builder2.OpenElement(4, "tr");
                __builder2.AddAttribute(5, "b-e86d5vzpmg");
#nullable restore
#line 16 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
    if (!isEdit)
			{

#line default
#line hidden
#nullable disable
                __builder2.AddMarkupContent(6, "<td b-e86d5vzpmg>開始日期</td>\r\n\t\t\t\t\t");
                __builder2.OpenElement(7, "input");
                __builder2.AddAttribute(8, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(9, "type", "date");
                __builder2.AddAttribute(10, "value", "");
                __builder2.AddAttribute(11, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 19 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                               BeginDateChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(12, "b-e86d5vzpmg");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(13, "\r\n\t\t\t\t\t");
                __builder2.AddMarkupContent(14, "<td b-e86d5vzpmg>結束日期</td>\r\n\t\t\t\t\t");
                __builder2.OpenElement(15, "input");
                __builder2.AddAttribute(16, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(17, "type", "date");
                __builder2.AddAttribute(18, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 21 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                      EndDateChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(19, "b-e86d5vzpmg");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(20, "\r\n\t\t\t\t\t\r\n\t\t\t\t\t");
                __builder2.AddMarkupContent(21, "<td b-e86d5vzpmg>銀行</td>\r\n\t\t\t\t\t");
                __builder2.OpenElement(22, "select");
                __builder2.AddAttribute(23, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(24, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 24 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                           BankChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(25, "b-e86d5vzpmg");
                __builder2.OpenElement(26, "option");
                __builder2.AddAttribute(27, "value");
                __builder2.AddAttribute(28, "disabled");
                __builder2.AddAttribute(29, "selected");
                __builder2.AddAttribute(30, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(31, "請選擇銀行");
                __builder2.CloseElement();
#nullable restore
#line 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
       foreach (var banks in BankData.GetBankList())
						{
						

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
       if (DataVersionService.DataVersion != 1)//如果有變更則要重新去資料庫抓資料，即時更新
						{
							AccountRepair[] updatedData = UpdateAccountRepairALL();
							var distinctRepairs = updatedData.Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3))
								.GroupBy(item => item.baccountNo)
								.Select(group => group.First())
								.ToArray();
							if (distinctRepairs.Any())
							{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(32, "option");
                __builder2.AddAttribute(33, "value", 
#nullable restore
#line 37 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                       banks.BankCode

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(34, "b-e86d5vzpmg");
#nullable restore
#line (37,41)-(37,55) 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(35, banks.BankName);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 38 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
							}
						}
						else
						{
							var distinctRepairs = ServerData.m_AccountRepairS.Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3))
										.GroupBy(item => item.baccountNo)
										.Select(group => group.First())
										.ToArray();
							if (distinctRepairs.Any())
							{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(36, "option");
                __builder2.AddAttribute(37, "value", 
#nullable restore
#line 48 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                       banks.BankCode

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(38, "b-e86d5vzpmg");
#nullable restore
#line (48,41)-(48,55) 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(39, banks.BankName);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 49 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
							}
						}

#line default
#line hidden
#nullable disable
#nullable restore
#line 50 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
       
						}

#line default
#line hidden
#nullable disable
                __builder2.AddMarkupContent(40, "\t\t\t\t\t}\r\n\t\t\t\t\t");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(41, "\r\n\t\t\t\t\t\r\n\t\t\t\t\t");
                __builder2.AddMarkupContent(42, "<td b-e86d5vzpmg>我的帳號</td>\r\n\t\t\t\t\t");
                __builder2.OpenElement(43, "select");
                __builder2.AddAttribute(44, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(45, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 56 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                           AccountChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(46, "b-e86d5vzpmg");
                __builder2.OpenElement(47, "option");
                __builder2.AddAttribute(48, "value");
                __builder2.AddAttribute(49, "selected");
                __builder2.AddAttribute(50, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(51, "請選擇帳號");
                __builder2.CloseElement();
#nullable restore
#line 58 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
      if (DataVersionService.DataVersion != 1)//如果有變更則要重新去資料庫抓資料，即時更新
					{
						AccountRepair[] updatedData = UpdateAccountRepairALL();
						

#line default
#line hidden
#nullable disable
#nullable restore
#line 61 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
       foreach (var account in updatedData.Where(item => item.baccountBankNo == @bankCode)
															.GroupBy(item => new { item.baccountNo })
															.Select(group => group.First())
															.ToArray())
						{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(52, "option");
                __builder2.AddAttribute(53, "value", 
#nullable restore
#line 66 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                         account.baccountNo

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(54, "b-e86d5vzpmg");
#nullable restore
#line (66,48)-(66,66) 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(55, account.baccountNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 67 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
						}

#line default
#line hidden
#nullable disable
#nullable restore
#line 67 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
       
					}
					else
					{
						if (m_AccountRepairS == null)
						{
							m_AccountRepairS = ServerData.m_AccountRepairS.ToArray();
							

#line default
#line hidden
#nullable disable
#nullable restore
#line 74 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
        foreach (var account in m_AccountRepairS.Where(item => item.baccountBankNo == @bankCode)
																							.GroupBy(item => new { item.baccountNo })
																							.Select(group => group.First())
																							.ToArray())
							{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(56, "option");
                __builder2.AddAttribute(57, "value", 
#nullable restore
#line 79 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                           account.baccountNo

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(58, "b-e86d5vzpmg");
#nullable restore
#line (79,50)-(79,68) 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(59, account.baccountNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 80 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
							}

#line default
#line hidden
#nullable disable
#nullable restore
#line 80 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
        
						}
						else
						{
							m_AccountRepairS = Array.Empty<AccountRepair>();
							m_AccountRepairS = ServerData.m_AccountRepairS.ToArray();
							

#line default
#line hidden
#nullable disable
#nullable restore
#line 86 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
        foreach (var account in m_AccountRepairS.Where(item => item.baccountBankNo == @bankCode)
																							.GroupBy(item => new { item.baccountNo })
																							.Select(group => group.First())
																							.ToArray())
							{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(60, "option");
                __builder2.AddAttribute(61, "value", 
#nullable restore
#line 91 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                           account.baccountNo

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(62, "b-e86d5vzpmg");
#nullable restore
#line (91,50)-(91,68) 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(63, account.baccountNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 92 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
							}

#line default
#line hidden
#nullable disable
#nullable restore
#line 92 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
        
						}
					}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 96 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
			}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(64, "\r\n\t\t\t");
                __builder2.OpenElement(65, "tr");
                __builder2.AddAttribute(66, "b-e86d5vzpmg");
#nullable restore
#line 99 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
    if (isAdd)//新增
			{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(67, "tr");
                __builder2.AddAttribute(68, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(69, "<td style=\"height: 30px; width :100px;\" b-e86d5vzpmg>交易日期</td>\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(70, "td");
                __builder2.AddAttribute(71, "b-e86d5vzpmg");
                __builder2.OpenElement(72, "input");
                __builder2.AddAttribute(73, "style", "height: 30px; width :175px;");
                __builder2.AddAttribute(74, "type", "date");
                __builder2.AddAttribute(75, "value", "");
                __builder2.AddAttribute(76, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 104 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                                 EditDateChange 

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(77, "b-e86d5vzpmg");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(78, "\r\n\t\t\t\t\t");
                __builder2.OpenElement(79, "tr");
                __builder2.AddAttribute(80, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(81, "<td b-e86d5vzpmg>銀行</td>\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(82, "select");
                __builder2.AddAttribute(83, "style", "height: 30px; width :175px;");
                __builder2.AddAttribute(84, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 109 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                              BankChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(85, "b-e86d5vzpmg");
                __builder2.OpenElement(86, "option");
                __builder2.AddAttribute(87, "value");
                __builder2.AddAttribute(88, "disabled");
                __builder2.AddAttribute(89, "selected");
                __builder2.AddAttribute(90, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(91, "請選擇銀行");
                __builder2.CloseElement();
#nullable restore
#line 111 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
       foreach (var banks in BankData.GetBankList())
						{
							

#line default
#line hidden
#nullable disable
#nullable restore
#line 113 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
        if (DataVersionService.DataVersion != 1)//如果有變更則要重新去資料庫抓資料，即時更新
							{
								AccountRepair[] updatedData = UpdateAccountRepairALL();
								var distinctRepairs = updatedData.Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3))
									.GroupBy(item => item.baccountNo)
									.Select(group => group.First())
									.ToArray();
								if (distinctRepairs.Any())
								{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(92, "option");
                __builder2.AddAttribute(93, "value", 
#nullable restore
#line 122 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                           banks.BankCode

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(94, "b-e86d5vzpmg");
#nullable restore
#line (122,45)-(122,59) 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(95, banks.BankName);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 123 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
								}
							}
							else
							{
								var distinctRepairs = ServerData.m_AccountRepairS.Where(repairs => repairs.baccountBankNo == banks.BankCode.ToString().Substring(0, 3))
											.GroupBy(item => item.baccountNo)
											.Select(group => group.First())
											.ToArray();
								if (distinctRepairs.Any())
								{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(96, "option");
                __builder2.AddAttribute(97, "value", 
#nullable restore
#line 133 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                           banks.BankCode

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(98, "b-e86d5vzpmg");
#nullable restore
#line (133,45)-(133,59) 26 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(99, banks.BankName);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 134 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
								}
							}

#line default
#line hidden
#nullable disable
#nullable restore
#line 135 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
        
						}

#line default
#line hidden
#nullable disable
                __builder2.AddMarkupContent(100, "\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(101, "\r\n\t\t\t\t\t\t\t");
                __builder2.AddMarkupContent(102, "<td b-e86d5vzpmg>我的帳號</td>\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(103, "select");
                __builder2.AddAttribute(104, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(105, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 141 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                             AccountChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(106, "b-e86d5vzpmg");
                __builder2.OpenElement(107, "option");
                __builder2.AddAttribute(108, "value");
                __builder2.AddAttribute(109, "selected");
                __builder2.AddAttribute(110, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(111, "請選擇帳號");
                __builder2.CloseElement();
#nullable restore
#line 143 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
       if (DataVersionService.DataVersion != 1)
						{
							AccountRepair[] updatedData = UpdateAccountRepairALL();
							

#line default
#line hidden
#nullable disable
#nullable restore
#line 146 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
        foreach (var account in updatedData.Where(item => item.baccountBankNo == @bankCode)
																.GroupBy(item => new { item.baccountNo })
																.Select(group => group.First())
																.ToArray())
							{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(112, "option");
                __builder2.AddAttribute(113, "value", 
#nullable restore
#line 151 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                           account.baccountNo

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(114, "b-e86d5vzpmg");
#nullable restore
#line (151,50)-(151,68) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(115, account.baccountNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 152 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
							}

#line default
#line hidden
#nullable disable
#nullable restore
#line 152 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
        
						}
						else
						{
							if (m_AccountRepairS == null)
							{
								m_AccountRepairS = ServerData.m_AccountRepairS.ToArray();
								

#line default
#line hidden
#nullable disable
#nullable restore
#line 159 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
         foreach (var account in m_AccountRepairS.Where(item => item.baccountBankNo == @bankCode)
																										.GroupBy(item => new { item.baccountNo })
																										.Select(group => group.First())
																										.ToArray())
								{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(116, "option");
                __builder2.AddAttribute(117, "value", 
#nullable restore
#line 164 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                             account.baccountNo

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(118, "b-e86d5vzpmg");
#nullable restore
#line (164,52)-(164,70) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(119, account.baccountNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 165 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
								}

#line default
#line hidden
#nullable disable
#nullable restore
#line 165 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
         
							}
							else
							{
								m_AccountRepairS = Array.Empty<AccountRepair>();
								m_AccountRepairS = ServerData.m_AccountRepairS.ToArray();
								

#line default
#line hidden
#nullable disable
#nullable restore
#line 171 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
         foreach (var account in m_AccountRepairS.Where(item => item.baccountBankNo == @bankCode)
																								.GroupBy(item => new { item.baccountNo })
																								.Select(group => group.First())
																								.ToArray())
								{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(120, "option");
                __builder2.AddAttribute(121, "value", 
#nullable restore
#line 176 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                             account.baccountNo

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(122, "b-e86d5vzpmg");
#nullable restore
#line (176,52)-(176,70) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(123, account.baccountNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 177 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
								}

#line default
#line hidden
#nullable disable
#nullable restore
#line 177 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
         
							}
						}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(124, "\r\n\t\t\t\t\t\t\t");
                __builder2.AddMarkupContent(125, "<td b-e86d5vzpmg>付款方式</td>\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(126, "td");
                __builder2.AddAttribute(127, "b-e86d5vzpmg");
                __builder2.OpenElement(128, "select");
                __builder2.AddAttribute(129, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(130, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 183 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                              MoneyChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(131, "b-e86d5vzpmg");
                __builder2.OpenElement(132, "option");
                __builder2.AddAttribute(133, "value");
                __builder2.AddAttribute(134, "disabled");
                __builder2.AddAttribute(135, "selected");
                __builder2.AddAttribute(136, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(137, "請選擇方式");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(138, "\r\n\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(139, "option");
                __builder2.AddAttribute(140, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(141, "現金");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(142, "\r\n\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(143, "option");
                __builder2.AddAttribute(144, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(145, "支票");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(146, "\r\n\t\t\t\t\t\t\t");
                __builder2.AddMarkupContent(147, "<td b-e86d5vzpmg>備註</td>\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(148, "td");
                __builder2.AddAttribute(149, "b-e86d5vzpmg");
                __builder2.OpenElement(150, "input");
                __builder2.AddAttribute(151, "style", "height:30px; width:175px;");
                __builder2.AddAttribute(152, "id", "remark");
                __builder2.AddAttribute(153, "type", "text");
                __builder2.AddAttribute(154, "asp-for", "remark");
                __builder2.AddAttribute(155, "placeholder", "備註");
                __builder2.AddAttribute(156, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 191 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                                                 remark

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(157, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => remark = __value, remark));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.AddAttribute(158, "b-e86d5vzpmg");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(159, "\r\n\t\t\t\t\t\t");
                __builder2.OpenElement(160, "tr");
                __builder2.AddAttribute(161, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(162, "<td b-e86d5vzpmg>收入</td>\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(163, "td");
                __builder2.AddAttribute(164, "b-e86d5vzpmg");
                __builder2.OpenElement(165, "input");
                __builder2.AddAttribute(166, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(167, "id", "accountIn");
                __builder2.AddAttribute(168, "type", "text");
                __builder2.AddAttribute(169, "asp-for", "accountIn");
                __builder2.AddAttribute(170, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 197 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                                                        accountIn

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(171, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => accountIn = __value, accountIn));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.AddAttribute(172, "b-e86d5vzpmg");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(173, "\r\n\t\t\t\t\t\t\t");
                __builder2.AddMarkupContent(174, "<td b-e86d5vzpmg>支出</td>\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(175, "td");
                __builder2.AddAttribute(176, "b-e86d5vzpmg");
                __builder2.OpenElement(177, "input");
                __builder2.AddAttribute(178, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(179, "id", "accountOut");
                __builder2.AddAttribute(180, "type", "text");
                __builder2.AddAttribute(181, "asp-for", "accountOut");
                __builder2.AddAttribute(182, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 201 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                                                          accountOut

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(183, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => accountOut = __value, accountOut));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.AddAttribute(184, "b-e86d5vzpmg");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(185, "\r\n\r\n\t\t\t\t\t\t\t");
                __builder2.AddMarkupContent(186, "<td b-e86d5vzpmg>對方帳號</td>\r\n\t\t\t\t\t\t\t");
                __builder2.OpenElement(187, "td");
                __builder2.AddAttribute(188, "b-e86d5vzpmg");
                __builder2.OpenElement(189, "input");
                __builder2.AddAttribute(190, "style", "height: 30px;width :175px;");
                __builder2.AddAttribute(191, "id", "accountOtherNo");
                __builder2.AddAttribute(192, "type", "text");
                __builder2.AddAttribute(193, "asp-for", "accountOtherNo");
                __builder2.AddAttribute(194, "placeholder", "對方帳號");
                __builder2.AddAttribute(195, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 206 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                                                                  accountOtherNo

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(196, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => accountOtherNo = __value, accountOtherNo));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.AddAttribute(197, "b-e86d5vzpmg");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
#nullable restore
#line 209 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
			}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 211 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
   if (isAdd)
		{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(198, "td");
                __builder2.AddAttribute(199, "b-e86d5vzpmg");
                __builder2.OpenElement(200, "button");
                __builder2.AddAttribute(201, "id", "Update_btn");
                __builder2.AddAttribute(202, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 214 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                        OnClickAdd3

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(203, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(204, "確定新增");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(205, "\r\n\t\t\t\t\t");
                __builder2.OpenElement(206, "td");
                __builder2.AddAttribute(207, "b-e86d5vzpmg");
                __builder2.OpenElement(208, "button");
                __builder2.AddAttribute(209, "id", "Update_btn");
                __builder2.AddAttribute(210, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 217 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                        OnClicCancel2

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(211, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(212, "取消");
                __builder2.CloseElement();
                __builder2.CloseElement();
#nullable restore
#line 219 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
		}
		else if(isEdit)
		{
			
		}
		else

		{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(213, "tr");
                __builder2.AddAttribute(214, "b-e86d5vzpmg");
                __builder2.OpenElement(215, "td");
                __builder2.AddAttribute(216, "b-e86d5vzpmg");
                __builder2.OpenElement(217, "button");
                __builder2.AddAttribute(218, "style", "height: 30px;width :50px;");
                __builder2.AddAttribute(219, "id", "Select_btn");
                __builder2.AddAttribute(220, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 229 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                        OnClickSelect

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(221, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(222, "查詢");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(223, "\r\n\t\t\t\t");
                __builder2.OpenElement(224, "td");
                __builder2.AddAttribute(225, "b-e86d5vzpmg");
                __builder2.OpenElement(226, "button");
                __builder2.AddAttribute(227, "style", "height: 30px;width :100px;");
                __builder2.AddAttribute(228, "id", "Select_btn");
                __builder2.AddAttribute(229, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 232 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                          OnClickSelect_All

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(230, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(231, "查詢全部");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(232, "\r\n\t\t\t");
                __builder2.OpenElement(233, "tr");
                __builder2.AddAttribute(234, "b-e86d5vzpmg");
                __builder2.OpenElement(235, "td");
                __builder2.AddAttribute(236, "b-e86d5vzpmg");
                __builder2.OpenElement(237, "button");
                __builder2.AddAttribute(238, "id", "Update_btn");
                __builder2.AddAttribute(239, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 237 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                        OnClickAdd

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(240, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(241, "新增");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
#nullable restore
#line 241 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
		}

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(242, "table");
                __builder2.AddAttribute(243, "class", "table");
                __builder2.AddAttribute(244, "style", "text-align:right; margin-top:20px;");
                __builder2.AddAttribute(245, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(246, @"<thead b-e86d5vzpmg><tr b-e86d5vzpmg><th style=""text-align:center"" b-e86d5vzpmg>操作</th>
					<th style=""text-align:center"" b-e86d5vzpmg>交易日期</th>
					<th b-e86d5vzpmg>帳號代碼</th>
					<th b-e86d5vzpmg>我的帳號</th>
					<th b-e86d5vzpmg>方式</th>
					<th b-e86d5vzpmg>收入</th>
					<th b-e86d5vzpmg>支出</th>
					<th b-e86d5vzpmg>結存餘額</th>
					<th b-e86d5vzpmg>對方行帳號</th>
					<th b-e86d5vzpmg>備註</th></tr></thead>
			");
                __builder2.OpenElement(247, "tbody");
                __builder2.AddAttribute(248, "b-e86d5vzpmg");
#nullable restore
#line 259 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
     if (m_NewAccountS != null)
				{
					

#line default
#line hidden
#nullable disable
#nullable restore
#line 261 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
      foreach (var (account, i) in m_NewAccountS.Select((account, i) => (account, i)))
					{
						var isEditing = editStates.ContainsKey(i) && editStates[i];

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(249, "tr");
                __builder2.AddAttribute(250, "b-e86d5vzpmg");
#nullable restore
#line 265 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
        if (isEditing )
							{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(251, "td");
                __builder2.AddAttribute(252, "b-e86d5vzpmg");
                __builder2.OpenElement(253, "button");
                __builder2.AddAttribute(254, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 268 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                            () => OnClickSave3(i,account.baccountDate,account.baccountBankNo,account.baccountNo)

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(255, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(256, "儲存");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(257, "\r\n\t\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(258, "button");
                __builder2.AddAttribute(259, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 269 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                           () => OnClickCancel(i)

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(260, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(261, "取消");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(262, "\t\t\r\n\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(263, "td");
                __builder2.AddAttribute(264, "style", "text-align:center");
                __builder2.AddAttribute(265, "b-e86d5vzpmg");
#nullable restore
#line (271,40)-(271,80) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(266, account.baccountDate.ToShortDateString());

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(267, "\r\n\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(268, "td");
                __builder2.AddAttribute(269, "b-e86d5vzpmg");
#nullable restore
#line (272,14)-(272,36) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(270, account.baccountBankNo);

#line default
#line hidden
#nullable disable
                __builder2.AddContent(271, " ");
#nullable restore
#line (272,38)-(272,58) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(272, account.baccountBank);

#line default
#line hidden
#nullable disable
                __builder2.AddMarkupContent(273, "<br b-e86d5vzpmg>");
#nullable restore
#line 273 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
          foreach (var repair in ServerData.m_AccountRepairS.Where(r => r.baccountNo == account.baccountNo))
									{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(274, "span");
                __builder2.AddAttribute(275, "b-e86d5vzpmg");
#nullable restore
#line (275,18)-(275,41) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(276, repair.baccountBranchNo);

#line default
#line hidden
#nullable disable
                __builder2.AddContent(277, " ");
#nullable restore
#line (275,43)-(275,64) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(278, repair.baccountBranch);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(279, "<br b-e86d5vzpmg>");
#nullable restore
#line 276 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
									}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(280, "\r\n\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(281, "td");
                __builder2.AddAttribute(282, "b-e86d5vzpmg");
#nullable restore
#line (278,14)-(278,32) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(283, account.baccountNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(284, "\r\n\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(285, "td");
                __builder2.AddAttribute(286, "b-e86d5vzpmg");
                __builder2.OpenElement(287, "select");
                __builder2.AddAttribute(288, "style", "height: 30px;width :165px;");
                __builder2.AddAttribute(289, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 280 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                              MoneyChange

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(290, "b-e86d5vzpmg");
                __builder2.OpenElement(291, "option");
                __builder2.AddAttribute(292, "value");
                __builder2.AddAttribute(293, "disabled");
                __builder2.AddAttribute(294, "selected");
                __builder2.AddAttribute(295, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(296, "請選擇方式");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(297, "\r\n\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(298, "option");
                __builder2.AddAttribute(299, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(300, "現金");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(301, "\r\n\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(302, "option");
                __builder2.AddAttribute(303, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(304, "支票");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(305, "\r\n\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(306, "td");
                __builder2.AddAttribute(307, "b-e86d5vzpmg");
                __builder2.OpenElement(308, "input");
                __builder2.AddAttribute(309, "style", "height: 30px;width :165px;");
                __builder2.AddAttribute(310, "id", "accountIn");
                __builder2.AddAttribute(311, "type", "text");
                __builder2.AddAttribute(312, "asp-for", "accountIn");
                __builder2.AddAttribute(313, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 287 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                                                         accountIn

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(314, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => accountIn = __value, accountIn));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.AddAttribute(315, "b-e86d5vzpmg");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(316, "\r\n\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(317, "td");
                __builder2.AddAttribute(318, "b-e86d5vzpmg");
                __builder2.OpenElement(319, "input");
                __builder2.AddAttribute(320, "style", "height: 30px;width :165px;");
                __builder2.AddAttribute(321, "id", "accountOut");
                __builder2.AddAttribute(322, "type", "text");
                __builder2.AddAttribute(323, "asp-for", "accountOut");
                __builder2.AddAttribute(324, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 290 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                                                           accountOut

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(325, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => accountOut = __value, accountOut));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.AddAttribute(326, "b-e86d5vzpmg");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(327, "\r\n\t\t\t\t\t\t\t\t");
                __builder2.AddMarkupContent(328, "<td b-e86d5vzpmg>對方帳號</td>\r\n\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(329, "td");
                __builder2.AddAttribute(330, "b-e86d5vzpmg");
                __builder2.OpenElement(331, "input");
                __builder2.AddAttribute(332, "style", "height: 30px;width :165px;");
                __builder2.AddAttribute(333, "id", "accountOtherNo");
                __builder2.AddAttribute(334, "type", "text");
                __builder2.AddAttribute(335, "asp-for", "accountOtherNo");
                __builder2.AddAttribute(336, "placeholder", 
#nullable restore
#line 294 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                                                                                                account.baccountOtherNo

#line default
#line hidden
#nullable disable
                );
                __builder2.AddAttribute(337, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 294 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                                                                   accountOtherNo

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(338, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => accountOtherNo = __value, accountOtherNo));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.AddAttribute(339, "b-e86d5vzpmg");
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(340, "\r\n\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(341, "td");
                __builder2.AddAttribute(342, "b-e86d5vzpmg");
                __builder2.OpenElement(343, "input");
                __builder2.AddAttribute(344, "style", "height:30px; width:165px;");
                __builder2.AddAttribute(345, "id", "remark");
                __builder2.AddAttribute(346, "type", "text");
                __builder2.AddAttribute(347, "asp-for", "remark");
                __builder2.AddAttribute(348, "placeholder", "備註");
                __builder2.AddAttribute(349, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 297 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                                                  remark

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(350, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => remark = __value, remark));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.AddAttribute(351, "b-e86d5vzpmg");
                __builder2.CloseElement();
                __builder2.CloseElement();
#nullable restore
#line 299 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
							}
							else
							{
								var areAllOthersNotEditing = true;
								for (int j = 0; j < m_NewAccountS.Length; j++)
								{
									if (j != i && (editStates.ContainsKey(j) && editStates[j]))
									{
										areAllOthersNotEditing = false;
										break;
									}
								}
								if (areAllOthersNotEditing)//非編輯
								{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(352, "td");
                __builder2.AddAttribute(353, "b-e86d5vzpmg");
                __builder2.OpenElement(354, "button");
                __builder2.AddAttribute(355, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 314 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                 () => OnClickEdit(i)

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(356, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(357, " 修改");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(358, "\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(359, "button");
                __builder2.AddAttribute(360, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 315 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                 () => OnClickDel3(i)

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(361, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(362, "刪除");
                __builder2.CloseElement();
                __builder2.CloseElement();
#nullable restore
#line 317 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
								}
								else
								{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(363, "button");
                __builder2.AddAttribute(364, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 320 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                () => OnClickEdit(i)

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(365, "disabled", (
#nullable restore
#line 320 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                 isEditing

#line default
#line hidden
#nullable disable
                ) + " &&" + " editingIndex" + " !=" + " index");
                __builder2.AddAttribute(366, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(367, " 修改");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(368, "\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(369, "button");
                __builder2.AddAttribute(370, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 321 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                () => OnClickDel3(i)

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddAttribute(371, "disabled", (
#nullable restore
#line 321 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
                                                                 isEditing

#line default
#line hidden
#nullable disable
                ) + " &&" + " editingIndex" + " !=" + " index");
                __builder2.AddAttribute(372, "b-e86d5vzpmg");
                __builder2.AddMarkupContent(373, "刪除");
                __builder2.CloseElement();
#nullable restore
#line 322 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
								}

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(374, "td");
                __builder2.AddAttribute(375, "style", "text-align:center");
                __builder2.AddAttribute(376, "b-e86d5vzpmg");
#nullable restore
#line (323,43)-(323,83) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(377, account.baccountDate.ToShortDateString());

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(378, "\r\n\t\t\t\t\t\t\t\t   ");
                __builder2.OpenElement(379, "td");
                __builder2.AddAttribute(380, "b-e86d5vzpmg");
#nullable restore
#line (324,17)-(324,39) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(381, account.baccountBankNo);

#line default
#line hidden
#nullable disable
                __builder2.AddContent(382, " ");
#nullable restore
#line (324,41)-(324,61) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(383, account.baccountBank);

#line default
#line hidden
#nullable disable
                __builder2.AddMarkupContent(384, "<br b-e86d5vzpmg>");
#nullable restore
#line 325 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
          foreach (var repair in ServerData.m_AccountRepairS.Where(r => r.baccountNo == account.baccountNo))
									{

#line default
#line hidden
#nullable disable
                __builder2.OpenElement(385, "span");
                __builder2.AddAttribute(386, "b-e86d5vzpmg");
#nullable restore
#line (327,18)-(327,41) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(387, repair.baccountBranchNo);

#line default
#line hidden
#nullable disable
                __builder2.AddContent(388, " ");
#nullable restore
#line (327,43)-(327,64) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(389, repair.baccountBranch);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(390, "<br b-e86d5vzpmg>");
#nullable restore
#line 328 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
									}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(391, "\t\r\n\t\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(392, "td");
                __builder2.AddAttribute(393, "b-e86d5vzpmg");
#nullable restore
#line (330,15)-(330,33) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(394, account.baccountNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(395, "\r\n\t\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(396, "td");
                __builder2.AddAttribute(397, "b-e86d5vzpmg");
#nullable restore
#line (331,15)-(331,35) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(398, account.baccountType);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(399, "\r\n\t\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(400, "td");
                __builder2.AddAttribute(401, "b-e86d5vzpmg");
#nullable restore
#line (332,15)-(332,33) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(402, account.baccountIn);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(403, "\r\n\t\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(404, "td");
                __builder2.AddAttribute(405, "b-e86d5vzpmg");
#nullable restore
#line (333,15)-(333,34) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(406, account.baccountOut);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(407, "\r\n\t\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(408, "td");
                __builder2.AddAttribute(409, "b-e86d5vzpmg");
#nullable restore
#line (334,15)-(334,36) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(410, account.baccountTotal);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(411, "\r\n\t\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(412, "td");
                __builder2.AddAttribute(413, "b-e86d5vzpmg");
#nullable restore
#line (335,15)-(335,38) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(414, account.baccountOtherNo);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(415, "\r\n\t\t\t\t\t\t\t\t\t");
                __builder2.OpenElement(416, "td");
                __builder2.AddAttribute(417, "b-e86d5vzpmg");
#nullable restore
#line (336,15)-(336,30) 27 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
__builder2.AddContent(418, account.bremark);

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 337 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
							}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
#nullable restore
#line 339 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
					}

#line default
#line hidden
#nullable disable
#nullable restore
#line 339 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
      
				}

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.CloseElement();
            }
            ));
            __builder.CloseComponent();
        }
        #pragma warning restore 1998
#nullable restore
#line 346 "C:\Users\013590\source\repos\DBS\DBS_240220_2_1\DBS\DBS\Pages\SelectData2.razor"
       
	public AccountRepair[] m_AccountRepairS;//帳戶維護的列表
	private string myAccount, bankName, bankCode, accountDate, accountBank, accountBankNo, accountNo, accountType, accountIn, accountOut, accountTotal, accountOtherNo, remark;
	public DataSet dataset = new DataSet();
	//確保有連接資料庫成功
	string resultMessage = "No connection attempt made yet.";
	SqlConnection connection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
	public void CheckDatabaseConnection()
	{
		if (connection.State == System.Data.ConnectionState.Closed)
		{
			connection.Open();
			resultMessage = "Connected to the database successfully!";
		}
		else if (connection.State == System.Data.ConnectionState.Open)
		{
			resultMessage = "Connection is already open.";
		}
	}
	string SQLString = "SELECT  *FROM NewAccountRepair WHERE 1=1";
	string resultuserpassword = "no connectin userpassword";
	//確定有連到正確的資料表
	public void CheckSQLConnection()
	{
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			try
			{
				// 檢查是否已連接
				if (connection.State == ConnectionState.Closed)
				{
					connection.Open();
					resultuserpassword = "Connected to userpassword!";
					// 創建 SqlCommand 對象
					using (SqlCommand command = new SqlCommand(SQLString, connection))
					{
						// 使用 ExecuteReader 执行 SQL 查询
						using (SqlDataReader reader = command.ExecuteReader())
						{
							Debug.LogShow($"SqlDataReader Row Count: {reader.HasRows}");
							// 判斷是否有行
							if (reader.HasRows)
							{
								resultuserpassword = " Data found in the User_Password table.";
							}
							else
							{
								resultuserpassword = " No data found in the User_Password table.";
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				resultuserpassword = ex.Message;
			}
		}
	}
	DateTime accountInsert;
	string money;
	public void MoneyChange(ChangeEventArgs e)
	{
		money = e.Value.ToString();
	}

	string bank;
	public void BankChange(ChangeEventArgs e)
	{
		bank = e.Value.ToString();
		bankName = e.Value.ToString().Substring(3);
		bankCode = e.Value.ToString().Substring(0, 3);
	}
	string bank2, bankName2, bankCode2;
	public void BankChangeOther(ChangeEventArgs e)
	{
		bank2 = e.Value.ToString();
		bankName2 = e.Value.ToString().Substring(3);
		bankCode2 = e.Value.ToString().Substring(0, 3);
	}
	string account;
	string previousAccount;// 新增變數用來存儲上一次的 account
	public void AccountChange(ChangeEventArgs e)
	{
		account = e.Value?.ToString();
	}
	DateTime beginDate;
	public void BeginDateChange(ChangeEventArgs e)
	{
		beginDate = Convert.ToDateTime(e.Value);
	}
	DateTime endDate;
	public void EndDateChange(ChangeEventArgs e)
	{
		endDate = Convert.ToDateTime(e.Value);
	}
	DateTime editDate;
	public void EditDateChange(ChangeEventArgs e)
	{
		editDate = Convert.ToDateTime(e.Value);
	}
	public class DataSharedVision
	{
		public static int dataVersion { get; set; } = 1;// 初始化一個版本號，可以是時間戳記或其他唯一識別號
	}
	public static int GetDataVersion()
	{
		return DataSharedVision.dataVersion;
	}

	public void OnClickSave3(int index, DateTime accounttDate, string accounttBankNo, string accountNo)
	{
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataset1 = new DataSet();
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData =UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == accountNo)//我的帳號
												.GroupBy(item => item.baccountNo)
												.Select(group => group.OrderBy(item => item.baccountDate))
												.SelectMany(sortedGroup => sortedGroup)
												.ToArray();
			if (string.IsNullOrEmpty(money))
			{
				AlertService.Error("請選擇付款方式");
				return;
			}
			if (string.IsNullOrEmpty(accountIn) && string.IsNullOrEmpty(accountOut))
			{
				AlertService.Error("請輸入收入或者支出");
				return;
			}
			if (string.IsNullOrEmpty(accountOtherNo))
			{
				AlertService.Error("請輸入對方帳號");
				return;
			}

			if (updatedData.Length == 1) //若該帳號只有一條
			{
				HandleArrayWithOneItemSelectOne(index);//更新當前這條
			}
			else //若該帳號大於2條
			{
				kkk += updatedData.Length;

				HandleArrayWithMoreThanOneItemSelectOne(index);//更新當前這條
			}
		}
		else
		{

			m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == accountNo)//我的帳號
											.Where(item => item.baccountBankNo == accounttBankNo)
											.ToArray();
			if (string.IsNullOrEmpty(money))
			{
				AlertService.Error("請選擇付款方式");
				return;
			}
			if (string.IsNullOrEmpty(accountIn) && string.IsNullOrEmpty(accountOut))
			{
				AlertService.Error("請輸入收入或者支出");
				return;
			}
			if (string.IsNullOrEmpty(accountOtherNo))
			{
				AlertService.Error("請輸入對方帳號");
				return;
			}

			if (m_NewAccountS.Length == 1) //若該帳號只有一條
			{
				HandleArrayWithOneItemSelectOne(index);//更新當前這條
			}
			else //若該帳號大於2條
			{
				HandleArrayWithMoreThanOneItemSelectOne(index);//更新當前這條
			}

			kkk += $"money:{money}收入{accountIn}支出{accountOut}";

		}
	}
	//保存
	public void UpdateHandleEmptyArray2(DateTime date, DateTime updateDate)//更新頁面//修改功能用DER
	{
		m_NewAccountS = Array.Empty<NewAccount>();
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<NewAccount> newList = m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetDataFromDatabase();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newList.Where(item => item.baccountInsert.ToString("yyyy/MM/dd HH:mm:ss") == date.ToString("yyyy/MM/dd HH:mm:ss"))
										.ToArray();
	}
	public void HandleArrayWithOneItemSelectOne(int index)//1
	{
		datee3 = DateTime.Now;
		datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//加入日期
		string SQLString = "UPDATE dbo.NewAccountInfo SET [accountType]=@accountType, [accountIn] = @accountIn, [accountOut]=@accountOut, [accountTotal] = @toto ,[accountOtherNo]=@accountOtherNo, [accountUpdate]=@accountUpdate WHERE [accountNo] =@accountNo AND [accountBankNo] =@bank AND [accountDate]= @accountdate ";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut;
		DateTime a;
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == editaccount)//我的帳號
													.GroupBy(item => item.baccountNo)
													.Select(group => group.OrderBy(item => item.baccountDate))
													.SelectMany(sortedGroup => sortedGroup)
													.ToArray();

			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
				sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
				sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
				sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
				sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
				sqlcommand.Parameters.AddWithValue("@accountNo", editaccount);//我的帳號
				sqlcommand.Parameters.AddWithValue("@bank", editbank);//銀行
				sqlcommand.Parameters.AddWithValue("@accountDate", datestring);//交易日期
				sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
				int rowsAffected = sqlcommand.ExecuteNonQuery();
				if (rowsAffected > 0)
				{
					AlertService.Success($"成功修改當前{rowsAffected}條");
					isEdit = false;
					DataVersionService.IncrementDataVersion();
					if (editStates.ContainsKey(index))
					{
						editStates[index] = !editStates[index];
					}
					accountIn=string.Empty;
					accountOut = string.Empty;
					accountOtherNo = string.Empty;
					remark = string.Empty;

				}
				else
				{
					AlertService.Error("修改失敗");
				}
			}
			for (int i = 0; i < updatedData.Length; i++)
			{
				a = updatedData[i].baccountInsert;
				UpdateHandleEmptyArray2(a, datee3);//更新頁面
			}
		}
		else
		{
			m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == editaccount)//我的帳號
													.GroupBy(item => item.baccountNo)
													.Select(group => group.OrderBy(item => item.baccountDate))
													.SelectMany(sortedGroup => sortedGroup)
													.ToArray();
			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
				sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
				sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
				sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
				sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
				sqlcommand.Parameters.AddWithValue("@accountNo", editaccount);//我的帳號
				sqlcommand.Parameters.AddWithValue("@bank", editbank);//銀行
				sqlcommand.Parameters.AddWithValue("@accountDate", datestring);//交易日期
				sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
				int rowsAffected = sqlcommand.ExecuteNonQuery();
				if (rowsAffected > 0)
				{
					AlertService.Success($"成功修改當前{rowsAffected}條");
					isEdit = false;
					DataVersionService.IncrementDataVersion();
					if (editStates.ContainsKey(index))
					{
						editStates[index] = !editStates[index];
					}
					accountIn = string.Empty;
					accountOut = string.Empty;
					accountOtherNo = string.Empty;
					remark = string.Empty;
				}
				else
				{
					AlertService.Error("修改失敗");
				}
			}
			for (int i = 0; i < m_NewAccountS.Length; i++)
			{
				a = m_NewAccountS[i].baccountInsert;
				UpdateHandleEmptyArray2(a, datee3);//更新頁面
			}
		}

	}

	DateTime accountUpdate2, accountUpdate;
	public void HandleArrayWithMoreThanOneItemSelectOne(int index)//>2修改當前
	{
		//datee3 = DateTime.Now;
		//datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//加入日期
		string SQLString = "UPDATE dbo.NewAccountInfo SET [accountType] = @accountType, [accountIn] = @accountIn, [accountOut] = @accountOut, [accountTotal] = @toto, [accountOtherNo] = @accountOtherNo, [accountUpdate] = CASE WHEN[accountUpdate] = @accountUpdate2 THEN @newUpdate ELSE[accountUpdate] END WHERE[accountNo] = @accountNo AND[accountBankNo] = @bank AND[accountDate] = @accountdate AND[accountInsert] = @accountInsert AND[accountUpdate] = @accountUpdate2; ";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		var latestRecord = m_NewAccountS[0];// 最舊
		var secondRecord = m_NewAccountS[1];//第二舊
		decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut;
		decimal toto1 = 0;

		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == editaccount)//我的帳號
							.Where(item => item.baccountBankNo == editbank)
							.GroupBy(item => item.baccountNo)
							.Select(group => group.OrderBy(item => item.baccountDate))
							.SelectMany(sortedGroup => sortedGroup)
							.ToArray();

			for (int i = 0; i < updatedData.Length; i++)
			{
				datee3 = DateTime.Now;
				datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//加入日期
				DateTime datee4 = updatedData[i].baccountInsert;
				if (i == 0 && updatedData[i].baccountDate.ToString("yyyy-MM-dd") == datestring)//最舊
				{
					accountInsert = updatedData[i].baccountInsert;
					accountUpdate2 = updatedData[i].baccountUpdate;
					toto1 = toto;
					if (sqlconnection.State == System.Data.ConnectionState.Closed)
					{
						sqlconnection.Open();
						SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
						sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
						sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
						sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
						sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
						sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
						sqlcommand.Parameters.AddWithValue("@accountNo", editaccount);//我的帳號
						sqlcommand.Parameters.AddWithValue("@bank", editbank);//銀行
						sqlcommand.Parameters.AddWithValue("@accountDate", datestring);//交易日期
						sqlcommand.Parameters.AddWithValue("@accountInsert", accountInsert);
						sqlcommand.Parameters.AddWithValue("@accountUpdate2", accountUpdate2);
						sqlcommand.Parameters.AddWithValue("@newUpdate", datee2);
						int rowsAffected = sqlcommand.ExecuteNonQuery();
						if (rowsAffected > 0)
						{
							isEdit = false;
							AlertService.Success($"成功修改當前{rowsAffected}條");
							myAccount = string.Empty;//我的帳號
							accountIn = string.Empty;
							accountOut = string.Empty;
							accountOtherNo = string.Empty;
							remark = string.Empty;
							DataVersionService.IncrementDataVersion();
							if (editStates.ContainsKey(index))
							{
								editStates[index] = !editStates[index];
							}
						}
						else
						{
							AlertService.Error("修改失敗");
						}
						SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
						sqlTransaction.Commit();
						HandleArrayWithMoreThanOneItemSelectAll(index, latestIn, latestOut);
						//UpdateHandleEmptyArray2(latestRecord.baccountDate, datee3);//更新頁面
						UpdateHandleEmptyArray(datee4);
					}
					break;
				}
				//除了最舊都是在這(最新或者不新不舊)
				if (updatedData[i].baccountDate.ToString("yyyy-MM-dd") == datestring)
				{
					DateTime datee5 = updatedData[i].baccountInsert;
					accountInsert = updatedData[i].baccountInsert;
					accountUpdate2 = updatedData[i].baccountUpdate;
					datee3 = DateTime.Now;
					datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//加入日期
					for (int j = 0; j < i; j++)
					{
						toto1 += updatedData[j].baccountIn - updatedData[j].baccountOut;
					}
					toto1 += latestIn - latestOut;
					if (sqlconnection.State == System.Data.ConnectionState.Closed)
					{
						sqlconnection.Open();
						SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
						sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
						sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
						sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
						sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
						sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
						sqlcommand.Parameters.AddWithValue("@accountNo", editaccount);//我的帳號
						sqlcommand.Parameters.AddWithValue("@bank", editbank);//銀行
						sqlcommand.Parameters.AddWithValue("@accountDate", datestring);//交易日期
						sqlcommand.Parameters.AddWithValue("@accountInsert", accountInsert);
						sqlcommand.Parameters.AddWithValue("@accountUpdate2", accountUpdate2);
						sqlcommand.Parameters.AddWithValue("@newUpdate", datee2);
						int rowsAffected = sqlcommand.ExecuteNonQuery();
						if (rowsAffected > 0)
						{
							isEdit = false;
							AlertService.Success($"成功修改當前{rowsAffected}條");
							myAccount = string.Empty;//我的帳號
							accountIn = string.Empty;
							accountOut = string.Empty;
							accountOtherNo = string.Empty;
							remark = string.Empty;
							DataVersionService.IncrementDataVersion();
							if (editStates.ContainsKey(index))
							{
								editStates[index] = !editStates[index];
							}
						}
						else
						{
							AlertService.Error("修改失敗");
						}
						SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
						sqlTransaction.Commit();
						HandleArrayWithMoreThanOneItemSelectAll(index, latestIn, latestOut);
						UpdateHandleEmptyArray(datee5);
					}
				}
			}

		}
		else//並沒有新增其他東西
		{
			m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == editaccount)//我的帳號
										.Where(item => item.baccountBankNo == editbank)
										.GroupBy(item => item.baccountNo)
										.Select(group => group.OrderBy(item => item.baccountDate))
										.SelectMany(sortedGroup => sortedGroup)
										.ToArray();
			for (int i = 0; i < m_NewAccountS.Length; i++)
			{
				datee3 = DateTime.Now;
				datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//加入日期
				DateTime datee4 = m_NewAccountS[i].baccountInsert;
				if (i == 0 && m_NewAccountS[i].baccountDate.ToString("yyyy-MM-dd") == datestring)//最舊
				{
					accountInsert = m_NewAccountS[i].baccountInsert;
					accountUpdate2 = m_NewAccountS[i].baccountUpdate;
					toto1 = toto;
					if (sqlconnection.State == System.Data.ConnectionState.Closed)
					{
						sqlconnection.Open();
						SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
						sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
						sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
						sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
						sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
						sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
						sqlcommand.Parameters.AddWithValue("@accountNo", editaccount);//我的帳號
						sqlcommand.Parameters.AddWithValue("@bank", editbank);//銀行
						sqlcommand.Parameters.AddWithValue("@accountDate", datestring);//交易日期
						sqlcommand.Parameters.AddWithValue("@accountInsert", accountInsert);
						sqlcommand.Parameters.AddWithValue("@accountUpdate2", accountUpdate2);
						sqlcommand.Parameters.AddWithValue("@newUpdate", datee2);
						int rowsAffected = sqlcommand.ExecuteNonQuery();
						if (rowsAffected > 0)
						{
							isEdit = false;
							AlertService.Success($"成功修改當前{rowsAffected}條");
							myAccount = string.Empty;//我的帳號
							accountIn = string.Empty;
							accountOut = string.Empty;
							accountOtherNo = string.Empty;
							remark = string.Empty;
							DataVersionService.IncrementDataVersion();
							if (editStates.ContainsKey(index))
							{
								editStates[index] = !editStates[index];
							}
						}
						else
						{
							AlertService.Error("修改失敗");
						}
						SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
						sqlTransaction.Commit();
						HandleArrayWithMoreThanOneItemSelectAll(index, latestIn, latestOut);
						//UpdateHandleEmptyArray2(latestRecord.baccountDate, datee3);//更新頁面
						UpdateHandleEmptyArray(datee4);
					}
					break;
				}
				//除了最舊都是在這(最新或者不新不舊)
				if (m_NewAccountS[i].baccountDate.ToString("yyyy-MM-dd") == datestring)
				{
					DateTime datee5 = m_NewAccountS[i].baccountInsert;
					accountInsert = m_NewAccountS[i].baccountInsert;
					accountUpdate2 = m_NewAccountS[i].baccountUpdate;
					datee3 = DateTime.Now;
					datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//加入日期
					for (int j = 0; j < i; j++)
					{
						toto1 += m_NewAccountS[j].baccountIn - m_NewAccountS[j].baccountOut;
					}
					toto1 += latestIn - latestOut;
					if (sqlconnection.State == System.Data.ConnectionState.Closed)
					{
						sqlconnection.Open();
						SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
						sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
						sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
						sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
						sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
						sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
						sqlcommand.Parameters.AddWithValue("@accountNo", editaccount);//我的帳號
						sqlcommand.Parameters.AddWithValue("@bank", editbank);//銀行
						sqlcommand.Parameters.AddWithValue("@accountDate", datestring);//交易日期
						sqlcommand.Parameters.AddWithValue("@accountInsert", accountInsert);
						sqlcommand.Parameters.AddWithValue("@accountUpdate2", accountUpdate2);
						sqlcommand.Parameters.AddWithValue("@newUpdate", datee2);
						int rowsAffected = sqlcommand.ExecuteNonQuery();
						if (rowsAffected > 0)
						{
							isEdit = false;
							AlertService.Success($"成功修改當前{rowsAffected}條");
							myAccount = string.Empty;//我的帳號
							accountIn = string.Empty;
							accountOut = string.Empty;
							accountOtherNo = string.Empty;
							remark = string.Empty;
							DataVersionService.IncrementDataVersion();
							if (editStates.ContainsKey(index))
							{
								editStates[index] = !editStates[index];
							}
						}
						else
						{
							AlertService.Error("修改失敗");
						}
						SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
						sqlTransaction.Commit();
						HandleArrayWithMoreThanOneItemSelectAll(index, latestIn, latestOut);
						UpdateHandleEmptyArray(datee5);
					}
				}
			}

		}

	}
	//修改>2除了當前的update
	public void HandleArrayWithMoreThanOneItemSelectAll(int index, decimal latestIn, decimal latestOut)
	{
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == editaccount)//我的帳號
										.Where(item => item.baccountBankNo == editbank)
										.GroupBy(item => item.baccountNo)
										.Select(group => group.OrderBy(item => item.baccountDate))
										.SelectMany(sortedGroup => sortedGroup)
										.ToArray();
			var oldRecord = updatedData[0];// 最舊
			var secondRecord =updatedData[1];//第二舊
			decimal toto0 = 0;
			decimal toto1 = 0;
			decimal toto2 = 0;
			toto0 += latestIn - latestOut;
			using (SqlConnection sqlConnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022"))
			{
				if (oldRecord.baccountDate.ToString("yyyy-MM-dd") == datestring)//最舊
				{
					for (int k = 1; k < updatedData.Length; k++)
					{
						accountDate = updatedData[k].baccountDate.ToString("yyyy-MM-dd");
						accountInsert = updatedData[k].baccountInsert;
						bank = updatedData[k].baccountBankNo;
						kkk += $"第{k.ToString()}個日期{updatedData[k].baccountDate}帳戶{updatedData[k].baccountNo}收入{updatedData[k].baccountIn}支出{updatedData[k].baccountOut}原本總額{updatedData[k].baccountTotal}";
						toto0 += updatedData[k].baccountIn - updatedData[k].baccountOut;
						kkk += $"新總額{toto0}";
						UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
					}
				}
				else if (updatedData.Last().baccountDate.ToString("yyyy-MM-dd") == datestring)//新資料依然最新
				{
				}
				else
				{
					for (int i = 0; i < updatedData.Length; i++)
					{
						if (updatedData[i].baccountDate.ToString("yyyy-MM-dd") == datestring)
						{
							for (int a = 0; a < i; a++)
							{
								toto2 += updatedData[a].baccountIn - updatedData[a].baccountOut;
							}
							for (int k = i + 1; k < updatedData.Length; k++)
							{
								accountDate = updatedData[k].baccountDate.ToString("yyyy-MM-dd");
								accountInsert = updatedData[k].baccountInsert;
								bank = updatedData[k].baccountBankNo;
								kkk += $"第{k.ToString()}個日期{updatedData[k].baccountDate}帳戶{updatedData[k].baccountNo}收入{updatedData[k].baccountIn}支出{updatedData[k].baccountOut}原本總額{updatedData[k].baccountTotal}";
								if (k == (i + 1))
								{
									toto1 += toto2 + latestIn - latestOut + updatedData[k].baccountIn - updatedData[k].baccountOut;
									UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
								}
								else
								{
									toto1 += updatedData[k].baccountIn - updatedData[k].baccountOut;
									UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
								}
							}
							break;
						}
					}
				}
			}

		}
		else//版本沒有更新過
		{
			m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == editaccount)//我的帳號
										.Where(item => item.baccountBankNo == editbank)
										.GroupBy(item => item.baccountNo)
										.Select(group => group.OrderBy(item => item.baccountDate))
										.SelectMany(sortedGroup => sortedGroup)
										.ToArray();
			var oldRecord = m_NewAccountS[0];// 最舊
			var secondRecord = m_NewAccountS[1];//第二舊
			decimal toto0 = 0;
			decimal toto1 = 0;
			decimal toto2 = 0;
			toto0 += latestIn - latestOut;
			using (SqlConnection sqlConnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022"))
			{
				if (oldRecord.baccountDate.ToString("yyyy-MM-dd") == datestring)//最舊
				{
					for (int k = 1; k < m_NewAccountS.Length; k++)
					{
						accountDate = m_NewAccountS[k].baccountDate.ToString("yyyy-MM-dd");
						accountInsert = m_NewAccountS[k].baccountInsert;
						bank = m_NewAccountS[k].baccountBankNo;
						kkk += $"第{k.ToString()}個日期{m_NewAccountS[k].baccountDate}帳戶{m_NewAccountS[k].baccountNo}收入{m_NewAccountS[k].baccountIn}支出{m_NewAccountS[k].baccountOut}原本總額{m_NewAccountS[k].baccountTotal}";
						toto0 += m_NewAccountS[k].baccountIn - m_NewAccountS[k].baccountOut;
						kkk += $"新總額{toto0}";
						UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
					}
				}
				else if (m_NewAccountS.Last().baccountDate.ToString("yyyy-MM-dd") == datestring)//新資料依然最新
				{
				}
				else
				{
					for (int i = 0; i < m_NewAccountS.Length; i++)
					{
						if (m_NewAccountS[i].baccountDate.ToString("yyyy-MM-dd") == datestring)
						{
							for (int a = 0; a < i; a++)
							{
								toto2 += m_NewAccountS[a].baccountIn - m_NewAccountS[a].baccountOut;
							}
							for (int k = i + 1; k < m_NewAccountS.Length; k++)
							{
								accountDate = m_NewAccountS[k].baccountDate.ToString("yyyy-MM-dd");
								accountInsert = m_NewAccountS[k].baccountInsert;
								bank = m_NewAccountS[k].baccountBankNo;
								kkk += $"第{k.ToString()}個日期{m_NewAccountS[k].baccountDate}帳戶{m_NewAccountS[k].baccountNo}收入{m_NewAccountS[k].baccountIn}支出{m_NewAccountS[k].baccountOut}原本總額{m_NewAccountS[k].baccountTotal}";
								if (k == (i + 1))
								{
									toto1 += toto2 + latestIn - latestOut + m_NewAccountS[k].baccountIn - m_NewAccountS[k].baccountOut;
									UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
								}
								else
								{
									toto1 += m_NewAccountS[k].baccountIn - m_NewAccountS[k].baccountOut;
									UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
								}
							}
							break;
						}
					}
				}
			}

		}
	}

	// 取消编辑
	public void OnClickCancel(int index)
	{
		isEdit = false;
		editingIndex = -1;
		if (editStates.ContainsKey(index))
		{
			editStates[index] = !editStates[index];
		}
		bank = "";
		money = "";
		accountOtherNo = "";
	}
	public void OnClicCancel2(MouseEventArgs e)
	{
		isAdd = false;
		isEdit = false;
	}
	//修改，變成可修改
	DateTime datee;
	string datestring = "";
	string editbankfull = "";
	string editbank = "";
	string editaccount = "";
	bool isEdit = false;
	int editingIndex = -1;
	Dictionary<int, bool> editStates = new Dictionary<int, bool>();
	public void OnClickEdit(int index)
	{
		isEdit = true;
		editingIndex = index;
		if (editStates.ContainsKey(index))
		{
			editStates[index] = !editStates[index];
		}
		else
		{
			editStates.Add(index, true);
		}
		NewAccount rowData = m_NewAccountS[index];
		datee = rowData.baccountDate.Date;
		datestring = datee.ToString("yyyy-MM-dd");
		editbankfull = rowData.baccountBankNo + rowData.baccountBank;
		editbank = rowData.baccountBankNo;
		editaccount = rowData.baccountNo;
	}
	string dd = "";
	public void OnClickDel3(int index)
	{
		if (index >= 0 && index < m_NewAccountS.Length)
		{
			// 1. 在資料庫中刪除資料
			string SQLString = "DELETE FROM dbo.NewAccountInfo WHERE [accountDate] = @accountDate AND [accountBankNo] = @bank AND [accountNo] =@accountNo AND [accountInsert]=@accountInsert ";
			SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
			dataset1 = new DataSet();

			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountDate", m_NewAccountS[index].baccountDate);
				sqlcommand.Parameters.AddWithValue("@bank", m_NewAccountS[index].baccountBankNo);
				sqlcommand.Parameters.AddWithValue("@accountNo", m_NewAccountS[index].baccountNo);
				sqlcommand.Parameters.AddWithValue("@accountInsert", m_NewAccountS[index].baccountInsert);
				try
				{
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Info($"成功刪除{rowsAffected}條");
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Warn($"刪除失敗 ");
					}
				}
				catch (Exception ex)
				{
					kkk = ex.Message;
				}
				finally
				{
					sqlconnection.Close();
				}
			}
			// 2. 在本地資料結構中刪除資料
			List<NewAccount> newDataList = m_NewAccountS.ToList();
			//要在newDataList.RemoveAt(index)存取accountno2,bankno2,accountinsert2
			//因為這是要存取被刪除資料的帳號、銀行、加入時間
			string accountno2 = m_NewAccountS[index].baccountNo;
			string bankno2 = m_NewAccountS[index].baccountBankNo;
			DateTime accountinsert2 = m_NewAccountS[index].baccountInsert;
			//網頁上刪除該資料
			newDataList.RemoveAt(index);
			//m_NewAccountS變成新的(已刪除掉那筆資料ㄌ)
			m_NewAccountS = newDataList.ToArray();
			//3.更新資料庫的總額
			UpdateDelTotal(index, accountno2, bankno2, accountinsert2);
		}
	}

	//刪掉資料後，所有同樣帳戶、銀行的資料重新算總額
	public void UpdateDelTotal(int index, string accountno2, string bankno2, DateTime accountinsert2)
	{
		string SQLString = "UPDATE dbo.NewAccountInfo SET  [accountTotal]=@accountTotal WHERE [accountNo] =@accountNo AND [accountBankNo] =@accountBankNo AND [accountDate]= @accountDate AND [accountInsert] =@accountInsert";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		dataset1 = new DataSet();
		m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == accountno2)
												.Where(item => item.baccountBankNo == bankno2)
												.OrderBy(item => item.baccountDate)//依照日期排序，不然會亂掉!
												.ToArray();
		decimal toto0 = 0;
		for (int k = 0; k < m_NewAccountS.Length; k++)
		{
			//目前的list中包含已刪除的資料，因此設指令，若加入時間相同則跳過
			//加入時間accountInsert是唯一值
			if (m_NewAccountS[k].baccountInsert == accountinsert2)
			{
				// 跳過當前跌代
				continue;
			}
			kkk += $"第{k.ToString()}個日期{m_NewAccountS[k].baccountDate}帳戶{m_NewAccountS[k].baccountNo}收入{m_NewAccountS[k].baccountIn}支出{m_NewAccountS[k].baccountOut}原本總額{m_NewAccountS[k].baccountTotal}";
			toto0 += m_NewAccountS[k].baccountIn - m_NewAccountS[k].baccountOut;
			kkk += $"新總額{toto0}";
			if (sqlconnection.State == System.Data.ConnectionState.Closed)
			{
				sqlconnection.Open();
				SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
				sqlcommand.Parameters.AddWithValue("@accountTotal", toto0);
				sqlcommand.Parameters.AddWithValue("@accountNo", m_NewAccountS[k].baccountNo);
				sqlcommand.Parameters.AddWithValue("@accountDate", m_NewAccountS[k].baccountDate);
				sqlcommand.Parameters.AddWithValue("@accountBankNo", m_NewAccountS[k].baccountBankNo);
				sqlcommand.Parameters.AddWithValue("@accountInsert", m_NewAccountS[k].baccountInsert);
				try
				{
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Info($"成功修改{rowsAffected}條");
					}
					else
					{
						AlertService.Warn($"修改失敗 ");
					}
				}
				catch (Exception ex)
				{
					kkk = ex.Message;
				}
				finally
				{
					sqlconnection.Close();
				}
			}
		}
	}
	string bb_up = "";
	string ee = "";
	string cc_up = "";
	public DataSet dataset1 = new DataSet();
	bool isAdd = false;

	public void OnClickAdd(MouseEventArgs e)
	{
		isAdd = true;
		isEdit = true;
	}
	string datee2 = "";
	DateTime datee3;

	public void OnClickAdd3(MouseEventArgs e)
	{
		if (editDate == DateTime.MinValue)
		{
			AlertService.Error("請選擇交易日期");
			return; // 在這裡返回，結束函數執行
		}
		if (string.IsNullOrEmpty(bank))
		{
			AlertService.Error("請選擇銀行");
			return;
		}
		if (string.IsNullOrEmpty(accountOtherNo))
		{
			AlertService.Error("請選擇帳號");
			return;
		}
		if (string.IsNullOrEmpty(money))
		{
			AlertService.Error("請選擇付款方式");
			return;
		}
		if (string.IsNullOrEmpty(accountIn) && string.IsNullOrEmpty(accountOut))
		{
			AlertService.Error("請輸入收入或者支出");
			return;
		}
		if (string.IsNullOrEmpty(accountOtherNo))
		{
			AlertService.Error("請輸入對方帳號");
			return;
		}
		datee3 = DateTime.Now;
		datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//加入日期
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == account) // 根據帳號篩選
						.GroupBy(item => item.baccountNo) // 按帳號分組
						.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
						.SelectMany(sortedGroup => sortedGroup)
						.ToArray();
			if (updatedData.Length == 0)//若該帳號沒有使用過直接新增
			{
				HandleEmptyArray();

			}
			else if (updatedData.Length == 1) //若該帳號只有一條
			{
				HandleArrayWithOneItem();
			}
			else //若該帳號大於2條
			{
				HandleArrayWithMoreThanOneItem();
			}
		}
		else
		{

			m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == account) // 根據帳號篩選
						.GroupBy(item => item.baccountNo) // 按帳號分組
						.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
						.SelectMany(sortedGroup => sortedGroup)
						.ToArray();
			if (m_NewAccountS.Length == 0)//若該帳號沒有使用過直接新增
			{
				HandleEmptyArray();

			}
			else if (m_NewAccountS.Length == 1) //若該帳號只有一條
			{
				HandleArrayWithOneItem();
			}
			else //若該帳號大於2條
			{
				HandleArrayWithMoreThanOneItem();
			}
		}
	}

	private NewAccount[] m_NewAccountRecordS;
	public void HandleEmptyArray()//若該帳號沒有使用過直接新增
	{
		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountBranch],[accountBranchNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[accountAddress],[remark], [accountInsert],[accountUpdate]) VALUES (@editDate,@bankName,@bankCode,@accountBranch,@accountBranchNo,@accountNo,@accountType,@accountIn,@accountOut,@toto,@accountOtherNo,@accountAddress,@remark ,@accountInsert,@accountUpdate)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountNo == account && item.baccountBankNo == bankCode).ToArray();
		var repairbranch = m_AccountRepairS[0];
		string r_b=repairbranch.baccountBranch;
		string r_b_n=repairbranch.baccountBranchNo;
		string r_b_a = repairbranch.baccountAddress;
		decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut;
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
			sqlcommand.Parameters.AddWithValue("@editDate", editDate);//交易日期
			sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
			sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
			sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);
			sqlcommand.Parameters.AddWithValue("@accountBranchNo",r_b_n);//銀行代碼
			sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
			sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
			sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? 0);//收入
			sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? 0);//支出
			sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
			sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
			sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);
			sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
			sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
			sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)
			{

				cc_up = $"成功新增當前{rowsAffected}條";
				AlertService.Success($"成功新增{rowsAffected}條");
				isAdd = false;
				isEdit = false;
				myAccount = "";//我的帳號
				accountOut = "";
				accountIn = "";
				accountOtherNo = "";
				DataVersionService.IncrementDataVersion();

			}
			else
			{
				cc_up = " 更新失敗";
				AlertService.Error("更新失敗");
			}
			SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
			sqlTransaction.Commit();
		}
		UpdateHandleEmptyArray(DateTime.Parse(datee2));

	}


	public void UpdateHandleEmptyArray(DateTime date)//更新頁面//0
	{
		m_NewAccountS = Array.Empty<NewAccount>();
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<NewAccount> newList = m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetDataFromDatabase();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newList.Where(item => item.baccountInsert.ToString("yyyy/MM/dd HH:mm:ss") == date.ToString("yyyy/MM/dd HH:mm:ss"))
										.ToArray();
	}

	public List<NewAccount> GetDataFromDatabase()
	{
		List<NewAccount> newDataList = new List<NewAccount>();
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string SQLString = "SELECT ROW_NUMBER() OVER(PARTITION BY accountBank, accountNo ORDER BY  accountDate ASC)  , *FROM NewAccountInfo; ";
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				connection.Open();
				using (SqlDataReader reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						NewAccount newData = new NewAccount
							{
								// 這裡的屬性賦值根據您的資料表結構進行調整
								baccountDate = reader.GetDateTime(reader.GetOrdinal("accountDate")),
								baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
								baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
								baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
								baccountType = reader.GetString(reader.GetOrdinal("accountType")),
								baccountIn = reader.IsDBNull(reader.GetOrdinal("accountIn")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountIn")),
								baccountOut = reader.IsDBNull(reader.GetOrdinal("accountOut")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountOut")),
								baccountTotal = reader.IsDBNull(reader.GetOrdinal("accountTotal")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountTotal")),
								baccountOtherNo = reader.GetString(reader.GetOrdinal("accountOtherNo")),
								bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
								baccountInsert = reader.GetDateTime(reader.GetOrdinal("accountInsert"))
								// 其他屬性...
							};
						newDataList.Add(newData);
					}
				}
			}
			return newDataList;
		}
	}
	public void HandleArrayWithOneItem()//若該帳號只有一條新增
	{
		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountBranch],[accountBranchNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[accountAddress],[remark], [accountInsert],[accountUpdate]) VALUES (@accountDate,@bankName,@bankCode,@accountBranch,@accountBranchNo,@accountNo,@accountType,@accountIn,@accountOut,@toto,@accountOtherNo,@accountAddress,@remark ,@accountInsert,@accountUpdate)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == account) // 根據帳號篩選
	.GroupBy(item => item.baccountNo) // 按帳號分組
	.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
	.SelectMany(sortedGroup => sortedGroup)
	.ToArray();
			m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountNo == account && item.baccountBankNo == bankCode).ToArray();
			var repairbranch = m_AccountRepairS[0];
			string r_b = repairbranch.baccountBranch;
			string r_b_n = repairbranch.baccountBranchNo;
			string r_b_a = repairbranch.baccountAddress;
			var latestRecord = updatedData[0];
			if (latestRecord.baccountDate == editDate)//如果日期一樣
			{
				DateTime a = latestRecord.baccountDate;
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal secondTotal = (updatedData[0].baccountIn - updatedData[0].baccountOut);
				decimal toto = secondTotal + latestIn - latestOut;
				//var previousTotal = latestIn - latestOut > 0 ? latestIn - latestOut : 0;
				//kkk = toto.ToString();
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch",r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo",r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間

					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						cc_up = $"成功新增當前{rowsAffected}條";
						AlertService.Success($"成功新增{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (latestRecord.baccountDate > editDate)//最舊
			{

				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal toto = latestIn - latestOut;
				string accountinsert = datee.ToString("yyyy-MM-dd HH:mm:ss");
				DateTime a = latestRecord.baccountDate;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼	
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						isAdd = false;
						isEdit = false;
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					HandleArrayWithOneItemUpdate(latestIn, latestOut);
					UpdateHandleEmptyArray(DateTime.Parse(datee2));
				}
			}
			else//新資料為最新
			{
				DateTime a = latestRecord.baccountDate;
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal secondTotal = (updatedData[0].baccountIn - updatedData[0].baccountOut);
				decimal toto = secondTotal + latestIn - latestOut;
				//var previousTotal = latestIn - latestOut > 0 ? latestIn - latestOut : 0;
				//kkk = toto.ToString();
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間

					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						cc_up = $"成功新增當前{rowsAffected}條";
						AlertService.Success($"成功新增{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}

		}
		else
		{
			m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountNo == account) // 根據帳號篩選
	.GroupBy(item => item.baccountNo) // 按帳號分組
	.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
	.SelectMany(sortedGroup => sortedGroup)
	.ToArray();
			var latestRecord = m_NewAccountS[0];
			m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountNo == account && item.baccountBankNo == bankCode).ToArray();
			var repairbranch = m_AccountRepairS[0];
			string r_b = repairbranch.baccountBranch;
			string r_b_n = repairbranch.baccountBranchNo;
			string r_b_a = repairbranch.baccountAddress;
			if (latestRecord.baccountDate == editDate)//如果日期一樣
			{
				DateTime a = latestRecord.baccountDate;
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal secondTotal = (m_NewAccountS[0].baccountIn - m_NewAccountS[0].baccountOut);
				decimal toto = secondTotal + latestIn - latestOut;
				//var previousTotal = latestIn - latestOut > 0 ? latestIn - latestOut : 0;
				//kkk = toto.ToString();
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼	
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址		
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間

					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						cc_up = $"成功新增當前{rowsAffected}條";
						AlertService.Success($"成功新增{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (latestRecord.baccountDate > editDate)//最舊
			{
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal toto = latestIn - latestOut;
				string accountinsert = datee.ToString("yyyy-MM-dd HH:mm:ss");
				DateTime a = latestRecord.baccountDate;
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					HandleArrayWithOneItemUpdate(latestIn, latestOut);
					UpdateHandleEmptyArray(DateTime.Parse(datee2));
				}
			}
			else//新資料為最新
			{
				DateTime a = latestRecord.baccountDate;
				decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
				decimal secondTotal = (m_NewAccountS[0].baccountIn - m_NewAccountS[0].baccountOut);
				decimal toto = secondTotal + latestIn - latestOut;
				//var previousTotal = latestIn - latestOut > 0 ? latestIn - latestOut : 0;
				//kkk = toto.ToString();
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間

					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						cc_up = $"成功新增當前{rowsAffected}條";
						AlertService.Success($"成功新增{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}

		}
	}
	string kkk = "";
	public void HandleArrayWithOneItemUpdate(decimal latestIn, decimal latestOut)//若該帳號只有一條更新
	{

		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		//decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		//decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut;
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData.Where(item => item.baccountNo == account) // 根據帳號篩選
	.GroupBy(item => item.baccountNo) // 按帳號分組
	.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
	.SelectMany(sortedGroup => sortedGroup)
	.ToArray();
			var latestRecord2 = updatedData[0];
			if (latestRecord2.baccountDate ==editDate)//最舊
			{
				string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE   [accountBankNo] =@bank AND [accountInsert]= @accountInsert ";
				m_NewAccountRecordS = updatedData.Where(item => item.baccountDate > editDate).ToArray();
				foreach (var oldRecord in m_NewAccountRecordS)
				{
					decimal secondIn = oldRecord.baccountIn;
					decimal secondOut = oldRecord.baccountOut;
					decimal toto1 = (latestIn - latestOut + secondIn - secondOut);
					//string datee4 = oldRecord.baccountDate.ToString("yyyy-MM-dd")	;
					//kkk = datee4.ToString()+"--"+bank+"---"+myAccount+"---"+toto1.ToString();
					//kkk顯示出來ㄉ結果沒有錯
					//kkk = toto.ToString()+"--" +secondIn.ToString()+"--"+ secondOut.ToString();
					if (sqlconnection.State == System.Data.ConnectionState.Closed)
					{
						sqlconnection.Open();
						SqlCommand sqlcommand = new SqlCommand(SQLString2, sqlconnection);
						sqlcommand.Parameters.Clear();
						sqlcommand.Parameters.AddWithValue("@accountInsert", oldRecord.baccountInsert);//交易日期
						sqlcommand.Parameters.AddWithValue("@bank", bankCode);//銀行
						sqlcommand.Parameters.AddWithValue("@toto", latestIn - latestOut + secondIn - secondOut);//餘額
						int rowsAffected = sqlcommand.ExecuteNonQuery();
						if (rowsAffected > 0)
						{
							AlertService.Success($"成功更新{rowsAffected}條");
							myAccount = "";//我的帳號
							accountOut = "";
							accountIn = "";
							accountOtherNo = "";
							isAdd = false;
							isEdit = false;
						}
						else
						{
							AlertService.Error("更新失敗");
						}
						SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
						sqlTransaction.Commit();
					}
				}
			}
		}
		else{
			m_NewAccountS = ServerData.m_NewAccountS
								.Where(item => item.baccountNo == account) // 根據帳號篩選
	.GroupBy(item => item.baccountNo) // 按帳號分組
	.Select(group => group.OrderBy(item => item.baccountBank)
							.ThenBy(item => item.baccountNo)
							.ThenBy(item => item.baccountDate)
							.ThenBy(item => item.baccountInsert))
	.SelectMany(sortedGroup => sortedGroup)
	.ToArray();
			var latestRecord = m_NewAccountS[0];
			if (latestRecord.baccountDate > editDate)//最舊
			{
				string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE   [accountBankNo] =@bank AND [accountInsert]= @accountInsert ";
				m_NewAccountRecordS = m_NewAccountS.Where(item => item.baccountDate > editDate).ToArray();
				foreach (var oldRecord in m_NewAccountRecordS)
				{
					decimal secondIn = oldRecord.baccountIn;
					decimal secondOut = oldRecord.baccountOut;
					decimal toto1 = (latestIn - latestOut + secondIn - secondOut);
					//string datee4 = oldRecord.baccountDate.ToString("yyyy-MM-dd")	;
					//kkk = datee4.ToString()+"--"+bank+"---"+myAccount+"---"+toto1.ToString();
					//kkk顯示出來ㄉ結果沒有錯
					//kkk = toto.ToString()+"--" +secondIn.ToString()+"--"+ secondOut.ToString();
					if (sqlconnection.State == System.Data.ConnectionState.Closed)
					{
						sqlconnection.Open();
						SqlCommand sqlcommand = new SqlCommand(SQLString2, sqlconnection);
						sqlcommand.Parameters.Clear();
						sqlcommand.Parameters.AddWithValue("@accountInsert", oldRecord.baccountInsert);//交易日期
						sqlcommand.Parameters.AddWithValue("@bank", bankCode);//銀行
						sqlcommand.Parameters.AddWithValue("@toto", latestIn - latestOut + secondIn - secondOut);//餘額
						int rowsAffected = sqlcommand.ExecuteNonQuery();
						if (rowsAffected > 0)
						{
							AlertService.Success($"成功更新{rowsAffected}條");
							myAccount = "";//我的帳號
							accountOut = "";
							accountIn = "";
							accountOtherNo = "";
						}
						else
						{
							AlertService.Error("更新失敗");
						}
						SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
						sqlTransaction.Commit();
					}
				}
			}
		}
	}
	public void HandleArrayWithMoreThanOneItem()//若該帳號大於2條新增
	{
		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountBranch],[accountBranchNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[accountAddress],[remark], [accountInsert],[accountUpdate]) VALUES (@accountDate,@bankName,@bankCode,@accountBranch,@accountBranchNo,@accountNo,@accountType,@accountIn,@accountOut,@toto,@accountOtherNo,@accountAddress,@remark ,@accountInsert,@accountUpdate)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		var latestRecord = m_NewAccountS[0];// 最舊
		var secondRecord = m_NewAccountS[1];//第二舊
		decimal latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		decimal latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut;
		kkk += DataVersionService.DataVersion.ToString();
		decimal toto1 = 0;
		m_AccountRepairS = ServerData.m_AccountRepairS.Where(item => item.baccountNo == account && item.baccountBankNo == bankCode).ToArray();
		var repairbranch = m_AccountRepairS[0];
		string r_b = repairbranch.baccountBranch;
		string r_b_n = repairbranch.baccountBranchNo;
		string r_b_a = repairbranch.baccountAddress;
		if (DataVersionService.DataVersion != 1)
		{
			NewAccount[] updatedData = UpdateNewDataALL2();
			updatedData = updatedData
						.Where(item => item.baccountNo == account) // 根據帳號篩選
						.GroupBy(item => item.baccountNo) // 按帳號分組
						.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
						.SelectMany(sortedGroup => sortedGroup)
						.ToArray();
			if (updatedData[0].baccountDate == editDate)//如果第一筆舊資料和新資料日期一樣
			{
				for (int i = 0; i < updatedData.Length; i++)
				{
					if (updatedData[i].baccountDate > editDate)
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto = updatedData[i - 1].baccountTotal + latestIn - latestOut;
						kkk += toto.ToString() + "----" + i.ToString() + "--" + updatedData[i].baccountDate;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼							
							sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址							
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
							break;
						}
					}
					else//maybe所有日期都是同一個，那麼就是新資料會被當成最新資料 就好了 
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);

						toto1 = updatedData.Last().baccountTotal + latestIn - latestOut;
						kkk = toto1.ToString();
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
							sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
						}

					}
				}

			}
			else if (updatedData.Last().baccountDate == editDate)//如果舊資料的最後一筆和新添加的資料日期一樣
			{
				latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);

				toto1 = updatedData.Last().baccountTotal + latestIn - latestOut;
				kkk = toto1.ToString();
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址					
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}


			}
			else if (updatedData[0].baccountDate > editDate)//新資料成為最舊
			{
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						isAdd = false;
						isEdit = false;
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (updatedData.Last().baccountDate < editDate)//新資料依然最新
			{
				latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);

				toto1 = updatedData.Last().baccountTotal + latestIn - latestOut;
				kkk = toto1.ToString();
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}

			}
			else//新資料不舊不新，最麻煩了 QQ
			{
				for (int i = 0; i < updatedData.Length; i++)
				{
					if (updatedData[i].baccountDate > editDate)
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto = updatedData[i - 1].baccountTotal + latestIn - latestOut;
						kkk += toto.ToString() + "----" + i.ToString() + "--" + updatedData[i].baccountDate;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼							
							sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址							
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
							break;
						}
					}
				}
			}

		}
		else
		{
			m_NewAccountS=ServerData.m_NewAccountS.GroupBy(item => item.baccountNo) // 按帳號分組
	.Select(group => group.OrderBy(item => item.baccountBank)
						.ThenBy(item => item.baccountNo)
						.ThenBy(item => item.baccountDate)
						.ThenBy(item => item.baccountInsert))
	.SelectMany(sortedGroup => sortedGroup)
	.ToArray();
			if (latestRecord.baccountDate == editDate)//如果第一筆舊資料和新資料日期一樣
			{
				for (int i = 0; i < m_NewAccountS.Length; i++)
				{
					if (m_NewAccountS[i].baccountDate > editDate)
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto = m_NewAccountS[i - 1].baccountTotal + latestIn - latestOut;
						kkk += toto.ToString() + "----" + i.ToString() + "--" + m_NewAccountS[i].baccountDate;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼							
							sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址							
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
							break;
						}
					}
					else
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);

						toto1 = m_NewAccountS.Last().baccountTotal + latestIn - latestOut;
						kkk = toto1.ToString();
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
							sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址					
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
						}

					}
				}

			}

			else if (m_NewAccountS.Last().baccountDate == editDate)//如果舊資料的最後一筆和新添加的資料日期一樣
			{
				latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);

				toto1 = m_NewAccountS.Last().baccountTotal + latestIn - latestOut;
				kkk = toto1.ToString();
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (latestRecord.baccountDate > editDate)//新資料成為最舊
			{
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}
			}
			else if (m_NewAccountS.Last().baccountDate < editDate)//新資料依然最新
			{
				latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
				latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);

				toto1 = m_NewAccountS.Last().baccountTotal + latestIn - latestOut;
				kkk = toto1.ToString();
				if (sqlconnection.State == System.Data.ConnectionState.Closed)
				{
					sqlconnection.Open();
					SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
					sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
					sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
					sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼

					sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
					sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼					
					sqlcommand.Parameters.AddWithValue("@accountNo",account);//我的帳號
					sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
					sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
					sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
					sqlcommand.Parameters.AddWithValue("@toto", toto1);//餘額
					sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
					sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址					
					sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
					sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
					sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
					int rowsAffected = sqlcommand.ExecuteNonQuery();
					if (rowsAffected > 0)
					{
						AlertService.Success($"成功新增當前{rowsAffected}條");
						myAccount = "";//我的帳號
						accountOut = "";
						accountIn = "";
						accountOtherNo = "";
						DataVersionService.IncrementDataVersion();
					}
					else
					{
						AlertService.Error("新增失敗");
					}
					SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
					sqlTransaction.Commit();
					UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
				}

			}
			else//新資料不舊不新，最麻煩了 QQ
			{
				for (int i = 0; i < m_NewAccountS.Length; i++)
				{
					if (m_NewAccountS[i].baccountDate > editDate)
					{
						latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
						latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
						toto = m_NewAccountS[i - 1].baccountTotal + latestIn - latestOut;
						kkk += toto.ToString() + "----" + i.ToString() + "--" + m_NewAccountS[i].baccountDate;
						if (sqlconnection.State == System.Data.ConnectionState.Closed)
						{
							sqlconnection.Open();
							SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
							sqlcommand.Parameters.AddWithValue("@accountDate", editDate);//交易日期
							sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
							sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
							sqlcommand.Parameters.AddWithValue("@accountBranch", r_b);//分行
							sqlcommand.Parameters.AddWithValue("@accountBranchNo", r_b_n);//分行代碼							
							sqlcommand.Parameters.AddWithValue("@accountNo", account);//我的帳號
							sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
							sqlcommand.Parameters.AddWithValue("@accountIn", latestIn);//收入
							sqlcommand.Parameters.AddWithValue("@accountOut", latestOut);//支出
							sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
							sqlcommand.Parameters.AddWithValue("@accountOtherNo", accountOtherNo);//對方帳號
							sqlcommand.Parameters.AddWithValue("@accountAddress", r_b_a);//地址							
							sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
							sqlcommand.Parameters.AddWithValue("@accountInsert", datee2);//加入時間，之後排序以這個為主
							sqlcommand.Parameters.AddWithValue("@accountUpdate", datee2);//修改時間，初始都是和加入時間相同，後續會因為有修改而變動時間
							int rowsAffected = sqlcommand.ExecuteNonQuery();
							if (rowsAffected > 0)
							{
								AlertService.Success($"成功新增當前{rowsAffected}條");
								myAccount = "";//我的帳號
								accountOut = "";
								accountIn = "";
								accountOtherNo = "";
								DataVersionService.IncrementDataVersion();
							}
							else
							{
								AlertService.Error("新增失敗");
							}
							SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
							sqlTransaction.Commit();
							HandleArrayWithMoreThanOneItemUpdate(latestIn, latestOut);
							UpdateHandleEmptyArray(DateTime.Parse(datee2));//更新頁面
							break;
						}
					}
				}
			}

		}
	}

	public void HandleArrayWithMoreThanOneItemUpdate(decimal latestIn, decimal latestOut)//若該帳號大於2條更新
	{
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		//string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE [accountNo] =@accountNo AND [accountBankNo] =@bank AND [accountDate]= @accountDate ";
		var oldRecord = m_NewAccountS[0];
		var secondRecourd = m_NewAccountS[1];
		//latestIn = string.IsNullOrEmpty(accountIn) ? 0 : decimal.Parse(accountIn);
		//latestOut = string.IsNullOrEmpty(accountOut) ? 0 : decimal.Parse(accountOut);
		decimal toto = latestIn - latestOut;
		//最舊
		decimal toto0 = 0;//最舊
		decimal toto1 = 0;

		m_NewAccountRecordS = m_NewAccountS.Where(item => item.baccountDate >= editDate).GroupBy(item => item.baccountNo) // 按帳號分組
			.Select(group => group.OrderBy(item => item.baccountBank)
					.ThenBy(item => item.baccountNo)
					.ThenBy(item => item.baccountDate)
					.ThenBy(item => item.baccountInsert))
			.SelectMany(sortedGroup => sortedGroup).ToArray();
		using (SqlConnection sqlConnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022"))
		{
			if (DataVersionService.DataVersion != 1)
			{
				NewAccount[] updatedData = UpdateNewDataALL2();
				updatedData = updatedData.Where(item => item.baccountNo == account) // 根據帳號篩選
	.GroupBy(item => item.baccountNo) // 按帳號分組
	.Select(group => group.OrderBy(item => item.baccountBank)
								.ThenBy(item => item.baccountNo)
								.ThenBy(item => item.baccountDate)
								.ThenBy(item => item.baccountInsert))
	.SelectMany(sortedGroup => sortedGroup)
	.ToArray();
				if (updatedData[0].baccountDate == editDate)//如果最舊的資料和新資料日期一樣
				{
					for (int i = 0; i < updatedData.Length; i++)
					{
						//kkk += i.ToString()+"--"+m_NewAccountS[i].baccountDate;
						if (updatedData[i].baccountDate != editDate)
						{
							toto1 = updatedData[i-1].baccountTotal;//新資料不舊不新，最麻煩了 QQ
							for (int j = i; j < updatedData.Length; j++)
							{
								toto1 += updatedData[j].baccountIn - updatedData[j].baccountOut;
								bank = updatedData[j].baccountBankNo;
								accountInsert = updatedData[j].baccountInsert;
								accountDate = updatedData[j].baccountDate.ToString("yyyy-MM-dd");
								UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
								kkk += "第" + j.ToString() + "次--" + updatedData[j].baccountDate.ToString() + toto1.ToString();
							}break;
						}


					}
				}
				else if (updatedData.Last().baccountDate == editDate)//如果新資料和最後一筆資料日期一樣
				{ }
				else if (updatedData[0].baccountDate > editDate)//最舊
				{
					for (int i = 0; i < updatedData.Length; i++)
					{
						accountInsert = updatedData[i].baccountInsert;
						accountDate = updatedData[i].baccountDate.ToString("yyyy-MM-dd");
						bank = m_NewAccountS[i].baccountBankNo;
						if (i == 0)
						{
							decimal oldIn = updatedData[0].baccountIn;
							decimal oldOut = updatedData[0].baccountOut;

							toto0 = toto + oldIn - oldOut;
							UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
						}
						else
						{
							toto0 += updatedData[i].baccountIn - updatedData[i].baccountOut;
							UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
						}
					}

				}
				else if (updatedData.Last().baccountDate < editDate)//新資料依然最新
				{ }
				else//不新不舊
				{
					for (int i = 0; i < updatedData.Length; i++)
					{
						//kkk += i.ToString()+"--"+m_NewAccountS[i].baccountDate;
						if (updatedData[i].baccountDate > editDate || updatedData[i].baccountDate == editDate)
						{
							toto1 = updatedData[i - 1].baccountTotal + latestIn - latestOut;//新資料不舊不新，最麻煩了 QQ

							for (int j = i; j < updatedData.Length; j++)
							{
								toto1 += updatedData[j].baccountIn - updatedData[j].baccountOut;
								bank = updatedData[j].baccountBankNo;
								accountInsert = updatedData[j].baccountInsert;
								accountDate = updatedData[j].baccountDate.ToString("yyyy-MM-dd");
								UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
								kkk += "第" + j.ToString() + "次--" + updatedData[j].baccountDate.ToString() + toto1.ToString();
								break;
							}
						}
					}
				}
			}
			else { 

				if (oldRecord.baccountDate == editDate)//如果最舊的資料和新資料日期一樣
				{
					for (int i = 0; i < m_NewAccountRecordS.Length; i++)
					{
						//kkk += i.ToString()+"--"+m_NewAccountS[i].baccountDate;
						if (m_NewAccountRecordS[i].baccountDate == editDate)
						{
							toto1 = m_NewAccountRecordS[i].baccountTotal + latestIn - latestOut;//新資料不舊不新，最麻煩了 QQ

							for (int j = i+1; j < m_NewAccountRecordS.Length; j++)
							{
								toto1 += m_NewAccountRecordS[j].baccountIn - m_NewAccountRecordS[j].baccountOut;
								bank = m_NewAccountRecordS[j].baccountBankNo;
								accountInsert = m_NewAccountRecordS[j].baccountInsert;
								accountDate = m_NewAccountRecordS[j].baccountDate.ToString("yyyy-MM-dd");
								UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
								kkk += "第" + j.ToString() + "次--" + m_NewAccountS[j].baccountDate.ToString() + toto1.ToString();

							}
						}
					}
				}
				else if (m_NewAccountS.Last().baccountDate == editDate)//如果新資料和最後一筆資料日期一樣
				{ }
				else if (oldRecord.baccountDate > editDate)//最舊
				{
					for (int i = 0; i < m_NewAccountRecordS.Length; i++)
					{
						accountInsert = m_NewAccountRecordS[i].baccountInsert;
						accountDate = m_NewAccountS[i].baccountDate.ToString("yyyy-MM-dd");
						bank = m_NewAccountS[i].baccountBankNo;
						if (i == 0)
						{
							decimal oldIn = m_NewAccountRecordS[0].baccountIn;
							decimal oldOut = m_NewAccountRecordS[0].baccountOut;

							toto0 = toto + oldIn - oldOut;
							UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
						}
						else
						{
							toto0 += m_NewAccountRecordS[i].baccountIn - m_NewAccountRecordS[i].baccountOut;
							UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto0, accountInsert);
						}
					}
				}
				else if (m_NewAccountS.Last().baccountDate < editDate)//新資料依然最新
				{ }
				else//不新不舊
				{
					for (int i = 0; i < m_NewAccountS.Length; i++)
					{
						//kkk += i.ToString()+"--"+m_NewAccountS[i].baccountDate;
						if (m_NewAccountS[i].baccountDate > editDate || m_NewAccountS[i].baccountDate==editDate)
						{
							toto1 = m_NewAccountS[i - 1].baccountTotal + latestIn - latestOut;//新資料不舊不新，最麻煩了 QQ

							for (int j = i; j < m_NewAccountS.Length; j++)
							{
								toto1 += m_NewAccountS[j].baccountIn - m_NewAccountS[j].baccountOut;
								bank = m_NewAccountS[j].baccountBankNo;
								accountInsert = m_NewAccountS[j].baccountInsert;
								accountDate = m_NewAccountS[j].baccountDate.ToString("yyyy-MM-dd");
								UpdateAccountTotal(sqlConnection, accountDate, bank, myAccount, toto1, accountInsert);
								kkk += "第" + j.ToString() + "次--" + m_NewAccountS[j].baccountDate.ToString() + toto1.ToString();
								break;
							}
						}
					}
				}
			}
		}
	}

	public void UpdateAccountTotal(SqlConnection sqlConnection, string accountDate, string bankCode, string accountNo, decimal toto, DateTime accountInsert)
	{
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		string SQLString2 = "UPDATE dbo.NewAccountInfo SET [accountTotal] = @toto  WHERE  [accountBankNo] =@bank AND [accountDate]= @accountDate  AND [accountInsert]=@accountInsert";
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString2, sqlconnection);
			sqlcommand.Parameters.Clear();
			sqlcommand.Parameters.AddWithValue("@accountDate", accountDate);//交易日期
			sqlcommand.Parameters.AddWithValue("@bank", bankCode);//銀行
			sqlcommand.Parameters.AddWithValue("@toto", toto);//餘額
			sqlcommand.Parameters.AddWithValue("@accountInsert", accountInsert);//加入時間，用於辨別
			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)

			{
				AlertService.Success($"成功更新{rowsAffected}條");
				myAccount = "";//我的帳號
				accountOut = "";
				accountIn = "";
				accountOtherNo = "";
				isAdd=false;
				isEdit = false;
			}
			else
			{
				AlertService.Error("更新失敗");
			}
			SqlTransaction sqlTransaction = sqlconnection.BeginTransaction();
			sqlTransaction.Commit();
		}
	}
	public void OnClickAdd2(MouseEventArgs e)
	{
		datee2 = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
		string SQLString = "INSERT INTO dbo.NewAccountInfo ([accountDate],[accountBank],[accountBankNo],[accountNo],[accountType],[accountIn],[accountOut],[accountTotal],[accountOtherNo],[remark], [accountInsert]) VALUES (@editDate,@bankName,@bankCode,@accountNo,@accountType,@accountIn,@accountOut,@accountTotal,@accountOtherNo,@remark ,@datee2)";
		SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		DataSet dataSet_up = new DataSet();
		if (editDate == DateTime.MinValue)
		{
			AlertService.Error("請選擇交易日期");
			return; // 在這裡返回，結束函數執行
		}
		if (string.IsNullOrEmpty(bank))
		{
			AlertService.Error("請選擇銀行");
			return;
		}
		if (string.IsNullOrEmpty(accountOtherNo))
		{
			AlertService.Error("請選擇帳號");
			return;
		}
		if (string.IsNullOrEmpty(money))
		{
			AlertService.Error("請選擇付款方式");
			return;
		}
		if (string.IsNullOrEmpty(accountIn) && string.IsNullOrEmpty(accountOut))
		{
			AlertService.Error("請輸入收入或者支出");
			return;
		}
		if (string.IsNullOrEmpty(accountOtherNo))
		{
			AlertService.Error("請輸入對方帳號");
			return;
		}
		if (sqlconnection.State == System.Data.ConnectionState.Closed)
		{
			sqlconnection.Open();
			SqlCommand sqlcommand = new SqlCommand(SQLString, sqlconnection);
			sqlcommand.Parameters.AddWithValue("@editDate", editDate);//交易日期
			sqlcommand.Parameters.AddWithValue("@bankName", bankName);//銀行
			sqlcommand.Parameters.AddWithValue("@bankCode", bankCode);//銀行代碼
			sqlcommand.Parameters.AddWithValue("@accountNo", myAccount);//我的帳號
			sqlcommand.Parameters.AddWithValue("@accountType", money);//付款方式
			sqlcommand.Parameters.AddWithValue("@accountIn", (object)accountIn ?? 0);//收入
			sqlcommand.Parameters.AddWithValue("@accountOut", (object)accountOut ?? 0);//支出
			sqlcommand.Parameters.AddWithValue("@accountTotal", accountTotal);//餘額
			sqlcommand.Parameters.AddWithValue("@accountOtherNo", bankCode2 + accountOtherNo);//對方帳號
			sqlcommand.Parameters.AddWithValue("@remark", (object)remark ?? DBNull.Value);//備註
			sqlcommand.Parameters.AddWithValue("@datee2", datee2);//加入時間，之後排序以這個為主
			int rowsAffected = sqlcommand.ExecuteNonQuery();
			if (rowsAffected > 0)
			{
				AlertService.Success($"成功新增{rowsAffected}條");
				myAccount = "";//我的帳號
				accountOut = "";
				accountIn = "";
				accountOtherNo = "";
			}
			else
			{
				AlertService.Error("更新失敗");
			}
		}
	}

	string aa = "";
	private NewAccount[] m_NewAccountS;
	public void OnClickSelect(MouseEventArgs e)
	{
		bool bError = false;
		if (string.IsNullOrWhiteSpace(bank))
		{
			bError = true;
			AlertService.Error("請選擇銀行");
		}
		if (beginDate.ToString() == "0001/1/1 上午 12:00:00")
		{
			bError = true;
			AlertService.Error("請輸入開始日期");
		}
		if (endDate.ToString() == "0001/1/1 上午 12:00:00")
		{
			bError = true;
			AlertService.Error("請輸入結束日期");
		}
		if (bError)
		{
			m_NewAccountS = null;
			return;
		}
		try
		{
			// 判斷資料庫是否有變動
			if (DataVersionService.DataVersion != 1)
			{
				m_NewAccountS = Array.Empty<NewAccount>();
				UpdateNewDataPart();
				lastDataVersion = GetDataVersion();
				kkk += "yes";
				kkk += "搜尋更新後的版本號" + DataSharedVision.dataVersion;
			}
			else
			{
				if (m_NewAccountS == null)
				{
					m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountBankNo == bankCode && (string.IsNullOrEmpty(account) || item.baccountNo == account) && item.baccountDate >= beginDate && item.baccountDate <= endDate)
															.GroupBy(item => item.baccountNo) // 按帳號分組
															.Select(group => group.OrderBy(item => item.baccountBank)
																.ThenBy(item => item.baccountNo)
																.ThenBy(item => item.baccountDate)
																.ThenBy(item => item.baccountInsert))
															.SelectMany(sortedGroup => sortedGroup)
															.ToArray();
				}
				else
				{
					//m_NewAccountS = Array.Empty<NewAccount>();
					m_NewAccountS = ServerData.m_NewAccountS.ToArray();
					m_NewAccountS = ServerData.m_NewAccountS.Where(item => item.baccountBankNo == bankCode && (string.IsNullOrEmpty(account) || item.baccountNo == account) && item.baccountDate >= beginDate && item.baccountDate <= endDate)
															.GroupBy(item => item.baccountNo) // 按帳號分組
															.Select(group => group.OrderBy(item => item.baccountBank)
																.ThenBy(item => item.baccountNo)
																.ThenBy(item => item.baccountDate)
																.ThenBy(item => item.baccountInsert))
															.SelectMany(sortedGroup => sortedGroup)
															.ToArray();
				}
			}
		}
		catch (Exception msg)
		{
			kkk = msg.Message;
		}
		AlertService.Success($"總共查詢到{m_NewAccountS.Count()}筆資料");
		if (m_NewAccountS == null)
		{
			AlertService.Warn("尚無資料");
		}
	}
	public List<NewAccount> existingData = new List<NewAccount>(); // 保留原來的資料
	public int lastDataVersion = GetDataVersion();
	public void OnClickSelect_All(MouseEventArgs e)
	{
		try
		{
			// 判斷資料庫是否有變動
			if (DataVersionService.DataVersion != 1)
			{
				m_NewAccountS = Array.Empty<NewAccount>();
				NewAccount[] updatedData = UpdateNewDataALL2();
				m_NewAccountS = updatedData.GroupBy(item => item.baccountNo) // 按帳號分組
	.Select(group => group.OrderBy(item => item.baccountBank)
							.ThenBy(item => item.baccountNo)
							.ThenBy(item => item.baccountDate)
							.ThenBy(item => item.baccountInsert))
	.SelectMany(sortedGroup => sortedGroup)
	.ToArray();
				lastDataVersion = GetDataVersion();
				kkk += "yes";
				kkk += "搜尋˙全部更新後的版本ˋ號" + DataSharedVision.dataVersion;
			}
			else
			{
				kkk += "no" + DataSharedVision.dataVersion;
				//UpdateNewData();
				if (m_NewAccountS == null)
				{
					m_NewAccountS = ServerData.m_NewAccountS.GroupBy(item => item.baccountNo) // 按帳號分組
	.Select(group => group.OrderBy(item => item.baccountBank)
							.ThenBy(item => item.baccountNo)
							.ThenBy(item => item.baccountDate)
							.ThenBy(item => item.baccountInsert))
	.SelectMany(sortedGroup => sortedGroup)
	.ToArray();
				}
				else
				{
					m_NewAccountS = Array.Empty<NewAccount>();
					m_NewAccountS = ServerData.m_NewAccountS.GroupBy(item => item.baccountNo) // 按帳號分組
	.Select(group => group.OrderBy(item => item.baccountBank)
							.ThenBy(item => item.baccountNo)
							.ThenBy(item => item.baccountDate)
							.ThenBy(item => item.baccountInsert))
	.SelectMany(sortedGroup => sortedGroup)
	.ToArray();
				}
			}
		}
		catch (Exception msg)
		{
			kkk = msg.Message;
		}
		AlertService.Success($"總共查詢到{m_NewAccountS.Count()}筆資料");
		if (m_NewAccountS == null)
		{
			AlertService.Warn("尚無資料");
		}
	}

	public void UpdateNewDataALL()
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<NewAccount> newList = m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetNewData();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newList.ToArray();
	}
	public void UpdateNewDataPart()
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<NewAccount> newList = m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetNewData();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newList.Where(item => item.baccountBankNo == bankCode && (string.IsNullOrEmpty(account) || item.baccountNo == account) && item.baccountDate >= beginDate && item.baccountDate <= endDate)
	.GroupBy(item => item.baccountNo) // 按帳號分組
	.Select(group => group.OrderBy(item => item.baccountBank)
							.ThenBy(item => item.baccountNo)
							.ThenBy(item => item.baccountDate)
							.ThenBy(item => item.baccountInsert))
	.SelectMany(sortedGroup => sortedGroup)
	.ToArray();


	}
	public NewAccount[] UpdateNewDataALL2()
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		//List<NewAccount> newList = m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetNewData();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		//newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		//newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newDataList.ToArray();
		return m_NewAccountS;
	}
	public NewAccount[] UpdateNewDataPart2()//新增後重新抓取資料
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		//新的一筆
		//List<NewAccount> newList = m_NewAccountS.ToList();
		// 新資料列表
		List<NewAccount> newDataList = GetNewData();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		//newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		//newList.AddRange(newDataList);
		//newList = newList.Except(newDataList).ToList();

		//自動排除重複項目
		//newList = newList.Union(newDataList).ToList();

		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_NewAccountS = newDataList.Where(item => item.baccountBankNo == bankCode && (string.IsNullOrEmpty(account) || item.baccountNo == account))
								.ToArray();
		return m_NewAccountS;

	}
	public List<NewAccount> GetNewData()//再次抓取資料
	{
		List<NewAccount> newDataList = new List<NewAccount>();
		//SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		string SQLString = "SELECT ROW_NUMBER() OVER (PARTITION　BY accountBank, accountNo ORDER BY  accountDate ASC )  , * FROM NewAccountInfo; ";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				connection.Open();
				using (SqlDataReader reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						NewAccount newData = new NewAccount
							{
								// 這裡的屬性賦值根據您的資料表結構進行調整
								baccountDate = reader.GetDateTime(reader.GetOrdinal("accountDate")),
								baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
								baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
								baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
								baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
								baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
								baccountType = reader.GetString(reader.GetOrdinal("accountType")),
								baccountIn = reader.IsDBNull(reader.GetOrdinal("accountIn")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountIn")),
								baccountOut = reader.IsDBNull(reader.GetOrdinal("accountOut")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountOut")),
								baccountTotal = reader.IsDBNull(reader.GetOrdinal("accountTotal")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountTotal")),
								baccountOtherNo = reader.GetString(reader.GetOrdinal("accountOtherNo")),
								baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
								bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
								baccountInsert = reader.GetDateTime(reader.GetOrdinal("accountInsert")),
								baccountUpdate = reader.IsDBNull(reader.GetOrdinal("accountUpdate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountUpdate")),
								// 其他屬性...
							};
						newDataList.Add(newData);
					}
				}
			}
			return newDataList;
		}
	}
	public AccountRepair[] UpdateAccountRepairALL()
	//專門給選擇銀行後跳出對應帳戶用的更新資料(有時候可能會先使用銀行維護去新增資料，這時候就要用他嚕)
	{
		// 將 NewAccount[] 陣列轉換為 List<NewAccount>
		List<AccountRepair> newList = ServerData.m_AccountRepairS.ToList();
		// 新資料列表
		List<AccountRepair> newDataList = GetAccountRepair();
		// 使用 LINQ 的 Except 方法排除已經存在的資料
		newDataList = newDataList.Except(newList).ToList();
		// 使用 AddRange 將新資料列表添加到現有的列表中
		newList.AddRange(newDataList);
		// 將結果轉換回陣列
		// 將新資料列表添加到現有的 m_NewAccountS 中
		m_AccountRepairS = newList.ToArray();
		return m_AccountRepairS;
	}

	public List<AccountRepair> GetAccountRepair()//再次抓取資料
	{
		List<AccountRepair> newDataList = new List<AccountRepair>();
		//SqlConnection sqlconnection = new SqlConnection("Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022");
		string connectionString = "Data Source=192.168.10.243\\SRV_DBSAPI,1433;Initial Catalog=Platform;User ID=sa;Password=DBSsa@2022";
		string SQLString = "SELECT * FROM NewAccountRepair ";
		dataset = new DataSet();
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			using (SqlCommand command = new SqlCommand(SQLString, connection))
			{
				try
				{
					connection.Open();

					using (SqlDataReader reader = command.ExecuteReader())
					{
						while (reader.Read())
						{
							AccountRepair newData = new AccountRepair
								{
									// 這裡的屬性賦值根據您的資料表結構進行調整
									baccountBank = reader.GetString(reader.GetOrdinal("accountBank")),
									baccountBankNo = reader.GetString(reader.GetOrdinal("accountBankNo")),
									baccountBranch = reader.GetString(reader.GetOrdinal("accountBranch")),
									baccountBranchNo = reader.GetString(reader.GetOrdinal("accountBranchNo")),
									baccountNo = reader.GetString(reader.GetOrdinal("accountNo")),
									baccountAddress = reader.GetString(reader.GetOrdinal("accountAddress")),
									baccountInitialMoney = reader.IsDBNull(reader.GetOrdinal("accountInitialMoney")) ? 0 : reader.GetDecimal(reader.GetOrdinal("accountInitialMoney")),
									bremark = reader.IsDBNull(reader.GetOrdinal("remark")) ? "" : reader.GetString(reader.GetOrdinal("remark")),
									baccountInsert = reader.IsDBNull(reader.GetOrdinal("accountInsert")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountInsert")),
									baccountUpdate = reader.IsDBNull(reader.GetOrdinal("accountUpdate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("accountUpdate")),

									// 其他屬性...
								};
							newDataList.Add(newData);
						}
					}
				}
				catch (Exception ex)
				{
					kkk += ex.Message;
				}
			}
		}
		return newDataList;
	}




#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DataVersionService DataVersionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAlertService AlertService { get; set; }
    }
}
#pragma warning restore 1591
